{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","useComplicationFormInit","toast","useToast","complications","spermTooLowCount","treatmentOutcome","typeOfPregnancy","fetalSacsUS","fetalheartsUS","chorionicity","electiveFetalReduction","loading","born","fillForm","data","rule","_save","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","useConfirm","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","usePregnancyOutcomeForm","pregnancyBirthOutcome","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","param","helpers","withParams","parseInt","oocyteCryoPreserved","length","isNumberOocytesInseminatedInjected","inseminatedInjected","isIVForFETCycle","isOocyteRetrivedGreaterThan0","retrievedOrThawed","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","spermOrigin","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","spermSource","semenVolume","spermCount","spermCollection","oocyteCollections","requiredWhen","artCycle","selectedCycle","cycleType","requireWhen","freshEmbryos","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","mustBe0IfPriorPregnancies0","priorPregnancies","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","useObstetricalHistoryFormInit","priorBirths","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","requiredIfMedicationForCOSContains","medicationForCOS","includes","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","otherAdjuvantMediDescription","triggerMedication","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","minValue","maxValue","requiredIfContains","patient","age","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","reasonCancelledOptions","adjuvantMedicationOptions","useBornEmbryoTransferInit","embryoTransfer","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","sourceTransferredEmbryos","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","useBornFreshEmbryoInit","inseminationMethod","oocytesNotUsed","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","utilizableEmbryos","embryosCryopreserved","reasonEmbryoCryopreservation","embryoFreshCryoMethod","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryosThawed","utilizableAfterThaw","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","embryoStageThawingOptions","embryoTransferOptions","requiredIfCycleGreaterthan22Jan","cycle","cycleDate","requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","mediAdminisPriorCos","otherMediPriorCosDesc","totalDoseRekovelleMcg","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","getBornExtra","patientId","id","cycleId","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","other_medi_prior_cos_desc","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","payload","useBornFieldOptions","complicationsOfPregnancyOptions","complicationsPregnancy","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS"],"mappings":"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","file":"js/chunk-5199d52a.a1c8bd1a.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission\n    };\n}\n","import { DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        complications: null,\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const fillForm = (data) => {\n        form.complications = data.complications;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.treatmentOutcome = data.treatmentOutcome;\n        form.typeOfPregnancy = data.typeOfPregnancy;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n    };\n\n    const rule = {\n        spermTooLowCount: {},\n        typeOfPregnancy: {},\n        fetalSacsUS: {},\n        fetalheartsUS: {},\n        chorionicity: {},\n        electiveFetalReduction: {}\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: {},\n        newbornDateBirth: {},\n        babiesborn: {}\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: format(\n                new Date(form.newbornDateBirth),\n                DATE_FORMAT_STRING\n            ),\n            pregnancyLossDate: format(\n                new Date(form.pregnancyLossDate),\n                DATE_FORMAT_STRING\n            )\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst isNumberOocytesInseminatedInjected = (param) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(param.inseminatedInjected) > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (param == \"IVF\" || param == \"FET\") {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            requiredWhen: isIVForFETCycle(\n                store.state.artCycle.selectedCycle.cycleType\n            )\n        },\n        oocyteCryoPreserved: {\n            requiredWhen: isOocyteRetrivedGreaterThan0(form)\n        },\n        oocyteCryoMethod: {\n            requiredWhen: isNumberOocytesCryoedIsGreaterThan0(form)\n        },\n        spermOrigin: {\n            requireWhen: isNumberOocytesInseminatedInjected(\n                store.state.born.freshEmbryos\n            )\n        },\n        oocyteFreezeDate: {\n            requiredWhen: isNumberOocytesCryoedIsGreaterThan0(form)\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: format(\n                new Date(form.oocyteCollectionDate),\n                DATE_FORMAT_STRING\n            ),\n            oocyteThawDate: format(\n                new Date(form.oocyteThawDate),\n                DATE_FORMAT_STRING\n            ),\n            oocyteFreezeDate: format(\n                new Date(form.oocyteFreezeDate),\n                DATE_FORMAT_STRING\n            ),\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate;\n        form.oocyteThawDate = data.oocyteThawDate;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.spermOrigin = data.spermOrigin;\n        form.ageSpermProvider = data.ageSpermProvider;\n        form.spermDonorID = data.spermDonorID;\n        form.spermDonorStatus = data.spermDonorStatus;\n        form.spermMotility = data.spermMotility;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.spermDonorBank = data.spermDonorBank;\n        form.spermSource = data.spermSource;\n        form.semenVolume = data.semenVolume;\n        form.spermCount = data.spermCount;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\", value: param }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\", value: param }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\", value: param }, (value) => {\n        if (param.reasonsForTreatmentCycle == 1) {\n            return value.length != 0;\n        }\n        return true;\n    });\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: null,\n        priorETsOwnOocytes: null,\n        priorETsDonorOocytes: null,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: null,\n        reasonsForMaleFactor: null\n    });\n\n    const rules = {\n        priorBirths: {\n            mustBe0IfPriorPregnancies0: mustBe0IfPriorPregnancies0(form)\n        },\n        typeOfFunding: {\n            requiredIfprovincialFundingIsYes: requiredIfprovincialFundingIsYes(\n                form\n            )\n        },\n        reasonsForMaleFactor: {\n            requiredIfReasonsForTreatmentCycleIsMaleFactor: requiredIfReasonsForTreatmentCycleIsMaleFactor(\n                form\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle;\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor;\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\", value: param }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return value != null;\n        }\n\n        return true;\n    });\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: null,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: null,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: null,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: null,\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: { required },\n        hightOfOocyteHight: { minValue: minValue(90), maxValue: maxValue(240) },\n        weightOfOocyte: { minValue: minValue(25), maxValue: maxValue(227) },\n        noOfDaysGonadotropins: {\n            requiredIfContains: requiredIfMedicationForCOSContains(form)\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication = data.adjuvantMedication;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.totalDoseLH = data.totalDoseLH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.estradiolLevel = data.estradiolLevel;\n        form.progesterOneLevel = data.progesterOneLevel;\n        form.endometrialThicknessFreshCycle =\n            data.endometrialThicknessFreshCycle;\n        form.cycleCancelledBeforeRetrieval = data.cycleCancelledBeforeRetrieval;\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: null,\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null\n    });\n\n    const rules = {\n        embryoTransfer: {  },\n        reasonsNoET: {  },\n        preparationUterineLining: {  },\n        transferDate: {  },\n        dateETAdjusted: {  },\n        assistedZonaHatching: {  },\n        embryosTransferred: {  },\n        sourceTransferredEmbryos: {  },\n        transferInseminationMethod: {  },\n        preImplGeneticTesting: {  },\n        charTransferredEmbryo: {  },\n        sitePGTembryo: {  },\n        gestationalCarrierSurrogate: {  },\n        numberThaws: {  }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness;\n        form.transferDate = data.transferDate;\n        form.dateETAdjusted = data.dateETAdjusted;\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos;\n        form.transferInseminationMethod = data.transferInseminationMethod;\n        form.preImplGeneticTesting = data.preImplGeneticTesting;\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate;\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n    };\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions\n    };\n}\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: null,\n        oocytesNotUsed: null,\n        reasonsForNoUse: null,\n        embryoStageFreezing: null,\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {},\n        oocytesNotUsed: {},\n        reasonsForNoUse: {},\n        embryoStageFreezing: {},\n        inseminatedInjected: {},\n        normalFertilization2PN: {},\n        ofMII: {},\n        utilizableEmbryos: {},\n        embryosCryopreserved: {},\n        reasonEmbryoCryopreservation: {},\n        embryoFreshCryoMethod: {}\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateFreshEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                embryoFreezeDate1: form.embryoFreezeDate1\n                    ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate2: form.embryoFreezeDate2\n                    ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate3: form.embryoFreezeDate3\n                    ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate4: form.embryoFreezeDate4\n                    ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions\n    };\n}\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {},\n        embryoStageThawing: {},\n        embryoFrozenCryoMethod: {},\n        embryoThawDate: {},\n        donatedEmbryoFromAnotherCouple: {}\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22Jan = (param, cycle) =>\n    helpers.withParams({ type: \"form\", value: param }, (value) => {\n        if (cycle.cycleType == \"FET\" || cycle.cycleType == \"FOIVF\") {\n            return true;\n        }\n\n        if (new Date(cycle.cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null\n    });\n\n    const rules = {\n        mediAdminisPriorCos: {\n            requiredIfCycleGreaterthan22Jan: requiredIfCycleGreaterthan22Jan(\n                form,\n                store.state.artCycle.selectedCycle\n            )\n        },\n        totalDoseRekovelleMcg: { required },\n        endoRecTestdPerformed: {\n            requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes: requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes(\n                store.state.artCycle.selectedCycle.cycleDate,\n                store.state.born.embryoTransfer\n            )\n        },\n        congenitalAnomalies: {\n            required\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.otherMediPriorCosDesc = data.other_medi_prior_cos_desc;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            other_medi_prior_cos_desc: form.otherMediPriorCosDesc,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = reactive([\n        {\n            value: \"Spontaneous\",\n            label: \"Spontaneous\"\n        },\n        {\n            value: \"Induced\",\n            label: \"Induced\"\n        },\n        {\n            value: \"No Labour\",\n            label: \"No Labour\"\n        }\n    ]);\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = reactive([\n        \"Spontaneous Vaginal Birth\",\n        \"Assisted Vaginal\",\n        \"Induced or Spontaneous Labour Cesarean Section\",\n        \"No Labour - Cesarean Section\",\n        \"Unknown\"\n    ]);\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = reactive([\n        \"None\",\n        \"Brachial plexus injury\",\n        \"Caput succedaneum\",\n        \"Cephalohematoma\",\n        \"Clavicular fracture\",\n        \"Facial nerve injury\",\n        \"Fracture - other\",\n        \"Palsy - other\",\n        \"Birth injury - other\",\n        \"Unknown\"\n    ]);\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = reactive([\n        {\n            value: \"No Transfer\",\n            label: \"No Transfer\"\n        },\n        {\n            value: \"Discharged Home\",\n            label: \"Discharged Home\"\n        },\n        {\n            value: \"Transfer to other organization\",\n            label: \"Transfer to other organization\"\n        },\n        {\n            value: \"Transfer to ICU/CCU\",\n            label: \"Transfer to ICU/CCU\"\n        },\n        {\n            value: \"Transfer to other non-obstetrical unit same hospital\",\n            label: \"Transfer to other non-obstetrical unit same hospital\"\n        },\n        {\n            value: \"Maternal Death -Not related to Pregnancy or Birth\",\n            label: \"Maternal Death -Not related to Pregnancy or Birth\"\n        },\n        {\n            value: \"Maternal Death - Related to Pregnancy or Birth\",\n            label: \"Maternal Death - Related to Pregnancy or Birth\"\n        }\n    ]);\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n"],"sourceRoot":""}