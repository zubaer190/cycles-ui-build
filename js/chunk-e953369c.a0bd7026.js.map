{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js","webpack:///./node_modules/core-js/modules/es.array.join.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","spermTooLowCountValidator","complications","helpers","withParams","length","includes","req","typeOfPregnancyValidator","embryoTransfer","fetalSacsUSValidator","param","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","validator","withMessage","dependentOn","_save","join","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","spermOriginValidator","oocytesInseminatedInjected","spermSourceValidator","isIVForFETCycle","spermCountValidator","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","spermOrigin","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","spermSource","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","cycleType","TIME_0","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","mustBe0IfPriorPregnancies0","priorPregnancies","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","cycleDate","useObstetricalHistoryFormInit","priorBirths","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","pgtAPlanned","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","requiredIfMedicationForCOSContains","medicationForCOS","totalDoseFSHValidator","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","mediAdminisPriorCosValidator","cycle","totalDoseRekovelleMcgValidator","progesterOneLevelValidator","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","otherAdjuvantMediDescription","triggerMedication","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","cycleStopped","totalDoseRekovelleMcg","mediAdminisPriorCos","otherMediPriorCosDesc","minValue","maxValue","patient","age","cycleStoppped","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","medicationAdministraionPriorToCosOptions","medicationAdministraionPriorToCos","reasonCancelledOptions","adjuvantMedicationOptions","embryoTransferValidator","cancel","cyccleType","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","intersection","filter","elem","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","frozenEmbryosIds","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","endometrialReceptivityTest","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","oocytesRetrieved","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","embryoStageFreezingValidator","embryosCryopreserved","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","utilizableEmbryos","reasonEmbryoCryopreservation","embryoFreshCryoMethod","payload","console","log","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryosThawed","utilizableAfterThaw","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","embryoStageThawingOptions","embryoFrozenCryoMethodOptions","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","liveBornFetus","sexFetus","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","patientId","id","cycleId","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","live_born_fetus","sex_fetus","preExistingMentalHealthCondition","useBornFieldOptions","complicationsOfPregnancyOptions","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","newbornComplications","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS","$","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","Object","STRICT_METHOD","target","proto","forced","separator","call","this","undefined"],"mappings":"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","file":"js/chunk-e953369c.a0bd7026.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission\n    };\n}\n","import { DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport {\n    CYCLE_START_DATE_JAN_19,\n    RADIO_NO,\n    RADIO_YES,\n    TIME_0\n} from \"@/constants\";\n\nconst spermTooLowCountValidator = (complications) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (complications.value.length == 0) {\n            return true;\n        }\n\n        if (complications.value.includes(\"None\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst typeOfPregnancyValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return value === \"Not Pregnant\";\n        }\n\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst fetalSacsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == null ||\n            param.typeOfPregnancy == \"Biochemical\" ||\n            param.typeOfPregnancy == \"Not Pregnant\" ||\n            param.typeOfPregnancy == \"Unknown\"\n        ) {\n            return true;\n        }\n\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\"\n        ) {\n            return parseInt(value) > 0;\n        }\n\n        if (param.typeOfPregnancy == \"Ectopic\") {\n            return parseInt(value) >= 0;\n        }\n\n        return true;\n    });\n\nconst fetalheartsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\n                typeOfPregnancy.value == \"Heterotopic\") &&\n            parseInt(fetalheartsUS.value) >= 2\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const confirm = useConfirm();\n\n    const form = reactive({\n        complications: [],\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\n\n    const fillForm = (data) => {\n        form.complications = data.complications ? data.complications : [];\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.treatmentOutcome = data.treatmentOutcome;\n        form.typeOfPregnancy = data.typeOfPregnancy;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n    };\n\n    const rule = {\n        complications: {\n            required\n        },\n        spermTooLowCount: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermTooLowCountValidator(computed(() => form.complications))\n            )\n        },\n        typeOfPregnancy: {\n            validator: helpers.withMessage(\n                \"Value Required if embryo transfer is yes & must be Not Pregnent if embryo transfer is no\",\n                typeOfPregnancyValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer)\n                )\n            )\n        },\n        fetalSacsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalSacsUSValidator(form)\n            )\n        },\n        fetalheartsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalheartsUSValidator(form)\n            )\n        },\n        chorionicity: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        electiveFetalReduction: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            complications: form.complications.join(\",\"),\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fetalSacsUSWarning = ref();\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        confirm,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nconst newbornDateBirthValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst pregnancyLossDateValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050890\" ||\n            form.pregnancyBirthOutcome == \"1050900\" ||\n            form.pregnancyBirthOutcome == \"1050910\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst babiesbornValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                pregnancyLossDateValidator(form)\n            )\n        },\n        newbornDateBirth: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                newbornDateBirthValidator(form)\n            )\n        },\n        babiesborn: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                babiesbornValidator(form)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: form.newbornDateBirth\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\n                : null,\n            pregnancyLossDate: form.pregnancyLossDate\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\n                : null\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermOriginValidator = (oocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermSourceValidator = (oocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        return true; // temp for now\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // return true; // temp for now\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermCountValidator = (spermTooLowCount) =>\n    helpers.withParams({ type: \"spermTooLowCond\" }, (value) => {\n        if (spermTooLowCount.value == \"N\") {\n            return value >= 1 && value <= 999;\n        }\n        return true;\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isIVForFETCycle(store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        oocyteCryoPreserved: { required },\n        oocyteCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermOrigin: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermOriginValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    )\n                )\n            )\n        },\n        spermSource: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermSourceValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    )\n                )\n            )\n        },\n        oocyteFreezeDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermCount: {\n            validator: helpers.withMessage(\n                \"Value must be between 1 to 999\",\n                spermCountValidator(computed(() => form.spermTooLowCount))\n            )\n        },\n        oocyteOrigin: { required },\n        retrievedOrThawed: { required }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: form.oocyteCollectionDate\n                ? format(\n                      new Date(form.oocyteCollectionDate),\n                      DATE_FORMAT_STRING\n                  )\n                : null,\n            oocyteThawDate: form.oocyteThawDate\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\n                : null,\n            oocyteFreezeDate: form.oocyteFreezeDate\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\n                : null,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate + TIME_0)\n            : null;\n        form.oocyteThawDate = data.oocyteThawDate\n            ? new Date(data.oocyteThawDate + TIME_0)\n            : null;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.spermOrigin = data.spermOrigin;\n        form.ageSpermProvider = data.ageSpermProvider;\n        form.spermDonorID = data.spermDonorID;\n        form.spermDonorStatus = data.spermDonorStatus;\n        form.spermMotility = data.spermMotility;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.spermDonorBank = data.spermDonorBank;\n        form.spermSource = data.spermSource;\n        form.semenVolume = data.semenVolume;\n        form.spermCount = data.spermCount;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.reasonsForTreatmentCycle == 1) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst provincialFundingValidator = (cycleDate) =>\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: null,\n        priorETsOwnOocytes: null,\n        priorETsDonorOocytes: null,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: null,\n        reasonsForMaleFactor: null,\n        pgtAPlanned: null\n    });\n\n    const rules = {\n        priorBirths: {\n            validator: mustBe0IfPriorPregnancies0(form)\n        },\n        typeOfFunding: {\n            validator: requiredIfprovincialFundingIsYes(form)\n        },\n        reasonsForMaleFactor: {\n            validator: helpers.withMessage(\n                \"Required when Reason for treatment cycle is male\",\n                requiredIfReasonsForTreatmentCycleIsMaleFactor(form)\n            )\n        },\n        provincialFundingForThisCycle: {\n            validator: provincialFundingValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle;\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor;\n        form.pgtAPlanned = data.pgtAPlanned ? data.pgtAPlanned : \"N\";\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseFSHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) >= 30 &&\n                parseInt(value) <= 30000\n            );\n        }\n\n        return true;\n    });\n\nconst totalDoseLHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return (\n                helpers.req(value) &&\n                parseFloat(value) >= 200 &&\n                parseFloat(value) <= 400\n            );\n        }\n\n        return true;\n    });\n\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value == 4) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value == 4) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst mediAdminisPriorCosValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cycleType == \"FET\" ||\n            cycle.value.cycleType == \"FOIVF\"\n        ) {\n            return true;\n        }\n\n        if (new Date(cycle.value.cycleDate) > new Date(\"2022-01-01\")) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst progesterOneLevelValidator = (value) => {\n    if (value == null) return true;\n    else {\n        return value > 0 && value <= 100;\n    }\n};\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: null,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: [],\n        otherAdjuvantMediDescription: null,\n        triggerMedication: null,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: null,\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null,\n        cycleStopped: null,\n        totalDoseRekovelleMcg: null,\n        mediAdminisPriorCos: null,\n        otherMediPriorCosDesc: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        hightOfOocyteHight: {\n            minValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                minValue(90)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                maxValue(240)\n            )\n        },\n        weightOfOocyte: {\n            minValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                minValue(25)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                maxValue(227)\n            )\n        },\n        noOfDaysGonadotropins: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                requiredIfMedicationForCOSContains(form)\n            )\n        },\n        totalDoseFSH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 20 and 30000\",\n                totalDoseFSHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        totalDoseLH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 200 and 400\",\n                totalDoseLHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        afcOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                afcOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        amhLevelOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                amhLevelOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        mediAdminisPriorCos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                mediAdminisPriorCosValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        totalDoseRekovelleMcg: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                totalDoseRekovelleMcgValidator(\n                    computed(() => form.medicationForCOS)\n                )\n            )\n        },\n        progesterOneLevel: {\n            validator: helpers.withMessage(\n                \"Value must be in range of 0 to 100 & value has to be multiplied by 3.18\",\n                progesterOneLevelValidator\n            )\n        },\n        estradiolLevel: {\n            minValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                minValue(0)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                maxValue(40000)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                adjuvantMedication: form.adjuvantMedication.join(\",\"),\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication = data.adjuvantMedication;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.totalDoseLH = data.totalDoseLH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.estradiolLevel = data.estradiolLevel;\n        form.progesterOneLevel = data.progesterOneLevel;\n        form.endometrialThicknessFreshCycle =\n            data.endometrialThicknessFreshCycle;\n        form.cycleCancelledBeforeRetrieval = data.cycleCancelledBeforeRetrieval;\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n        form.cycleStopped = data.cycleStoppped;\n        form.mediAdminisPriorCos = data.mediAdminisPriorCos;\n        form.totalDoseRekovelleMcg = data.totalDoseRekovelleMcg;\n        form.otherMediPriorCosDesc = data.otherMediPriorCosDesc;\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const medicationAdministraionPriorToCosOptions = computed(\n        () => store.state.options.medicationAdministraionPriorToCos\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        medicationAdministraionPriorToCosOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst embryoTransferValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cancel == false ||\n            cycle.value.cyccleType == \"FET\" ||\n            cycle.value.cyccleType == \"FOIVF\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\nconst isEbryoTrasferNo = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isEbryoTrasferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preparationUterineLiningValidator = (cycleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst transferDateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst dateETAdjustedValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst assistedZonaHatchingValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst embryosTransferredValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst sourceTransferredEmbryosValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst transferInseminationMethodValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\n        const intersection = freshSourceTransferredEmbryosIds.filter((elem) =>\n            [...sourceTransferredEmbryos.value].includes(elem)\n        );\n\n        if (\n            noOfEmbryosTransferred.value == 1 &&\n            intersection.length != 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst charTransferredEmbryoValidator = (\n    noOfEmbryosTransferred,\n    preImplementationGeneticSergery,\n    cycleDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            preImplementationGeneticSergery.value == \"yes\" &&\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (preImplGeneticTesting.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst gestationalCarrierSurrogateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const frozenEmbryosIds = [7, 8, 9, 10, 11, 12, 13];\n\n        if (\n            frozenEmbryosIds.includes(sourceTransferredEmbryos.value) &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst endometrialThicknessValidtor = (cyccleType) =>\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: [],\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null,\n        endometrialReceptivityTest: null\n    });\n\n    const rules = {\n        embryoTransfer: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoTransferValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        reasonsNoET: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferNo(computed(() => form.embryoTransfer))\n            )\n        },\n        preparationUterineLining: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                preparationUterineLiningValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        transferDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        dateETAdjusted: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        assistedZonaHatching: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        embryosTransferred: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryosTransferredValidator(computed(() => form.embryoTransfer))\n            )\n        },\n        sourceTransferredEmbryos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                sourceTransferredEmbryosValidator(\n                    computed(() => form.embryoTransfer)\n                )\n            )\n        },\n        transferInseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                transferInseminationMethodValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        preImplGeneticTesting: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                preImplGeneticTestingValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        charTransferredEmbryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                charTransferredEmbryoValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        sitePGTembryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                sitePGTembryoValidator(\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        gestationalCarrierSurrogate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        numberThaws: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                numberThawsValidator(\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        endometrialThickness: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                endometrialThicknessValidtor(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness;\n        form.transferDate = data.transferDate\n            ? new Date(data.transferDate + \" 00:00:00\")\n            : null;\n        form.dateETAdjusted = data.dateETAdjusted;\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos\n            ? data.sourceTransferredEmbryos\n            : [];\n        form.transferInseminationMethod = data.transferInseminationMethod;\n        form.preImplGeneticTesting = data.preImplGeneticTesting;\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate;\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n        form.endometrialReceptivityTest = data.endometrialReceptivityTest;\n    };\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions\n    };\n}\n\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nconst oocytesNotUsedValidator = (\n    oocytesRetrieved,\n    inseminatedInjected,\n    oocytesCryopreserved\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return (\n            helpers.req(value) &&\n            parseInt(value) ==\n                oocytesRetrieved.value -\n                    inseminatedInjected.value -\n                    oocytesCryopreserved.value\n        );\n    });\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (oocytesNotUsed.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n        if (noOfOocytesRetrieved.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOfOocytesRetrieved.value\n            );\n        }\n        return true;\n    });\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst embryosCryopreservedValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst reasonEmbryoCryopreservationValidator = (\n    embryosCryopreserved,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryosCryopreserved.value > 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: null,\n        oocytesNotUsed: null,\n        reasonsForNoUse: null,\n        embryoStageFreezing: null,\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                inseminationMethodValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    )\n                )\n            )\n        },\n        oocytesNotUsed: {\n            validator: helpers.withMessage(\n                \"Value must be equal to oocytesRetrieved - inseminatedInjected - oocytesCryopreserved\",\n                oocytesNotUsedValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    ),\n                    computed(() => form.inseminatedInjected),\n                    computed(\n                        () => store.state.born.dependentOn.oocytesCryopreserved\n                    )\n                )\n            )\n        },\n        reasonsForNoUse: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonsForNoUseValidator(computed(() => form.oocytesNotUsed))\n            )\n        },\n        embryoStageFreezing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoStageFreezingValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        inseminatedInjected: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        normalFertilization2PN: {\n            validator: helpers.withMessage(\n                \"Value Required and must be less or equal to oocytes inseminated/injected\",\n                normalFertilization2PNValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        ofMII: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                ofMIIValidator(computed(() => form.inseminatedInjected))\n            )\n        },\n        utilizableEmbryos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                utilizableEmbryosValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        embryosCryopreserved: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryosCryopreservedValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        reasonEmbryoCryopreservation: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonEmbryoCryopreservationValidator(\n                    computed(() => form.embryosCryopreserved),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        embryoFreshCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreshCryoMethodValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        let payload = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            embryoFreezeDate1: form.embryoFreezeDate1\n                ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate2: form.embryoFreezeDate2\n                ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate3: form.embryoFreezeDate3\n                ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate4: form.embryoFreezeDate4\n                ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                : null\n        };\n\n        // return;\n\n        store.dispatch(\"born/updateFreshEmbryo\", payload).then(() => {\n            toast.add({\n                severity: \"success\",\n                summary: \"\",\n                detail: \"Save Successful\",\n                life: 3000\n            });\n        });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            console.log(\"fresh invalid\");\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\n            ? new Date(data.embryoFreezeDate1 + TIME_0)\n            : null;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\n            ? new Date(data.embryoFreezeDate2 + TIME_0)\n            : null;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\n            ? new Date(data.embryoFreezeDate3 + TIME_0)\n            : null;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\n            ? new Date(data.embryoFreezeDate4 + TIME_0)\n            : null;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions\n    };\n}\n\nconst isFETCycleValidator = (cyccleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoStageThawing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoFrozenCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoThawDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        donatedEmbryoFromAnotherCouple: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null,\n                embryoThawDate: form.embryoThawDate\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoFrozenCryoMethodOptions = computed(\n        () => store.state.options.embryoFrozenCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoFrozenCryoMethodOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\n        if (parseInt(noOfBabiesBorn.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null,\n        liveBornFetus: null,\n        sexFetus: null\n    });\n\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\n    const medicationForCOS = ref();\n\n    const rules = {\n        congenitalAnomalies: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                congenitalAnomaliesValidator(\n                    computed(() => store.state.born.dependentOn.noOfBabiesBorn)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\n            ? new Date(data.estimated_date_of_birth)\n            : null;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n        form.liveBornFetus = data.live_born_fetus; // todo after service\n        form.sexFetus = data.sex_fetus; // todo after service\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome,\n            preExistingMentalHealthCondition:\n                form.preExistingMentalHealthCondition,\n            sex_fetus: form.sexFetus,\n            live_born_fetus: form.liveBornFetus\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra,\n        medicationForCOS,\n        medicationForCOSContainFSHOrLhOrFshPlusLH\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsOfPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = computed(\n        () => store.state.options.typeOfLabour\n    );\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = computed(\n        () => store.state.options.typeOfDelivery\n    );\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = computed(\n        () => store.state.options.newbornComplications\n    );\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = computed(\n        () => store.state.options.maternalOutcome\n    );\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n"],"sourceRoot":""}