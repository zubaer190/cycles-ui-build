{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./node_modules/core-js/modules/es.string.match.js","webpack:///./src/composable/born.js","webpack:///./src/composable/validator.js","webpack:///./node_modules/core-js/modules/es.array.join.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","hasBornCSVPermission","readPermission","fixRegExpWellKnownSymbolLogic","anObject","toLength","requireObjectCoercible","advanceStringIndex","regExpExec","MATCH","nativeMatch","maybeCallNative","regexp","O","this","matcher","undefined","call","RegExp","String","string","res","done","rx","S","global","fullUnicode","unicode","lastIndex","result","A","n","matchStr","spermTooLowCountValidator","complications","helpers","withParams","length","includes","req","typeOfPregnancyValidator","embryoTransfer","fetalSacsUSValidator","param","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","treatmentOutcomeValidator","cycleCancelled","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","validator","withMessage","dependentOn","_save","join","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","validDate","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","spermOriginValidator","oocytesInseminatedInjected","cyccleType","CycleType","EGG_FREEZING","FET","spermSourceValidator","oocyteCollectionDateValidator","spermCountValidator","semenVolumeValidator","spermOrigin","spermSource","intersection","freshSpermOrigins","filter","oocyteOriginValidator","cycleType","retrievedOrThawedValidator","oocyteCryoPreservedValidator","donorProviderSatusValidator","oocyteOrigin","console","log","OOCYTE_ORIGIN","FRESH_DONOR_OOCYTES","FROZEN_DONOR_OOCYTES","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","donorProviderstatus","oocyteCryoMethod","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","TIME_0","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","cycleDate","reasonsForTreatmentCycleValidtor","useObstetricalHistoryFormInit","priorBirths","priorPregnancies","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","pgtAPlanned","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","noOfDaysGonadotropinsValidator","medicationForCOS","FSH_VALIDATORS_MEDICATION_FOR_COS","totalDoseFSHValidator","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","mediAdminisPriorCosValidator","cycle","totalDoseRekovelleMcgValidator","FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS","progesterOneLevelValidator","reasonCancelledValidator","reasonCancelledDescValidator","ofFolliclesGt15mmValidator","ofFolliclesLt15mmValidator","medicationForCOSValidator","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","TYPE_OF_STIMULATION_PROTOCOL_DEFAULT","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","ADJUVANT_MEDICATION_DEFAULTS","otherAdjuvantMediDescription","triggerMedication","TRIGGER_MEDICATION_DEFAULTS","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","cycleStopped","totalDoseRekovelleMcg","mediAdminisPriorCos","MEDI_ADMINIS_PRIOR_COS_DEFUALT","otherMediPriorCosDesc","minValue","maxValue","patient","age","cycleStoppped","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","medicationAdministraionPriorToCosOptions","medicationAdministraionPriorToCos","reasonCancelledOptions","adjuvantMedicationOptions","useBornMarkAsComplete","markAsComplete","source","payload","patientId","id","cycleId","$axios","post","embryoTransferValidator","cancel","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","utilizableEmbryos","embryosCryopreserved","utilizableAfterThaw","_utilizableEmbryos","_utilizableAfterThaw","_embryosCryopreserved","calc","SOURCE_TRANSFERRED_EMBRYOS_NOT_FET","sourceTransferredEmbryosValidationMessage","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","elem","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","intersections","TRANSFERRED_EMBRYO_SOURCE_FROZENS","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","endometrialReceptivityTest","getDefaultEndometrialThickness","items","cycleMonitoring","lines","etUs","thickness","PREPARATION_UTERINE_LINING_DEFAULT","fertilizationEmbryoThawDate","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","oocytesRetrieved","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","embryoStageFreezingValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","embryosThawed","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","embryoFreezeDate1Validator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","reasonEmbryoCryopreservation","embryoFreshCryoMethod","emitter","emit","fillFormDefault","getDeafultDataByPrimaryCycle","getFreshEbmryo","resp","status","freshEmbryos","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","cycleIds","cyclesSummary","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","commit","embryoStageThawingOptions","embryoFrozenCryoMethodOptions","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","liveBornFetus","sexFetus","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","live_born_fetus","sex_fetus","preExistingMentalHealthCondition","useBornFieldOptions","complicationsOfPregnancyOptions","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","newbornComplications","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS","require","DATE_REGEX","match","$","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","Object","STRICT_METHOD","target","proto","forced","separator"],"mappings":"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","file":"js/chunk-27265e94.2f6029c2.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    const hasBornCSVPermission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => item.appKey === \"born-csv\"\n        );\n\n        if (idx > 0) {\n            return store.state.user.permissions[idx].readPermission;\n        }\n        return false;\n    });\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission,\n        hasBornCSVPermission\n    };\n}\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toLength = require('../internals/to-length');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@match logic\nfixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.es/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match\n    function (string) {\n      var res = maybeCallNative(nativeMatch, this, string);\n      if (res.done) return res.value;\n\n      var rx = anObject(this);\n      var S = String(string);\n\n      if (!rx.global) return regExpExec(rx, S);\n\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","import { CycleType, DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport {\n    ADJUVANT_MEDICATION_DEFAULTS,\n    CYCLE_START_DATE_JAN_19,\n    FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS,\n    FSH_VALIDATORS_MEDICATION_FOR_COS,\n    MEDI_ADMINIS_PRIOR_COS_DEFUALT,\n    OOCYTE_ORIGIN,\n    PREPARATION_UTERINE_LINING_DEFAULT,\n    RADIO_NO,\n    RADIO_YES,\n    TIME_0,\n    TRANSFERRED_EMBRYO_SOURCE_FROZENS,\n    TRIGGER_MEDICATION_DEFAULTS,\n    TYPE_OF_STIMULATION_PROTOCOL_DEFAULT\n} from \"@/constants\";\nimport { getFreshEbmryo } from \"@/service/born\";\nimport { emitter } from \"@/event-bus\";\nimport { $axios } from \"@/service/app-http\";\nimport { validDate } from \"@/composable/validator\";\n\nconst spermTooLowCountValidator = (complications) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (complications.value.length == 0) {\n            return true;\n        }\n\n        if (complications.value.includes(\"None\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst typeOfPregnancyValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return value === \"Not Pregnant\";\n        }\n\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst fetalSacsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == null ||\n            param.typeOfPregnancy == \"Biochemical\" ||\n            param.typeOfPregnancy == \"Not Pregnant\" ||\n            param.typeOfPregnancy == \"Unknown\"\n        ) {\n            return true;\n        }\n\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\"\n        ) {\n            return parseInt(value) > 0;\n        }\n\n        if (param.typeOfPregnancy == \"Ectopic\") {\n            return parseInt(value) >= 0;\n        }\n\n        return true;\n    });\n\nconst fetalheartsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\n                typeOfPregnancy.value == \"Heterotopic\") &&\n            parseInt(fetalheartsUS.value) >= 2\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst treatmentOutcomeValidator = (embryoTransfer, cycleCancelled) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\" || cycleCancelled.value == \"yes\") {\n            return value == \"Cycle not completed to transfer\" || value == null;\n        }\n\n        return true;\n    });\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const confirm = useConfirm();\n\n    const form = reactive({\n        complications: [],\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\n\n    const fillForm = (data) => {\n        form.complications = data.complications ? data.complications : [];\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n        if (data.treatmentOutcome != null) {\n            form.treatmentOutcome = data.treatmentOutcome;\n        }\n        if (data.typeOfPregnancy != null) {\n            form.typeOfPregnancy = data.typeOfPregnancy;\n        }\n    };\n\n    const rule = {\n        complications: {\n            required\n        },\n        spermTooLowCount: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermTooLowCountValidator(computed(() => form.complications))\n            )\n        },\n        typeOfPregnancy: {\n            validator: helpers.withMessage(\n                \"Value Required if embryo transfer is yes & must be Not Pregnent if embryo transfer is no\",\n                typeOfPregnancyValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer)\n                )\n            )\n        },\n        fetalSacsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalSacsUSValidator(form)\n            )\n        },\n        fetalheartsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalheartsUSValidator(form)\n            )\n        },\n        chorionicity: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        electiveFetalReduction: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        treatmentOutcome: {\n            validator: helpers.withMessage(\n                \"Value Must be Cycle not completed to transfer or null\",\n                treatmentOutcomeValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer),\n                    computed(() => store.state.born.dependentOn.cycleCancelled)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            complications: form.complications.join(\",\"),\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fetalSacsUSWarning = ref();\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        confirm,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nconst newbornDateBirthValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst pregnancyLossDateValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050890\" ||\n            form.pregnancyBirthOutcome == \"1050900\" ||\n            form.pregnancyBirthOutcome == \"1050910\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst babiesbornValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                pregnancyLossDateValidator(form)\n            ),\n            validDate\n        },\n        newbornDateBirth: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                newbornDateBirthValidator(form)\n            ),\n            validDate\n        },\n        babiesborn: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                babiesbornValidator(form)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: form.newbornDateBirth\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\n                : null,\n            pregnancyLossDate: form.pregnancyLossDate\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\n                : null\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermOriginValidator = (oocytesInseminatedInjected, cyccleType) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (\n            cyccleType.value == CycleType.EGG_FREEZING ||\n            cyccleType.value == CycleType.FET\n        ) {\n            return true;\n        }\n\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermSourceValidator = (oocytesInseminatedInjected, cyccleType) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (\n            cyccleType.value == CycleType.EGG_FREEZING ||\n            cyccleType.value == CycleType.FET\n        ) {\n            return true;\n        }\n\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        return true; // temp for now\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst oocyteCollectionDateValidator = (param) =>\n    helpers.withParams({ type: \"date\" }, (value) => {\n        return true; // temp for now\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // return true; // temp for now\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermCountValidator = (spermTooLowCount) =>\n    helpers.withParams({ type: \"spermTooLowCond\" }, (value) => {\n        if (spermTooLowCount.value == \"N\") {\n            return value >= 1 && value <= 999;\n        }\n        return true;\n    });\n\nconst semenVolumeValidator = (spermOrigin, spermSource, cyccleType) =>\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\n        if (cyccleType.value == \"Egg Freezing\") return true;\n\n        let intersection = [];\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\n        intersection = spermOrigin.value.filter((item) =>\n            freshSpermOrigins.includes(item)\n        );\n\n        if (spermSource.value == \"SSRC001\" && intersection.length > 0) {\n            return helpers.req(value) && value >= 0.1 && value <= 15;\n        }\n\n        return true;\n    });\n\nconst oocyteOriginValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == CycleType.FET) {\n            return true;\n        }\n        return helpers.req(value);\n    });\n\nconst retrievedOrThawedValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == CycleType.FET) {\n            return true;\n        }\n        return helpers.req(value);\n    });\n\nconst oocyteCryoPreservedValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == CycleType.FET) {\n            return true;\n        }\n        return helpers.req(value);\n    });\n\nconst donorProviderSatusValidator = (oocyteOrigin) =>\n    helpers.withParams({ type: \"oocyteOrigin\" }, (value) => {\n        console.log(oocyteOrigin.value);\n        if (\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FRESH_DONOR_OOCYTES) ||\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FROZEN_DONOR_OOCYTES)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                oocyteCollectionDateValidator(\n                    store.state.artCycle.selectedCycle.cycleType\n                )\n            ),\n            validDate\n        },\n        oocyteThawDate: { validDate },\n        oocyteCryoPreserved: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                oocyteCryoPreservedValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        oocyteCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermOrigin: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermOriginValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    ),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        spermSource: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermSourceValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    ),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        oocyteFreezeDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            ),\n            validDate\n        },\n        spermCount: {\n            validator: helpers.withMessage(\n                \"Value must be between 1 to 999\",\n                spermCountValidator(computed(() => form.spermTooLowCount))\n            )\n        },\n        oocyteOrigin: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                oocyteOriginValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        retrievedOrThawed: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                retrievedOrThawedValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        semenVolume: {\n            validator: helpers.withMessage(\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\n                'Fresh partner sperm' or 'Fresh own sperm'\n                and SpermSource = 'Semen'.\n                Range: 0.1 - 15 mL.`,\n                semenVolumeValidator(\n                    computed(() => form.spermOrigin),\n                    computed(() => form.spermSource),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        donorProviderstatus: {\n            validator: helpers.withMessage(\n                \"Value required\",\n                donorProviderSatusValidator(computed(() => form.oocyteOrigin))\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: form.oocyteCollectionDate\n                ? format(\n                      new Date(form.oocyteCollectionDate),\n                      DATE_FORMAT_STRING\n                  )\n                : null,\n            oocyteThawDate: form.oocyteThawDate\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\n                : null,\n            oocyteFreezeDate: form.oocyteFreezeDate\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\n                : null,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate + TIME_0)\n            : null;\n        form.oocyteThawDate = data.oocyteThawDate\n            ? new Date(data.oocyteThawDate + TIME_0)\n            : null;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate\n            ? new Date(data.oocyteFreezeDate + TIME_0)\n            : null;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n\n        if (store.state.artCycle.selectedCycle.cycleType != \"Egg Freezing\") {\n            form.spermOrigin = data.spermOrigin;\n            form.ageSpermProvider = data.ageSpermProvider;\n            form.spermDonorID = data.spermDonorID;\n            form.spermDonorStatus = data.spermDonorStatus;\n            form.spermMotility = data.spermMotility;\n            form.spermTooLowCount = data.spermTooLowCount;\n            form.spermDonorBank = data.spermDonorBank;\n            form.spermSource = data.spermSource;\n            form.semenVolume = data.semenVolume;\n            form.spermCount = data.spermCount;\n        }\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.reasonsForTreatmentCycle.includes(\"TCR004\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst provincialFundingValidator = (cycleDate) =>\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst reasonsForTreatmentCycleValidtor = (value) => {\n    return value.length > 0;\n};\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: 0,\n        priorETsOwnOocytes: 0,\n        priorETsDonorOocytes: 0,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: [],\n        reasonsForMaleFactor: [],\n        pgtAPlanned: null\n    });\n\n    const rules = {\n        priorBirths: {\n            required\n        },\n        typeOfFunding: {\n            validator: requiredIfprovincialFundingIsYes(form)\n        },\n        priorPregnancies: { required },\n        reasonsForMaleFactor: {\n            validator: helpers.withMessage(\n                \"Required when Reason for treatment cycle is male\",\n                requiredIfReasonsForTreatmentCycleIsMaleFactor(form)\n            )\n        },\n        provincialFundingForThisCycle: {\n            validator: provincialFundingValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        reasonsForTreatmentCycle: {\n            validator: helpers.withMessage(\n                \"At least one value is requred\",\n                reasonsForTreatmentCycleValidtor\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted\n            ? data.priorFreshCyclesStarted\n            : 0;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes\n            ? data.priorETsOwnOocytes\n            : 0;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes\n            ? data.priorETsDonorOocytes\n            : 0;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle\n            ? data.reasonsForTreatmentCycle\n            : [];\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor\n            ? data.reasonsForMaleFactor\n            : [];\n        form.pgtAPlanned = data.pgtAPlanned ? data.pgtAPlanned : \"N\";\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst noOfDaysGonadotropinsValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\n        let intersection = [];\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\n            medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseFSHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\n        let intersection = [];\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\n            medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) >= 50 &&\n                parseInt(value) <= 30000\n            );\n        }\n\n        return true;\n    });\n\nconst totalDoseLHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return (\n                helpers.req(value) &&\n                parseFloat(value) >= 200 &&\n                parseFloat(value) <= 400\n            );\n        }\n\n        return true;\n    });\n\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\n            return helpers.req(value) && value > 0 && value <= 50;\n        }\n\n        if (value != null) {\n            return value > 0 && value <= 50;\n        }\n\n        return true;\n    });\n\nconst mediAdminisPriorCosValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cycleType == \"FET\" ||\n            cycle.value.cycleType == \"FOIVF\"\n        ) {\n            return true;\n        }\n\n        if (new Date(cycle.value.cycleDate) > new Date(\"2022-01-01\")) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\"];\n        let intersection = [];\n        intersection = FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS.filter(\n            (item) => medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst progesterOneLevelValidator = (value) => {\n    if (value == null) return true;\n    else {\n        return value > 0 && value <= 31.4;\n    }\n};\n\nconst reasonCancelledValidator = (cycleCancelled) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (cycleCancelled.value == \"no\") {\n            return value.length == 0;\n        } else {\n            return value.length > 0;\n        }\n    });\n\nconst reasonCancelledDescValidator = (cycleCancelled) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        return true;\n        if (cycleCancelled.value == \"no\") {\n            return value == \"\" || value == null;\n        } else {\n            return helpers.req(value);\n        }\n    });\n\nconst ofFolliclesGt15mmValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == \"FET\") return true;\n        return helpers.req(value) && value > 0 && value <= 25;\n    });\n\nconst ofFolliclesLt15mmValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == \"FET\") return true;\n        return helpers.req(value);\n    });\n\nconst medicationForCOSValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == \"FET\") return true;\n        return helpers.req(value);\n    });\n\n// const ofFolliclesGt15mmValidator = (cycleType) =>\n//     helpers.withParams({ type: \"cycleType\" }, (value) => {\n//         console.log(value);\n//         return helpers.req(value) && value > 0 && value <= 25;\n//     });\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: TYPE_OF_STIMULATION_PROTOCOL_DEFAULT,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: ADJUVANT_MEDICATION_DEFAULTS,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: TRIGGER_MEDICATION_DEFAULTS,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: \"no\",\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null,\n        cycleStopped: \"N\",\n        totalDoseRekovelleMcg: null,\n        mediAdminisPriorCos: MEDI_ADMINIS_PRIOR_COS_DEFUALT,\n        otherMediPriorCosDesc: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        hightOfOocyteHight: {\n            minValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                minValue(90)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                maxValue(240)\n            )\n        },\n        weightOfOocyte: {\n            minValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                minValue(25)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                maxValue(227)\n            )\n        },\n        noOfDaysGonadotropins: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                noOfDaysGonadotropinsValidator(\n                    computed(() => form.medicationForCOS)\n                )\n            )\n        },\n        totalDoseFSH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 50 and 30000\",\n                totalDoseFSHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        medicationForCOS: {\n            validator: helpers.withMessage(\n                \"Value required\",\n                medicationForCOSValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        totalDoseLH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 200 and 400\",\n                totalDoseLHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        afcOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                afcOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        amhLevelOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required & must be between 0 to 50\",\n                amhLevelOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        mediAdminisPriorCos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                mediAdminisPriorCosValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        totalDoseRekovelleMcg: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                totalDoseRekovelleMcgValidator(\n                    computed(() => form.medicationForCOS)\n                )\n            )\n        },\n        progesterOneLevel: {\n            validator: helpers.withMessage(\n                \"Value must be in range of 0 to 31.4 & value has to be multiplied by 3.18\",\n                progesterOneLevelValidator\n            )\n        },\n        estradiolLevel: {\n            minValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                minValue(0)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                maxValue(40000)\n            )\n        },\n        reasonCancelled: {\n            validator: helpers.withMessage(\n                \"Value must be empty if cycle cancelled is no\",\n                reasonCancelledValidator(\n                    computed(() => form.cycleCancelledBeforeRetrieval)\n                )\n            )\n        },\n        otherReasonCanDesc: {\n            validator: helpers.withMessage(\n                \"Value must be empty if cycle cancelled is no\",\n                reasonCancelledDescValidator(\n                    computed(() => form.cycleCancelledBeforeRetrieval)\n                )\n            )\n        },\n        ofFolliclesGt15mm: {\n            validator: helpers.withMessage(\n                \"Value required & must between 0 ot 25\",\n                ofFolliclesGt15mmValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        ofFolliclesLs15mm: {\n            validator: helpers.withMessage(\n                \"Value required\",\n                ofFolliclesLt15mmValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                adjuvantMedication: form.adjuvantMedication.join(\",\"),\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication =\n            data.adjuvantMedication.length > 0\n                ? data.adjuvantMedication\n                : ADJUVANT_MEDICATION_DEFAULTS;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol\n            ? data.typeOfStimulationProtocol\n            : TYPE_OF_STIMULATION_PROTOCOL_DEFAULT;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication\n            ? data.triggerMedication\n            : TRIGGER_MEDICATION_DEFAULTS;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.cycleCancelledBeforeRetrieval =\n            data.cycleCancelledBeforeRetrieval == \"yes\" ? \"yes\" : \"no\";\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n        form.cycleStopped = data.cycleStoppped == \"Y\" ? \"Y\" : \"N\";\n        form.mediAdminisPriorCos =\n            data.mediAdminisPriorCos.length != 0\n                ? data.mediAdminisPriorCos\n                : MEDI_ADMINIS_PRIOR_COS_DEFUALT;\n        form.totalDoseRekovelleMcg = data.totalDoseRekovelleMcg;\n        form.otherMediPriorCosDesc = data.otherMediPriorCosDesc;\n\n        if (data.endometrialThicknessFreshCycle) {\n            form.endometrialThicknessFreshCycle =\n                data.endometrialThicknessFreshCycle;\n        }\n\n        if (data.estradiolLevel) {\n            form.estradiolLevel = data.estradiolLevel;\n        }\n\n        if (data.progesterOneLevel) {\n            form.progesterOneLevel = data.progesterOneLevel;\n        }\n\n        if (data.totalDoseLH) {\n            form.totalDoseLH = data.totalDoseLH;\n        }\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const medicationAdministraionPriorToCosOptions = computed(\n        () => store.state.options.medicationAdministraionPriorToCos\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        medicationAdministraionPriorToCosOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nexport function useBornMarkAsComplete() {\n    const store = useStore();\n    const toast = useToast();\n\n    const markAsComplete = async (source) => {\n        const payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            source\n        };\n\n        try {\n            const { data } = await $axios.post(\n                \"born/mark-as-complete\",\n                payload\n            );\n\n            toast.add({\n                severity: \"success\",\n                summary: \"Sucess\",\n                detail: \"Mark as completed\",\n                life: 3000\n            });\n        } catch (err) {\n            toast.add({\n                severity: \"warn\",\n                summary: \"Error\",\n                detail: \"An Error occured\",\n                life: 3000\n            });\n        }\n    };\n\n    return {\n        markAsComplete\n    };\n}\n\nconst embryoTransferValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cancel == false ||\n            cycle.value.cyccleType == \"FET\" ||\n            cycle.value.cyccleType == \"FOIVF\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\nconst isEbryoTrasferNo = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isEbryoTrasferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preparationUterineLiningValidator = (cycleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst transferDateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst dateETAdjustedValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst assistedZonaHatchingValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst embryosTransferredValidator = (\n    embryoTransfer,\n    utilizableEmbryos,\n    embryosCryopreserved,\n    utilizableAfterThaw\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        let _utilizableEmbryos =\n            utilizableEmbryos.value != null\n                ? parseInt(utilizableEmbryos.value)\n                : 0;\n        let _utilizableAfterThaw =\n            utilizableAfterThaw.value != null\n                ? parseInt(utilizableAfterThaw.value)\n                : 0;\n        let _embryosCryopreserved =\n            embryosCryopreserved.value != null\n                ? parseInt(embryosCryopreserved.value)\n                : 0;\n\n        let calc =\n            _utilizableEmbryos + _utilizableAfterThaw - _embryosCryopreserved;\n\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value) && parseInt(value) <= calc;\n        }\n        return true;\n    });\n\nconst SOURCE_TRANSFERRED_EMBRYOS_NOT_FET = [\n    \"TES001\",\n    \"TES002\",\n    \"TES010\",\n    \"TES011\",\n    \"TES004\"\n];\n\nconst sourceTransferredEmbryosValidationMessage = (cycleType) => {\n    if (cycleType == \"FET\") {\n        return `Value requied & value cannot be from one from those -\n            1-Fresh embryos from own oocytes-partner sperm\n            2-Fresh embryos from own oocytes-donor sperm\n            3-Fresh embryos from partner oocytes-donor sperm\n            4-Fresh embryos from donor oocytes-own sperm\n            5-Fresh embryos from donor oocytes-partner sperm\n        `;\n    }\n    return \"Valur required\";\n};\n\nconst sourceTransferredEmbryosValidator = (embryoTransfer, cyccleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            let intersection = value.filter((item) =>\n                SOURCE_TRANSFERRED_EMBRYOS_NOT_FET.includes(item)\n            );\n            if (intersection.length > 0) return false;\n        }\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst transferInseminationMethodValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\n        const intersection = freshSourceTransferredEmbryosIds.filter((elem) =>\n            [...sourceTransferredEmbryos.value].includes(elem)\n        );\n\n        if (\n            noOfEmbryosTransferred.value == 1 &&\n            intersection.length != 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingValidator = (\n    embryoTransfer,\n    cycleDate,\n    pgtAPlanned\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n\n        if (pgtAPlanned.value == \"Y\") {\n            return value == \"yes\";\n        }\n        return true;\n    });\n\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst charTransferredEmbryoValidator = (\n    noOfEmbryosTransferred,\n    preImplementationGeneticSergery,\n    cycleDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            preImplementationGeneticSergery.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        // if (\n        //     preImplementationGeneticSergery.value == \"yes\" &&\n        //     parseInt(noOfEmbryosTransferred.value) == 1 &&\n        //     new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        // ) {\n        //     return helpers.req(value);\n        // }\n        return true;\n    });\n\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (preImplGeneticTesting.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst gestationalCarrierSurrogateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // && new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n\n        let intersections = [];\n        intersections = sourceTransferredEmbryos.value.filter((item) => {\n            return TRANSFERRED_EMBRYO_SOURCE_FROZENS.includes(item);\n        });\n\n        if (intersections.length > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst endometrialThicknessValidtor = (cyccleType) =>\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: [],\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null,\n        endometrialReceptivityTest: null\n    });\n\n    const rules = {\n        embryoTransfer: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoTransferValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        reasonsNoET: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferNo(computed(() => form.embryoTransfer))\n            )\n        },\n        preparationUterineLining: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                preparationUterineLiningValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        transferDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            ),\n            validDate\n        },\n        dateETAdjusted: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        assistedZonaHatching: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        embryosTransferred: {\n            validator: helpers.withMessage(\n                \"Value Required and value cannot be greated than (utilizableEmbryos + utilizableAfterThaw - embryosCryopreserved) \",\n                embryosTransferredValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(\n                        () => store.state.born.dependentOn.utilizableEmbryos\n                    ),\n                    computed(\n                        () => store.state.born.dependentOn.embryosCryopreserved\n                    ),\n                    computed(\n                        () => store.state.born.dependentOn.utilizableAfterThaw\n                    )\n                )\n            )\n        },\n        sourceTransferredEmbryos: {\n            validator: helpers.withMessage(\n                sourceTransferredEmbryosValidationMessage(\n                    store.state.artCycle.selectedCycle.cycleType\n                ),\n                sourceTransferredEmbryosValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        transferInseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                transferInseminationMethodValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        preImplGeneticTesting: {\n            validator: helpers.withMessage(\n                \"Value Required & must be YES if PGT A Planned is YES\",\n                preImplGeneticTestingValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(\n                        () => store.state.artCycle.selectedCycle.cycleDate\n                    ),\n                    computed(() => store.state.born.dependentOn.pgtAPlanned)\n                )\n            )\n        },\n        charTransferredEmbryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                charTransferredEmbryoValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        sitePGTembryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                sitePGTembryoValidator(\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        gestationalCarrierSurrogate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        numberThaws: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                numberThawsValidator(\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        endometrialThickness: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                endometrialThicknessValidtor(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getDefaultEndometrialThickness = () => {\n        let items = store.state.cycleMonitoring.lines.filter(\n            (item) => item.etUs != null\n        );\n\n        if (items.length == 0) return null;\n\n        let thickness = items[items.length - 1].etUs\n            ? parseFloat(items[items.length - 1].etUs)\n            : null;\n\n        return thickness;\n    };\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness\n            ? data.endometrialThickness\n            : getDefaultEndometrialThickness();\n        form.transferDate = data.transferDate\n            ? new Date(data.transferDate + \" 00:00:00\")\n            : null;\n        form.dateETAdjusted = data.dateETAdjusted ? data.dateETAdjusted : \"no\";\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos\n            ? data.sourceTransferredEmbryos\n            : [];\n        form.transferInseminationMethod = data.transferInseminationMethod;\n\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate\n            ? data.gestationalCarrierSurrogate\n            : \"no\";\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n        form.endometrialReceptivityTest = data.endometrialReceptivityTest\n            ? data.endometrialReceptivityTest\n            : \"N\";\n\n        if (store.state.born.dependentOn.pgtAPlanned == \"Y\") {\n            form.preImplGeneticTesting = \"yes\";\n        } else {\n            form.preImplGeneticTesting = data.preImplGeneticTesting\n                ? data.preImplGeneticTesting\n                : \"no\";\n        }\n\n        if (\n            data.embryoTransfer == null &&\n            store.state.artCycle.selectedCycle.cycleType == \"FET\"\n        ) {\n            form.embryoTransfer = \"yes\";\n        }\n\n        if (data.preparationUterineLining == null) {\n            form.preparationUterineLining = PREPARATION_UTERINE_LINING_DEFAULT;\n        }\n\n        if (data.assistedZonaHatching == null) {\n            form.assistedZonaHatching = \"Y\";\n        }\n\n        if (store.state.born.fertilizationEmbryoThawDate) {\n            form.transferDate = new Date(\n                store.state.born.fertilizationEmbryoThawDate\n            );\n        }\n    };\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions,\n        getDefaultEndometrialThickness\n    };\n}\n\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nconst oocytesNotUsedValidator = (\n    oocytesRetrieved,\n    inseminatedInjected,\n    oocytesCryopreserved,\n    cycleType\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return true;\n        } else {\n            return (\n                helpers.req(value) &&\n                parseInt(value) ==\n                    oocytesRetrieved.value -\n                        inseminatedInjected.value -\n                        oocytesCryopreserved.value\n            );\n        }\n    });\n\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (oocytesNotUsed.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n        if (noOfOocytesRetrieved.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOfOocytesRetrieved.value\n            );\n        }\n        return true;\n    });\n\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\n\nconst embryosCryopreservedValidator = (\n    noOocytesInseminatedInjected,\n    embryosThawed\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n\n        return value <= embryosThawed.value;\n    });\n\nconst reasonEmbryoCryopreservationValidator = (\n    embryosCryopreserved,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryosCryopreserved.value > 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst embryoFreezeDate1Validator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"embryosCryopreserved\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: [],\n        oocytesNotUsed: null,\n        reasonsForNoUse: [],\n        embryoStageFreezing: [],\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                inseminationMethodValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    )\n                )\n            )\n        },\n        oocytesNotUsed: {\n            validator: helpers.withMessage(\n                \"Value must be equal to oocytesRetrieved - inseminatedInjected - oocytesCryopreserved\",\n                oocytesNotUsedValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    ),\n                    computed(() => form.inseminatedInjected),\n                    computed(\n                        () => store.state.born.dependentOn.oocytesCryopreserved\n                    ),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        reasonsForNoUse: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonsForNoUseValidator(computed(() => form.oocytesNotUsed))\n            )\n        },\n        embryoStageFreezing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoStageFreezingValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        inseminatedInjected: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        normalFertilization2PN: {\n            validator: helpers.withMessage(\n                \"Value Required and must be less or equal to oocytes inseminated/injected\",\n                normalFertilization2PNValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        ofMII: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                ofMIIValidator(computed(() => form.inseminatedInjected))\n            )\n        },\n        utilizableEmbryos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                utilizableEmbryosValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        embryosCryopreserved: {\n            validator: helpers.withMessage(\n                \"Value Required & value must be less than # embryos Thawed\",\n                embryosCryopreservedValidator(\n                    computed(() => form.inseminatedInjected),\n                    computed(() => store.state.born.dependentOn.embryosThawed)\n                )\n            )\n        },\n        reasonEmbryoCryopreservation: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonEmbryoCryopreservationValidator(\n                    computed(() => form.embryosCryopreserved),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        embryoFreshCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreshCryoMethodValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        embryoFreezeDate1: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreezeDate1Validator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            ),\n            validDate\n        },\n        embryoFreezeDate2: { validDate },\n        embryoFreezeDate3: { validDate },\n        embryoFreezeDate4: { validDate }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        let payload = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            embryoFreezeDate1: form.embryoFreezeDate1\n                ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate2: form.embryoFreezeDate2\n                ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate3: form.embryoFreezeDate3\n                ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate4: form.embryoFreezeDate4\n                ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                : null\n        };\n\n        // return;\n\n        store.dispatch(\"born/updateFreshEmbryo\", payload).then(() => {\n            toast.add({\n                severity: \"success\",\n                summary: \"\",\n                detail: \"Save Successful\",\n                life: 3000\n            });\n        });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        emitter.emit(\"fresh-embryo:on-save\");\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\n            ? new Date(data.embryoFreezeDate1 + TIME_0)\n            : null;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\n            ? new Date(data.embryoFreezeDate2 + TIME_0)\n            : null;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\n            ? new Date(data.embryoFreezeDate3 + TIME_0)\n            : null;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\n            ? new Date(data.embryoFreezeDate4 + TIME_0)\n            : null;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const fillFormDefault = (data) => {\n        if (form.inseminationMethod.length == 0)\n            form.inseminationMethod = data.inseminationMethod;\n        if (form.oocytesNotUsed == null)\n            form.oocytesNotUsed = data.oocytesNotUsed;\n        if (form.reasonsForNoUse.length == 0)\n            form.reasonsForNoUse = data.reasonsForNoUse;\n        if (form.embryoStageFreezing.length == 0)\n            form.embryoStageFreezing = data.embryoStageFreezing;\n        if (form.inseminatedInjected == null)\n            form.inseminatedInjected = data.inseminatedInjected;\n        if (form.embryoFreezeID1 == null)\n            form.embryoFreezeID1 = data.embryoFreezeID1;\n        if (form.embryoFreezeID2 == null)\n            form.embryoFreezeID2 = data.embryoFreezeID2;\n        if (form.embryoFreezeID3 == null)\n            form.embryoFreezeID3 = data.embryoFreezeID3;\n        if (form.embryoFreezeID4 == null)\n            form.embryoFreezeID4 = data.embryoFreezeID4;\n        if (form.normalFertilization2PN == null)\n            form.normalFertilization2PN = data.normalFertilization2PN;\n        if (form.embryoFreezeDate1 == null)\n            form.embryoFreezeDate1 = data.embryoFreezeDate1\n                ? new Date(data.embryoFreezeDate1 + TIME_0)\n                : null;\n        if (form.embryoFreezeDate2 == null)\n            form.embryoFreezeDate2 = data.embryoFreezeDate2\n                ? new Date(data.embryoFreezeDate2 + TIME_0)\n                : null;\n        if (form.embryoFreezeDate3 == null)\n            form.embryoFreezeDate3 = data.embryoFreezeDate3\n                ? new Date(data.embryoFreezeDate3 + TIME_0)\n                : null;\n        if (form.embryoFreezeDate4 == null)\n            form.embryoFreezeDate4 = data.embryoFreezeDate4\n                ? new Date(data.embryoFreezeDate4 + TIME_0)\n                : null;\n        if (form.ofMII == null) form.ofMII = data.ofMII;\n        if (form.utilizableEmbryos == null)\n            form.utilizableEmbryos = data.utilizableEmbryos;\n        if (form.embryosCryopreserved == null)\n            form.embryosCryopreserved = data.embryosCryopreserved;\n        if (form.reasonEmbryoCryopreservation == null)\n            form.reasonEmbryoCryopreservation =\n                data.reasonEmbryoCryopreservation;\n        if (form.embryoFreshCryoMethod == null)\n            form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const getDeafultDataByPrimaryCycle = async ({ patientId, cycleId }) => {\n        const resp = await getFreshEbmryo(patientId, cycleId);\n        if (resp.status == \"success\") {\n            fillFormDefault(resp.freshEmbryos);\n        }\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    const cycleIds = computed(() => store.state.artCycle.cyclesSummary);\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        cycleIds,\n        getDeafultDataByPrimaryCycle\n    };\n}\n\nconst isFETCycleValidator = (cyccleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoStageThawing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoFrozenCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoThawDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            ),\n            validDate\n        },\n        donatedEmbryoFromAnotherCouple: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null,\n                embryoThawDate: form.embryoThawDate\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        let embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate + TIME_0)\n            : null;\n\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate + TIME_0)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = embryoThawDate;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n\n        if (data.embryoStageThawing.length == 0) {\n            form.embryoStageThawing = [4];\n        }\n\n        if (\n            store.state.artCycle.selectedCycle.cycleType == \"FET\" &&\n            data.embryoFrozenCryoMethod == null\n        ) {\n            form.embryoFrozenCryoMethod = \"ECRY002\";\n        }\n\n        store.commit(\"born/SET_FERTILIZATION_EMBRYO_THAW_DATE\", embryoThawDate);\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoFrozenCryoMethodOptions = computed(\n        () => store.state.options.embryoFrozenCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoFrozenCryoMethodOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\n        if (parseInt(noOfBabiesBorn.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null,\n        liveBornFetus: null,\n        sexFetus: null\n    });\n\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\n    const medicationForCOS = ref();\n\n    const rules = {\n        congenitalAnomalies: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                congenitalAnomaliesValidator(\n                    computed(() => store.state.born.dependentOn.noOfBabiesBorn)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\n            ? new Date(data.estimated_date_of_birth)\n            : null;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n        form.liveBornFetus = data.live_born_fetus; // todo after service\n        form.sexFetus = data.sex_fetus; // todo after service\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome,\n            preExistingMentalHealthCondition:\n                form.preExistingMentalHealthCondition,\n            sex_fetus: form.sexFetus,\n            live_born_fetus: form.liveBornFetus\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra,\n        medicationForCOS,\n        medicationForCOSContainFSHOrLhOrFshPlusLH\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsOfPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = computed(\n        () => store.state.options.typeOfLabour\n    );\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = computed(\n        () => store.state.options.typeOfDelivery\n    );\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = computed(\n        () => store.state.options.newbornComplications\n    );\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = computed(\n        () => store.state.options.maternalOutcome\n    );\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n","const { helpers } = require(\"@vuelidate/validators\");\n\nconst DATE_REGEX = /^((0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|20)?[0-9]{2})*$/;\n\nexport const validDate = helpers.withMessage(\n    \"Date format is not valid\",\n    (value) => {\n        if (value == null) return true;\n        if (value instanceof Date) return true;\n        return DATE_REGEX.match(value);\n    }\n);\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n"],"sourceRoot":""}