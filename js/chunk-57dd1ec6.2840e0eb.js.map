{"version":3,"sources":["webpack:///./src/views/message-inbox.vue","webpack:///./src/views/message-inbox.vue?0841","webpack:///./src/service/patient-message-log.js"],"names":["class","for","selectAll","binary","selectAllChangeHandler","label","archiveMessageHandler","legend","value","messages","responsiveLayout","showGridlines","loading","dataKey","selection","selectedMessages","selectionMode","headerStyle","header","field","style","body","data","unRead","openReplyDialog","visible","replyDialog","closable","footer","closeReplyDialog","send","isMessageThred","relatedMessages","disabled","rows","showMessageThread","replyTo","form","subject","message","setup","store","sendTo","sentBy","state","user","providerNo","senderType","parent","mId","sendBy","pid","id","relatedMsg","newVal","websocket","sendLoading","newMessage","JSON","stringify","sender_id","receiver_id","artCycle","patient","terminal","getMessages","messageRecords","emit","toast","setupWebsocket","onmessage","event","parse","onerror","add","severity","summary","detail","life","ids","map","item","status","ok","__exports__","render","registerPatient","payload","$axios","post","getPatientInformation","get","patientDetails","searchAllPatient","term","params","getPatient","getAllMessages","getPatientMessage","name","patientId","composeMessage","composeMessageV2","getRelatedMessges","parentMsgId","archiveMesage","archiveList","STATSUS","error"],"mappings":"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","file":"js/chunk-57dd1ec6.2840e0eb.js","sourcesContent":["<template>\n    <div class=\"p-d-flex p-jc-end\">\n        <div class=\"p-field-checkbox p-mr-2 p-mt-2\">\n            <p-checkbox\n                v-model=\"selectAll\"\n                :binary=\"true\"\n                @change=\"selectAllChangeHandler\"\n            />\n            <label for=\"\">Select All</label>\n        </div>\n        <p-button\n            label=\"Archive\"\n            class=\"p-mr-2\"\n            @click=\"archiveMessageHandler\"\n        />\n        <p-button label=\"Appointment Stat\" />\n    </div>\n\n    <p-fieldset legend=\"All Messages\">\n        <p-data-table\n            :value=\"messages\"\n            responsiveLayout=\"scroll\"\n            showGridlines\n            class=\"p-datatable-sm p-mb-1\"\n            :loading=\"loading\"\n            dataKey=\"id\"\n            v-model:selection=\"selectedMessages\"\n        >\n            <p-column\n                selectionMode=\"multiple\"\n                headerStyle=\"width: 3em\"\n            ></p-column>\n            <p-column header=\"Date\" field=\"sentdate\" style=\"width: 150px\" />\n            <p-column header=\"Subject\" field=\"subject\" />\n            <p-column header=\"From\" field=\"sendBy\" />\n            <p-column header=\"Message\" field=\"message\" />\n            <p-column header=\"#\">\n                <template #body=\"{data}\">\n                    <p-badge v-if=\"data.unRead == 1\" />\n                </template>\n            </p-column>\n            <p-column header=\"Action\" field=\"action\" style=\"width: 150px\">\n                <template #body=\"{data}\">\n                    <p-button\n                        label=\"Reply\"\n                        class=\"p-button-sm p-mr-1\"\n                        @click=\"openReplyDialog(data)\"\n                    />\n                    <p-button label=\"ENG\" class=\"p-button-sm\" />\n                </template>\n            </p-column>\n        </p-data-table>\n    </p-fieldset>\n\n    <p-dialog\n        v-model:visible=\"replyDialog\"\n        :closable=\"false\"\n        style=\"width: 600px\"\n    >\n        <p-fieldset legend=\"Previous Conversation\">\n            <p-textarea\n                v-model=\"relatedMessages\"\n                disabled\n                rows=\"10\"\n                class=\"p-mt-1\"\n                style=\"width: 100%\"\n                v-if=\"isMessageThred\"\n            />\n            <p-button\n                label=\"Show Message Thread\"\n                v-else\n                @click=\"showMessageThread\"\n            />\n        </p-fieldset>\n        <p-fieldset :legend=\"replyTo\" class=\"p-mt-2\">\n            <div class=\"p-field\">\n                <label>Subject - {{ form.subject }}</label>\n                <p-textarea\n                    v-model=\"form.message\"\n                    rows=\"4\"\n                    class=\"p-mt-1\"\n                    style=\"width: 100%\"\n                />\n            </div>\n        </p-fieldset>\n\n        <template #footer>\n            <p-button label=\"Cancel\" @click=\"closeReplyDialog\" />\n            <p-button label=\"Send\" @click=\"send\" :loading=\"loading\" />\n        </template>\n    </p-dialog>\n</template>\n\n<script>\nimport { inject, onMounted, reactive, ref, watch } from \"vue\";\nimport {\n    getAllMessages,\n    composeMessageV2,\n    getRelatedMessges,\n    archiveMesage\n} from \"@/service/patient-message-log\";\nimport { useStore } from \"vuex\";\nimport { emitter } from \"@/event-bus\";\nimport { useToast } from \"primevue/usetoast\";\nimport { STATSUS } from \"@/constants\";\nexport default {\n    setup() {\n        const store = useStore();\n        const messages = ref([]);\n        const selectedMessages = ref([]);\n        const loading = ref(false);\n        const replyDialog = ref(false);\n        const selectAll = ref(false);\n\n        const form = reactive({\n            subject: null,\n            message: null,\n            sendTo: null,\n            sentBy: store.state.user.providerNo,\n            senderType: 1,\n            parent: null,\n            mId: null\n        });\n\n        const replyTo = ref();\n\n        const openReplyDialog = (data) => {\n            replyTo.value = `Reply To ${data.sendBy}`;\n\n            form.subject = data.subject;\n            form.sendTo = data.pid;\n            form.parent = data.parent;\n            form.mId = data.id;\n\n            replyDialog.value = true;\n            relatedMessages.value = null;\n            isMessageThred.value = false;\n        };\n\n        const isMessageThred = ref(false);\n\n        const relatedMessages = ref();\n        const showMessageThread = async () => {\n            isMessageThred.value = true;\n            const { relatedMsg } = await getRelatedMessges(form.parent);\n            relatedMessages.value = relatedMsg;\n        };\n\n        watch(replyDialog, (newVal) => {\n            showMessageThread();\n        });\n\n        const websocket = inject(\"websocket\");\n        const sendLoading = ref(false);\n        const send = async () => {\n            sendLoading.value = true;\n            const { newMessage } = await composeMessageV2({\n                ...form\n            });\n\n            websocket.send(\n                JSON.stringify({\n                    sender_id: store.state.user.id,\n                    receiver_id: store.state.artCycle.patient.id,\n                    terminal: \"cycle\"\n                })\n            );\n\n            form.subject = null;\n            form.message = null;\n            replyDialog.value = false;\n            sendLoading.value = false;\n            getMessages();\n        };\n\n        const getMessages = async () => {\n            loading.value = true;\n            try {\n                const { messageRecords } = await getAllMessages();\n                messages.value = messageRecords;\n                emitter.emit(\"message-inbox:get-all-messgae\");\n            } catch (err) {\n                messages.value = [];\n            } finally {\n                loading.value = false;\n            }\n        };\n\n        const toast = useToast();\n\n        const setupWebsocket = () => {\n            const websocket = inject(\"websocket\");\n            websocket.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                if (typeof data.data == \"string\") {\n                    const message = JSON.parse(data.data);\n                    if (message.terminal == \"nlp\") {\n                        getMessages();\n                    }\n                }\n            };\n\n            websocket.onerror = () => {\n                toast.add({\n                    severity: \"warn\",\n                    summary: \"Chat Server Down\",\n                    detail: \"Instant chat is off at the moment\",\n                    life: 3000\n                });\n            };\n        };\n\n        const archiveMessageHandler = async () => {\n            loading.value = true;\n            let ids = selectedMessages.value.map((item) => item.id);\n            let { status } = await archiveMesage(ids);\n            if (status == STATSUS.ok) {\n                getMessages();\n            }\n        };\n\n        onMounted(() => {\n            getMessages();\n            setupWebsocket();\n            emitter.emit(\"message-nofication:has-seen\");\n        });\n\n        return {\n            messages,\n            selectedMessages,\n            loading,\n            selectAll,\n            replyDialog,\n            openReplyDialog,\n            replyTo,\n            isMessageThred,\n            relatedMessages,\n            showMessageThread,\n            form,\n            send,\n            sendLoading,\n            archiveMessageHandler,\n            closeReplyDialog: () => {\n                replyDialog.value = false;\n            },\n            selectAllChangeHandler: (event) => {\n                if (selectAll.value) {\n                    selectedMessages.value = [...messages.value];\n                } else {\n                    selectedMessages.value = [];\n                }\n            }\n        };\n    }\n};\n</script>\n","import { render } from \"./message-inbox.vue?vue&type=template&id=14e8da98\"\nimport script from \"./message-inbox.vue?vue&type=script&lang=js\"\nexport * from \"./message-inbox.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/saif/Projects/vue-cycle-ui/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { STATSUS } from \"@/constants\";\nimport axios from \"axios\";\nimport { $axios } from \"./app-http\";\n\nexport async function registerPatient(payload) {\n    const { data } = await $axios.post(\n        \"patient-msg-log/register-patient\",\n        payload\n    );\n    return data;\n}\n\nexport async function getIsPatientRegistered(id) {\n    const { data } = await $axios.get(\n        `patient-msg-log/is-patient-registered/${id}`\n    );\n    return data;\n}\n\nexport async function getPatientInformation(id) {\n    const {\n        data: { patientDetails }\n    } = await $axios.get(`patient-msg-log/patient-data/${id}`);\n    return patientDetails;\n}\n\nexport async function searchAllPatient(term) {\n    const { data } = await $axios.get(\"demographics/search-all\", {\n        params: {\n            term\n        }\n    });\n    return data;\n}\n\nexport async function getPatient(id) {\n    const { data } = await $axios.get(`demographics/${id}`);\n    return data;\n}\n\nexport async function getAllMessages() {\n    const { data } = await $axios.get(\"patient-msg-log/all-messages\");\n    return data;\n}\n\nexport async function getPatientMessage(id, name) {\n    const { data } = await $axios.get(\"patient-msg-log/patient-messages\", {\n        params: {\n            patientId: id,\n            name: name\n        }\n    });\n    return data;\n}\n\nexport async function composeMessage(payload) {\n    const { data } = await $axios.post(\"patient-msg-log/compose-sms\", payload);\n    return data;\n}\n\nexport async function composeMessageV2(payload) {\n    const { data } = await $axios.post(\n        \"patient-msg-log/compose-sms-v2\",\n        payload\n    );\n    return data;\n}\n\nexport async function getRelatedMessges(id) {\n    const { data } = await $axios.get(\"patient-msg-log/related-msg\", {\n        params: { parentMsgId: id }\n    });\n    return data;\n}\n\nexport async function archiveMesage(archiveList) {\n    try {\n        const { data } = await $axios.post(\n            \"patient-msg-log/archive-message-for-staff\",\n            {\n                archiveList\n            }\n        );\n        return {\n            status: STATSUS.ok\n        };\n    } catch (err) {\n        return {\n            status: STATSUS.error\n        };\n    }\n}\n"],"sourceRoot":""}