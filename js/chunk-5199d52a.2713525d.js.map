{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","isComplicationNone","param","helpers","withParams","complications","req","typeOfPregnancyValidator","embryoTransfer","console","log","fetalSacsUSValidator","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","requireWhen","requiredWhen","dependentOn","validator","_save","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","spermOriginValidator","oocytesInseminatedInjected","spermSourceValidator","isIVForFETCycle","isOocyteRetrivedGreaterThan0","retrievedOrThawed","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","spermOrigin","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","spermSource","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","cycleType","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","mustBe0IfPriorPregnancies0","priorPregnancies","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","cycleDate","useObstetricalHistoryFormInit","priorBirths","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","requiredIfMedicationForCOSContains","medicationForCOS","includes","totalDoseFSHValidator","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","otherAdjuvantMediDescription","triggerMedication","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","minValue","maxValue","requiredIfContains","patient","age","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","reasonCancelledOptions","adjuvantMedicationOptions","embryoTransferValidator","cycle","cancel","cyccleType","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","frozenEmbryosIds","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","RADIO_NO","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","length","embryoStageFreezingValidator","embryosCryopreserved","inseminatedInjectedValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","utilizableEmbryos","reasonEmbryoCryopreservation","embryoFreshCryoMethod","oocytesRetrieved","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryosThawed","utilizableAfterThaw","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","isFETCycle","embryoStageThawingOptions","embryoTransferOptions","requiredIfCycleGreaterthan22Jan","requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes","totalDoseRekovelleMcgValidator","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","mediAdminisPriorCos","otherMediPriorCosDesc","totalDoseRekovelleMcg","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","patientId","id","cycleId","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","other_medi_prior_cos_desc","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","payload","useBornFieldOptions","complicationsOfPregnancyOptions","complicationsPregnancy","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS"],"mappings":"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","file":"js/chunk-5199d52a.2713525d.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission\n    };\n}\n","import { DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { CYCLE_START_DATE_JAN_19, RADIO_NO } from \"@/constants\";\n\nconst isComplicationNone = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.complications == \"None\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst typeOfPregnancyValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\n        console.log(embryoTransfer.value);\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst fetalSacsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == null ||\n            param.typeOfPregnancy == \"Biochemical\" ||\n            param.typeOfPregnancy == \"Not Pregnant\" ||\n            param.typeOfPregnancy == \"Unknown\"\n        ) {\n            return true;\n        }\n\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\"\n        ) {\n            return parseInt(value) > 0;\n        }\n\n        if (param.typeOfPregnancy == \"Ectopic\") {\n            return parseInt(value) >= 0;\n        }\n\n        return true;\n    });\n\nconst fetalheartsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\n                typeOfPregnancy.value == \"Heterotopic\") &&\n            parseInt(fetalheartsUS.value) >= 2\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const confirm = useConfirm();\n\n    const form = reactive({\n        complications: null,\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\n\n    const fillForm = (data) => {\n        form.complications = data.complications;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.treatmentOutcome = data.treatmentOutcome;\n        form.typeOfPregnancy = data.typeOfPregnancy;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n    };\n\n    const rule = {\n        spermTooLowCount: { requireWhen: isComplicationNone(form) },\n        typeOfPregnancy: {\n            requiredWhen: typeOfPregnancyValidator(\n                computed(() => store.state.born.dependentOn.embryoTransfer)\n            )\n        },\n        fetalSacsUS: {\n            validator: fetalSacsUSValidator(form)\n        },\n        fetalheartsUS: {\n            validator: fetalheartsUSValidator(form)\n        },\n        chorionicity: {\n            validator: chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n        },\n        electiveFetalReduction: {\n            validator: chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n        }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fetalSacsUSWarning = ref();\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        confirm,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nconst newbornDateBirthValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        console.log(form.pregnancyBirthOutcome);\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst pregnancyLossDateValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050890\" ||\n            form.pregnancyBirthOutcome == \"1050900\" ||\n            form.pregnancyBirthOutcome == \"1050910\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst babiesbornValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: { validator: pregnancyLossDateValidator(form) },\n        newbornDateBirth: {\n            validator: newbornDateBirthValidator(form)\n        },\n        babiesborn: {\n            validator: babiesbornValidator(form)\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: form.newbornDateBirth\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\n                : null,\n            pregnancyLossDate: form.pregnancyLossDate\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\n                : null\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermOriginValidator = (oocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermSourceValidator = (oocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        return true; // temp for now\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // return true; // temp for now\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            requiredWhen: isIVForFETCycle(\n                store.state.artCycle.selectedCycle.cycleType\n            )\n        },\n        oocyteCryoPreserved: {\n            requiredWhen: isOocyteRetrivedGreaterThan0(form)\n        },\n        oocyteCryoMethod: {\n            requiredWhen: isNumberOocytesCryoedIsGreaterThan0(form)\n        },\n        spermOrigin: {\n            validator: spermOriginValidator(\n                computed(\n                    () =>\n                        store.state.born.dependentOn.oocytesInseminatedInjected\n                )\n            )\n        },\n        spermSource: {\n            validator: spermSourceValidator(\n                computed(\n                    () =>\n                        store.state.born.dependentOn.oocytesInseminatedInjected\n                )\n            )\n        },\n        oocyteFreezeDate: {\n            requiredWhen: isNumberOocytesCryoedIsGreaterThan0(form)\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: form.oocyteCollectionDate\n                ? format(\n                      new Date(form.oocyteCollectionDate),\n                      DATE_FORMAT_STRING\n                  )\n                : null,\n            oocyteThawDate: form.oocyteThawDate\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\n                : null,\n            oocyteFreezeDate: form.oocyteFreezeDate\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\n                : null,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate;\n        form.oocyteThawDate = data.oocyteThawDate;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.spermOrigin = data.spermOrigin;\n        form.ageSpermProvider = data.ageSpermProvider;\n        form.spermDonorID = data.spermDonorID;\n        form.spermDonorStatus = data.spermDonorStatus;\n        form.spermMotility = data.spermMotility;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.spermDonorBank = data.spermDonorBank;\n        form.spermSource = data.spermSource;\n        form.semenVolume = data.semenVolume;\n        form.spermCount = data.spermCount;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.reasonsForTreatmentCycle == 1) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst provincialFundingValidator = (cycleDate) =>\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: null,\n        priorETsOwnOocytes: null,\n        priorETsDonorOocytes: null,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: null,\n        reasonsForMaleFactor: null\n    });\n\n    const rules = {\n        priorBirths: {\n            mustBe0IfPriorPregnancies0: mustBe0IfPriorPregnancies0(form)\n        },\n        typeOfFunding: {\n            requiredIfprovincialFundingIsYes: requiredIfprovincialFundingIsYes(\n                form\n            )\n        },\n        reasonsForMaleFactor: {\n            requiredIfReasonsForTreatmentCycleIsMaleFactor: requiredIfReasonsForTreatmentCycleIsMaleFactor(\n                form\n            )\n        },\n        provincialFundingForThisCycle: {\n            provincialFundingValidator: provincialFundingValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle;\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor;\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseFSHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseLHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return (\n                helpers.req(value) &&\n                parseFloat(value) >= 200 &&\n                parseFloat(value) <= 400\n            );\n        }\n\n        return true;\n    });\n\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value == 4) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value == 4) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: null,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: null,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: null,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: null,\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: { required },\n        hightOfOocyteHight: { minValue: minValue(90), maxValue: maxValue(240) },\n        weightOfOocyte: { minValue: minValue(25), maxValue: maxValue(227) },\n        noOfDaysGonadotropins: {\n            requiredIfContains: requiredIfMedicationForCOSContains(form)\n        },\n        totalDoseFSH: {\n            validator: totalDoseFSHValidator(\n                computed(\n                    () => store.state.born.dependentOn.reasonForTreatmentCycle\n                )\n            )\n        },\n        totalDoseLH: {\n            validator: totalDoseLHValidator(\n                computed(() => form.medicationForCOS)\n            )\n        },\n        afcOocyte: {\n            validator: afcOocyteValidtor(\n                computed(\n                    () => store.state.born.dependentOn.reasonForTreatmentCycle\n                )\n            )\n        },\n        amhLevelOocyte: {\n            validator: amhLevelOocyteValidtor(\n                computed(\n                    () => store.state.born.dependentOn.reasonForTreatmentCycle\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication = data.adjuvantMedication;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.totalDoseLH = data.totalDoseLH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.estradiolLevel = data.estradiolLevel;\n        form.progesterOneLevel = data.progesterOneLevel;\n        form.endometrialThicknessFreshCycle =\n            data.endometrialThicknessFreshCycle;\n        form.cycleCancelledBeforeRetrieval = data.cycleCancelledBeforeRetrieval;\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst embryoTransferValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cancel == false ||\n            cycle.value.cyccleType == \"FET\" ||\n            cycle.value.cyccleType == \"FOIVF\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\nconst isEbryoTrasferNo = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isEbryoTrasferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preparationUterineLiningValidator = (cycleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst transferDateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst dateETAdjustedValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst assistedZonaHatchingValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst embryosTransferredValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst sourceTransferredEmbryosValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst transferInseminationMethodValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\n        if (\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            freshSourceTransferredEmbryosIds.includes(\n                sourceTransferredEmbryos.value\n            ) &&\n            new Date(cycleStartDate) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst charTransferredEmbryoValidator = (\n    noOfEmbryosTransferred,\n    preImplementationGeneticSergery,\n    cycleDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            preImplementationGeneticSergery.value == \"yes\" &&\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (preImplGeneticTesting.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst gestationalCarrierSurrogateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const frozenEmbryosIds = [7, 8, 9, 10, 11, 12, 13];\n\n        if (\n            frozenEmbryosIds.includes(sourceTransferredEmbryos.value) &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst endometrialThicknessValidtor = (cyccleType) =>\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: null,\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null\n    });\n\n    const rules = {\n        embryoTransfer: {\n            validator: embryoTransferValidator(\n                computed(() => store.state.artCycle.selectedCycle)\n            )\n        },\n        reasonsNoET: {\n            validator: isEbryoTrasferNo(computed(() => form.embryoTransfer))\n        },\n        preparationUterineLining: {\n            validator: preparationUterineLiningValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        transferDate: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        dateETAdjusted: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        assistedZonaHatching: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        embryosTransferred: { validator: embryosTransferredValidator() },\n        sourceTransferredEmbryos: {\n            validator: sourceTransferredEmbryosValidator(\n                computed(() => form.embryoTransfer)\n            )\n        },\n        transferInseminationMethod: {\n            validator: transferInseminationMethodValidator(\n                computed(() => form.embryosTransferred),\n                computed(() => form.sourceTransferredEmbryos),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        preImplGeneticTesting: {\n            validator: preImplGeneticTestingValidator(\n                computed(() => form.embryoTransfer),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        charTransferredEmbryo: {\n            validator: charTransferredEmbryoValidator(\n                computed(() => form.embryosTransferred),\n                computed(() => form.preImplGeneticTesting),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        sitePGTembryo: {\n            validator: sitePGTembryoValidator(\n                computed(() => form.preImplGeneticTesting),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        gestationalCarrierSurrogate: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        numberThaws: {\n            validator: numberThawsValidator(\n                computed(() => form.sourceTransferredEmbryos),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        endometrialThickness: {\n            validator: endometrialThicknessValidtor(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer\n            ? data.embryoTransfer\n            : RADIO_NO;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness;\n        form.transferDate = data.transferDate;\n        form.dateETAdjusted = data.dateETAdjusted\n            ? data.dateETAdjusted\n            : RADIO_NO;\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET\n            ? data.ultrasoundGuidedET\n            : RADIO_NO;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET\n            ? data.electiveTransfeESET\n            : RADIO_NO;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos;\n        form.transferInseminationMethod = data.transferInseminationMethod;\n        form.preImplGeneticTesting = data.preImplGeneticTesting\n            ? data.preImplGeneticTesting\n            : RADIO_NO;\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate\n            ? data.gestationalCarrierSurrogate\n            : RADIO_NO;\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n    };\n\n    const _save = () => {\n        console.log({ ...form });\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        console.log(\"embryo transfer save\");\n        if (v$.value.$invalid) {\n            return;\n        }\n        console.log(\"embryo transfer valid\");\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions\n    };\n}\n\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nconst oocytesNotUsedValidator = (oocyteCollections, inseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n\n        const retrievedOrThawed =\n            oocyteCollections.value.retrievedOrThawed != null\n                ? parseInt(oocyteCollections.value.retrievedOrThawed)\n                : 0;\n        const oocytesCryopreserved =\n            oocyteCollections.value.oocytesCryopreserved != null\n                ? parseInt(oocyteCollections.value.oocytesCryopreserved)\n                : 0;\n        const _inseminatedInjected =\n            inseminatedInjected.value != null\n                ? parseInt(inseminatedInjected.value)\n                : 0;\n\n        if (oocyteCollections.value.retrievedOrThawed > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) ==\n                    retrievedOrThawed -\n                        oocytesCryopreserved -\n                        _inseminatedInjected\n            );\n        }\n        return true;\n    });\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (oocytesNotUsed.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n        if (noOfOocytesRetrieved.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOfOocytesRetrieved.value\n            );\n        }\n        return true;\n    });\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) < noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst embryosCryopreservedValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst reasonEmbryoCryopreservationValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: null,\n        oocytesNotUsed: null,\n        reasonsForNoUse: null,\n        embryoStageFreezing: null,\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {\n            validator: inseminationMethodValidator(\n                computed(() => store.state.born.dependentOn.oocytesRetrieved)\n            )\n        },\n        oocytesNotUsed: {\n            validator: oocytesNotUsedValidator(\n                computed(() => store.state.born.oocyteCollections),\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        reasonsForNoUse: {\n            validator: reasonsForNoUseValidator(\n                computed(() => form.oocytesNotUsed)\n            )\n        },\n        embryoStageFreezing: {\n            validator: embryoStageFreezingValidator(\n                computed(() => form.embryosCryopreserved)\n            )\n        },\n        inseminatedInjected: {\n            validator: inseminatedInjectedValidator(\n                computed(\n                    () => store.state.born.oocyteCollections.retrievedOrThawed\n                )\n            )\n        },\n        normalFertilization2PN: {\n            validator: normalFertilization2PNValidator(\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        ofMII: {\n            validator: ofMIIValidator(computed(() => form.inseminatedInjected))\n        },\n        utilizableEmbryos: {\n            validator: utilizableEmbryosValidator(\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        embryosCryopreserved: {\n            validator: embryosCryopreservedValidator(\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        reasonEmbryoCryopreservation: {\n            validator: reasonEmbryoCryopreservationValidator(\n                computed(() => form.embryosCryopreserved)\n            )\n        },\n        embryoFreshCryoMethod: {\n            validator: embryoFreshCryoMethodValidator(\n                computed(() => form.embryosCryopreserved)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateFreshEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                embryoFreezeDate1: form.embryoFreezeDate1\n                    ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate2: form.embryoFreezeDate2\n                    ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate3: form.embryoFreezeDate3\n                    ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate4: form.embryoFreezeDate4\n                    ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\n            ? new Date(data.embryoFreezeDate1)\n            : null;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\n            ? new Date(data.embryoFreezeDate2)\n            : null;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\n            ? new Date(data.embryoFreezeDate3)\n            : null;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\n            ? new Date(data.embryoFreezeDate4)\n            : null;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions\n    };\n}\n\nconst isFETCycleValidator = (cyccleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        embryoStageThawing: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        embryoFrozenCryoMethod: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        embryoThawDate: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        donatedEmbryoFromAnotherCouple: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null,\n                embryoThawDate: form.embryoThawDate\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22Jan = (param, cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycle.cycleType == \"FET\" || cycle.cycleType == \"FOIVF\") {\n            return true;\n        }\n\n        if (new Date(cycle.cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\n        if (parseInt(noOfBabiesBorn.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null\n    });\n\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\n    const medicationForCOS = ref();\n\n    const rules = {\n        mediAdminisPriorCos: {\n            requiredIfCycleGreaterthan22Jan: requiredIfCycleGreaterthan22Jan(\n                form,\n                store.state.artCycle.selectedCycle\n            )\n        },\n        totalDoseRekovelleMcg: {\n            validator: totalDoseRekovelleMcgValidator(\n                computed(() => medicationForCOS.value)\n            )\n        },\n        endoRecTestdPerformed: {\n            requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes: requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes(\n                store.state.artCycle.selectedCycle.cycleDate,\n                store.state.born.embryoTransfer\n            )\n        },\n        congenitalAnomalies: {\n            validator: congenitalAnomaliesValidator(\n                computed(() => store.state.born.dependentOn.noOfBabiesBorn)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.otherMediPriorCosDesc = data.other_medi_prior_cos_desc;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\n            ? new Date(data.estimated_date_of_birth)\n            : null;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            other_medi_prior_cos_desc: form.otherMediPriorCosDesc,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra,\n        medicationForCOS,\n        medicationForCOSContainFSHOrLhOrFshPlusLH\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = reactive([\n        {\n            value: \"Spontaneous\",\n            label: \"Spontaneous\"\n        },\n        {\n            value: \"Induced\",\n            label: \"Induced\"\n        },\n        {\n            value: \"No Labour\",\n            label: \"No Labour\"\n        }\n    ]);\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = reactive([\n        \"Spontaneous Vaginal Birth\",\n        \"Assisted Vaginal\",\n        \"Induced or Spontaneous Labour Cesarean Section\",\n        \"No Labour - Cesarean Section\",\n        \"Unknown\"\n    ]);\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = reactive([\n        \"None\",\n        \"Brachial plexus injury\",\n        \"Caput succedaneum\",\n        \"Cephalohematoma\",\n        \"Clavicular fracture\",\n        \"Facial nerve injury\",\n        \"Fracture - other\",\n        \"Palsy - other\",\n        \"Birth injury - other\",\n        \"Unknown\"\n    ]);\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = reactive([\n        {\n            value: \"No Transfer\",\n            label: \"No Transfer\"\n        },\n        {\n            value: \"Discharged Home\",\n            label: \"Discharged Home\"\n        },\n        {\n            value: \"Transfer to other organization\",\n            label: \"Transfer to other organization\"\n        },\n        {\n            value: \"Transfer to ICU/CCU\",\n            label: \"Transfer to ICU/CCU\"\n        },\n        {\n            value: \"Transfer to other non-obstetrical unit same hospital\",\n            label: \"Transfer to other non-obstetrical unit same hospital\"\n        },\n        {\n            value: \"Maternal Death -Not related to Pregnancy or Birth\",\n            label: \"Maternal Death -Not related to Pregnancy or Birth\"\n        },\n        {\n            value: \"Maternal Death - Related to Pregnancy or Birth\",\n            label: \"Maternal Death - Related to Pregnancy or Birth\"\n        }\n    ]);\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n"],"sourceRoot":""}