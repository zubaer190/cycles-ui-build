{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./node_modules/core-js/modules/es.string.match.js","webpack:///./src/composable/born.js","webpack:///./src/composable/validator.js","webpack:///./node_modules/core-js/modules/es.array.join.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","hasBornCSVPermission","readPermission","fixRegExpWellKnownSymbolLogic","anObject","toLength","requireObjectCoercible","advanceStringIndex","regExpExec","MATCH","nativeMatch","maybeCallNative","regexp","O","this","matcher","undefined","call","RegExp","String","string","res","done","rx","S","global","fullUnicode","unicode","lastIndex","result","A","n","matchStr","spermTooLowCountValidator","complications","helpers","withParams","length","includes","req","typeOfPregnancyValidator","embryoTransfer","fetalSacsUSValidator","param","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","treatmentOutcomeValidator","cycleCancelled","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","validator","withMessage","dependentOn","_save","join","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","validDate","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","spermOriginValidator","oocytesInseminatedInjected","cyccleType","CycleType","EGG_FREEZING","FET","spermSourceValidator","ageSpermProviderValidator","cycleType","oocyteCollectionDateValidator","semenVolumeValidator","spermOrigin","spermSource","intersection","freshSpermOrigins","filter","spermMotilityValidator","spermDonorIDValidator","spermDonorStatusValidator","oocyteOriginValidator","retrievedOrThawedValidator","oocyteCryoPreservedValidator","donorProviderSatusValidator","oocyteOrigin","OOCYTE_ORIGIN","FRESH_DONOR_OOCYTES","FROZEN_DONOR_OOCYTES","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","donorProviderstatus","oocyteCryoMethod","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","TIME_0","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","cycleDate","reasonsForTreatmentCycleValidtor","useObstetricalHistoryFormInit","priorBirths","priorPregnancies","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","pgtAPlanned","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","noOfDaysGonadotropinsValidator","medicationForCOS","FSH_VALIDATORS_MEDICATION_FOR_COS","totalDoseFSHValidator","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","mediAdminisPriorCosValidator","cycle","totalDoseRekovelleMcgValidator","FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS","progesterOneLevelValidator","reasonCancelledValidator","reasonCancelledDescValidator","ofFolliclesGt15mmValidator","ofFolliclesLt15mmValidator","medicationForCOSValidator","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","TYPE_OF_STIMULATION_PROTOCOL_DEFAULT","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","ADJUVANT_MEDICATION_DEFAULTS","otherAdjuvantMediDescription","triggerMedication","TRIGGER_MEDICATION_DEFAULTS","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","cycleStopped","totalDoseRekovelleMcg","mediAdminisPriorCos","MEDI_ADMINIS_PRIOR_COS_DEFUALT","otherMediPriorCosDesc","minValue","maxValue","patient","age","cycleStoppped","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","medicationAdministraionPriorToCosOptions","medicationAdministraionPriorToCos","reasonCancelledOptions","adjuvantMedicationOptions","useBornMarkAsComplete","markAsComplete","source","payload","patientId","id","cycleId","$axios","post","embryoTransferValidator","cancel","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","utilizableEmbryos","embryosCryopreserved","utilizableAfterThaw","_utilizableEmbryos","_utilizableAfterThaw","_embryosCryopreserved","calc","SOURCE_TRANSFERRED_EMBRYOS_NOT_FET","sourceTransferredEmbryosValidationMessage","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","elem","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","intersections","TRANSFERRED_EMBRYO_SOURCE_FROZENS","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","endometrialReceptivityTest","getDefaultEndometrialThickness","items","cycleMonitoring","lines","etUs","thickness","PREPARATION_UTERINE_LINING_DEFAULT","fertilizationEmbryoThawDate","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","oocytesRetrieved","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","embryoStageFreezingValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","embryosThawed","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","embryoFreezeDate1Validator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","reasonEmbryoCryopreservation","embryoFreshCryoMethod","emitter","emit","fillFormDefault","getDeafultDataByPrimaryCycle","getFreshEbmryo","resp","status","freshEmbryos","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","cycleIds","cyclesSummary","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","commit","embryoStageThawingOptions","embryoFrozenCryoMethodOptions","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","liveBornFetus","sexFetus","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","live_born_fetus","sex_fetus","preExistingMentalHealthCondition","useBornFieldOptions","complicationsOfPregnancyOptions","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","newbornComplications","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS","require","DATE_REGEX","match","$","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","Object","STRICT_METHOD","target","proto","forced","separator"],"mappings":"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","file":"js/chunk-27265e94.946fb0d8.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\r\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\r\nimport useVuelidate from \"@vuelidate/core\";\r\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\r\nimport { useStore } from \"vuex\";\r\nimport { useRoute } from \"vue-router\";\r\n\r\nexport function useUserForm(type) {\r\n    const store = useStore();\r\n    const buttonLabel = computed(() => {\r\n        if (type === FORM_TYPE.CREATE) {\r\n            return \"Save\";\r\n        }\r\n        if (type === FORM_TYPE.EDIT) {\r\n            return \"Save\";\r\n        }\r\n    });\r\n\r\n    const form = reactive({\r\n        name: null,\r\n        email: null,\r\n        username: null,\r\n        phone: null,\r\n        password: null,\r\n        passwordConfirm: null,\r\n        role: null,\r\n        active: true,\r\n        security: []\r\n    });\r\n\r\n    const rules = {\r\n        name: { required },\r\n        email: { required, email },\r\n        username: { required },\r\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\r\n        passwordConfirm: {\r\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\r\n        }\r\n    };\r\n\r\n    const passwordDidnotMatch = computed(\r\n        () => form.password !== form.passwordConfirm\r\n    );\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n    const submitted = ref(false);\r\n\r\n    const userRoleOptions = [\r\n        { label: \"Yes\", value: \"2\" },\r\n        { label: \"No\", value: \"1\" }\r\n    ];\r\n\r\n    const groupOptions = computed(() => store.state.users.groups);\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        submitted,\r\n        buttonLabel,\r\n        userRoleOptions,\r\n        passwordDidnotMatch,\r\n        groupOptions\r\n    };\r\n}\r\n\r\nexport function usePermissionCheck() {\r\n    const store = useStore();\r\n    const route = useRoute();\r\n\r\n    const permission = computed(() => {\r\n        const idx = store.state.user.permissions.findIndex(\r\n            (item) => `/${item.appKey}` === route.path\r\n        );\r\n        return store.state.user.permissions[idx];\r\n    });\r\n\r\n    const hasUpdatePermission = computed(\r\n        () => permission.value.updatePermission\r\n    );\r\n\r\n    const hasCreatePermission = computed(\r\n        () => permission.value.updatePermission\r\n    );\r\n\r\n    const hasDeletePermission = computed(\r\n        () => permission.value.deletePermission\r\n    );\r\n\r\n    const hasBornCSVPermission = computed(() => {\r\n        const idx = store.state.user.permissions.findIndex(\r\n            (item) => item.appKey === \"born-csv\"\r\n        );\r\n\r\n        if (idx > 0) {\r\n            return store.state.user.permissions[idx].readPermission;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    return {\r\n        hasUpdatePermission,\r\n        hasCreatePermission,\r\n        hasDeletePermission,\r\n        hasBornCSVPermission\r\n    };\r\n}\r\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toLength = require('../internals/to-length');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@match logic\nfixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.es/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match\n    function (string) {\n      var res = maybeCallNative(nativeMatch, this, string);\n      if (res.done) return res.value;\n\n      var rx = anObject(this);\n      var S = String(string);\n\n      if (!rx.global) return regExpExec(rx, S);\n\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","import { CycleType, DATE_FORMAT_STRING } from \"@/config\";\r\nimport format from \"date-fns/format\";\r\nimport { useConfirm } from \"primevue/useconfirm\";\r\nimport { useToast } from \"primevue/usetoast\";\r\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\r\nimport useVuelidate from \"@vuelidate/core\";\r\nimport {\r\n    ADJUVANT_MEDICATION_DEFAULTS,\r\n    CYCLE_START_DATE_JAN_19,\r\n    FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS,\r\n    FSH_VALIDATORS_MEDICATION_FOR_COS,\r\n    MEDI_ADMINIS_PRIOR_COS_DEFUALT,\r\n    OOCYTE_ORIGIN,\r\n    PREPARATION_UTERINE_LINING_DEFAULT,\r\n    RADIO_NO,\r\n    RADIO_YES,\r\n    TIME_0,\r\n    TRANSFERRED_EMBRYO_SOURCE_FROZENS,\r\n    TRIGGER_MEDICATION_DEFAULTS,\r\n    TYPE_OF_STIMULATION_PROTOCOL_DEFAULT\r\n} from \"@/constants\";\r\nimport { getFreshEbmryo } from \"@/service/born\";\r\nimport { emitter } from \"@/event-bus\";\r\nimport { $axios } from \"@/service/app-http\";\r\nimport { validDate } from \"@/composable/validator\";\r\n\r\nconst spermTooLowCountValidator = (complications) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (complications.value.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (complications.value.includes(\"None\")) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst typeOfPregnancyValidator = (embryoTransfer) =>\r\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\r\n        if (embryoTransfer.value == \"no\") {\r\n            return value === \"Not Pregnant\";\r\n        }\r\n\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst fetalSacsUSValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            param.typeOfPregnancy == null ||\r\n            param.typeOfPregnancy == \"Biochemical\" ||\r\n            param.typeOfPregnancy == \"Not Pregnant\" ||\r\n            param.typeOfPregnancy == \"Unknown\"\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (\r\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\r\n            param.typeOfPregnancy == \"Heterotopic\" ||\r\n            param.typeOfPregnancy == \"Molar Pregnancy\"\r\n        ) {\r\n            return parseInt(value) > 0;\r\n        }\r\n\r\n        if (param.typeOfPregnancy == \"Ectopic\") {\r\n            return parseInt(value) >= 0;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst fetalheartsUSValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\r\n            param.typeOfPregnancy == \"Heterotopic\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\r\n                typeOfPregnancy.value == \"Heterotopic\") &&\r\n            parseInt(fetalheartsUS.value) >= 2\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst treatmentOutcomeValidator = (embryoTransfer, cycleCancelled) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer.value == \"no\" || cycleCancelled.value == \"yes\") {\r\n            return value == \"Cycle not completed to transfer\" || value == null;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nexport function useComplicationFormInit() {\r\n    const toast = useToast();\r\n    const store = useStore();\r\n    const confirm = useConfirm();\r\n\r\n    const form = reactive({\r\n        complications: [],\r\n        spermTooLowCount: null,\r\n        treatmentOutcome: null,\r\n        typeOfPregnancy: null,\r\n        fetalSacsUS: null,\r\n        fetalheartsUS: null,\r\n        chorionicity: null,\r\n        electiveFetalReduction: null\r\n    });\r\n    const loading = ref(false);\r\n    const complications = computed(() => store.state.born.complications);\r\n\r\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\r\n\r\n    const fillForm = (data) => {\r\n        form.complications = data.complications ? data.complications : [];\r\n        form.spermTooLowCount = data.spermTooLowCount;\r\n        form.fetalSacsUS = data.fetalSacsUS;\r\n        form.fetalheartsUS = data.fetalheartsUS;\r\n        form.chorionicity = data.chorionicity;\r\n        form.electiveFetalReduction = data.electiveFetalReduction;\r\n        if (data.treatmentOutcome != null) {\r\n            form.treatmentOutcome = data.treatmentOutcome;\r\n        }\r\n        if (data.typeOfPregnancy != null) {\r\n            form.typeOfPregnancy = data.typeOfPregnancy;\r\n        }\r\n    };\r\n\r\n    const rule = {\r\n        complications: {\r\n            required\r\n        },\r\n        spermTooLowCount: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                spermTooLowCountValidator(computed(() => form.complications))\r\n            )\r\n        },\r\n        typeOfPregnancy: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required if embryo transfer is yes & must be Not Pregnent if embryo transfer is no\",\r\n                typeOfPregnancyValidator(\r\n                    computed(() => store.state.born.dependentOn.embryoTransfer)\r\n                )\r\n            )\r\n        },\r\n        fetalSacsUS: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                fetalSacsUSValidator(form)\r\n            )\r\n        },\r\n        fetalheartsUS: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                fetalheartsUSValidator(form)\r\n            )\r\n        },\r\n        chorionicity: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\r\n            )\r\n        },\r\n        electiveFetalReduction: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\r\n            )\r\n        },\r\n        treatmentOutcome: {\r\n            validator: helpers.withMessage(\r\n                \"Value Must be Cycle not completed to transfer or null\",\r\n                treatmentOutcomeValidator(\r\n                    computed(() => store.state.born.dependentOn.embryoTransfer),\r\n                    computed(() => store.state.born.dependentOn.cycleCancelled)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rule, form);\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        const data = {\r\n            ...form,\r\n            complications: form.complications.join(\",\"),\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/updateComplication\", data)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .catch((err) => {})\r\n            .finally(() => (loading.value = false));\r\n    };\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fetalSacsUSWarning = ref();\r\n\r\n    const complicationOptions = computed(\r\n        () => store.state.options.complications\r\n    );\r\n    const treatmentOutcomeOptions = computed(\r\n        () => store.state.options.treatmentOutcome\r\n    );\r\n    const typeOfPregnancyOptions = computed(\r\n        () => store.state.options.typeOfPregnancy\r\n    );\r\n    const chorionicityOptions = computed(\r\n        () => store.state.options.chorionicity\r\n    );\r\n    const electiveFetalReductionOptions = computed(\r\n        () => store.state.options.electiveFetalReduction\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        save,\r\n        v$,\r\n        complications,\r\n        fillForm,\r\n        loading,\r\n        confirm,\r\n        complicationOptions,\r\n        treatmentOutcomeOptions,\r\n        typeOfPregnancyOptions,\r\n        chorionicityOptions,\r\n        electiveFetalReductionOptions\r\n    };\r\n}\r\n\r\nconst newbornDateBirthValidator = (form) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            form.pregnancyBirthOutcome == \"1050880\" ||\r\n            form.pregnancyBirthOutcome == \"1050920\" ||\r\n            form.pregnancyBirthOutcome == \"1050930\" ||\r\n            form.pregnancyBirthOutcome == \"1050940\" ||\r\n            form.pregnancyBirthOutcome == \"1050950\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst pregnancyLossDateValidator = (form) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            form.pregnancyBirthOutcome == \"1050890\" ||\r\n            form.pregnancyBirthOutcome == \"1050900\" ||\r\n            form.pregnancyBirthOutcome == \"1050910\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst babiesbornValidator = (form) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            form.pregnancyBirthOutcome == \"1050880\" ||\r\n            form.pregnancyBirthOutcome == \"1050920\" ||\r\n            form.pregnancyBirthOutcome == \"1050930\" ||\r\n            form.pregnancyBirthOutcome == \"1050940\" ||\r\n            form.pregnancyBirthOutcome == \"1050950\"\r\n        ) {\r\n            return parseInt(value) > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function usePregnancyOutcomeForm() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const form = reactive({\r\n        pregnancyBirthOutcome: null,\r\n        newbornDateBirth: null,\r\n        pregnancyLossDate: null,\r\n        babiesborn: null,\r\n        gestationalWeeks: null,\r\n        gestationalDays: null\r\n    });\r\n    const loading = ref(false);\r\n\r\n    const fillForm = (data) => {\r\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\r\n        form.newbornDateBirth = data.newbornDateBirth;\r\n        form.pregnancyLossDate = data.pregnancyLossDate;\r\n        form.babiesborn = data.babiesborn;\r\n        form.gestationalWeeks = data.gestationalWeeks;\r\n        form.gestationalDays = data.gestationalDays;\r\n    };\r\n\r\n    const rules = {\r\n        pregnancyLossDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                pregnancyLossDateValidator(form)\r\n            ),\r\n            validDate\r\n        },\r\n        newbornDateBirth: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                newbornDateBirthValidator(form)\r\n            ),\r\n            validDate\r\n        },\r\n        babiesborn: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                babiesbornValidator(form)\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        const data = {\r\n            ...form,\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n            newbornDateBirth: form.newbornDateBirth\r\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\r\n                : null,\r\n            pregnancyLossDate: form.pregnancyLossDate\r\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\r\n                : null\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/updatePregnancyOutcome\", data)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .catch((err) => {})\r\n            .finally(() => (loading.value = false));\r\n    };\r\n\r\n    const confirm = useConfirm();\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const pregnancyBirthOutcomeOptions = computed(\r\n        () => store.state.options.pregnancyBirthOutcome\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        pregnancyBirthOutcomeOptions,\r\n        loading,\r\n        fillForm,\r\n        save\r\n    };\r\n}\r\n\r\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst spermOriginValidator = (oocytesInseminatedInjected, cyccleType) =>\r\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\r\n        if (\r\n            cyccleType.value == CycleType.EGG_FREEZING ||\r\n            cyccleType.value == CycleType.FET\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst spermSourceValidator = (oocytesInseminatedInjected, cyccleType) =>\r\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\r\n        if (\r\n            cyccleType.value == CycleType.EGG_FREEZING ||\r\n            cyccleType.value == CycleType.FET\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst ageSpermProviderValidator = (oocytesInseminatedInjected, cycleType) =>\r\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) {\r\n            return true;\r\n        }\r\n\r\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\r\n            return helpers.req(value) && value >= 15 && value <= 80;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst isIVForFETCycle = (param) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        return true; // temp for now\r\n        if (param == \"IVF\" || param == \"FET\") {\r\n            return value != null;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst oocyteCollectionDateValidator = (param) =>\r\n    helpers.withParams({ type: \"date\" }, (value) => {\r\n        return true; // temp for now\r\n        if (param == \"IVF\" || param == \"FET\") {\r\n            return value != null;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst isOocyteRetrivedGreaterThan0 = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        // return true; // temp for now\r\n        if (parseInt(param.retrievedOrThawed) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst spermCountValidator = (spermTooLowCount) =>\r\n    helpers.withParams({ type: \"spermTooLowCond\" }, (value) => {\r\n        if (spermTooLowCount.value == \"N\") {\r\n            return value >= 1 && value <= 999;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst semenVolumeValidator = (spermOrigin, spermSource, cyccleType) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cyccleType.value == \"Egg Freezing\") return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (spermSource.value == \"SSRC001\" && intersection.length > 0) {\r\n            return helpers.req(value) && value >= 0.1 && value <= 15;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst spermMotilityValidator = (\r\n    spermOrigin,\r\n    spermSource,\r\n    spermTooLowCount,\r\n    cycleType\r\n) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (\r\n            spermSource.value == \"SSRC001\" &&\r\n            intersection.length > 0 &&\r\n            spermTooLowCount.value != \"Y\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst spermDonorIDValidator = (spermOrigin, cycleType) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM007\", \"SPM003\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst spermDonorStatusValidator = (spermOrigin, cycleType) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM007\", \"SPM003\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst oocyteOriginValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == CycleType.FET) {\r\n            return true;\r\n        }\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst retrievedOrThawedValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == CycleType.FET) {\r\n            return true;\r\n        }\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst oocyteCryoPreservedValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == CycleType.FET) {\r\n            return true;\r\n        }\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst donorProviderSatusValidator = (oocyteOrigin) =>\r\n    helpers.withParams({ type: \"oocyteOrigin\" }, (value) => {\r\n        if (\r\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FRESH_DONOR_OOCYTES) ||\r\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FROZEN_DONOR_OOCYTES)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useOocyteCollectionInit() {\r\n    const toast = useToast();\r\n    const store = useStore();\r\n    const form = reactive({\r\n        oocyteCollectionDate: null,\r\n        oocyteThawDate: null,\r\n        collectionDateUnknown: null,\r\n        oocyteFreezeID1Thawed: null,\r\n        oocyteFreezeID2Thawed: null,\r\n        retrievedOrThawed: null,\r\n        oocyteCryoPreserved: null,\r\n        oocyteFreezeID: null,\r\n        donorProviderIDCode: null,\r\n        donorProviderSource: null,\r\n        oocyteFreezeDate: null,\r\n        oocyteOrigin: null,\r\n        donorProviderstatus: null,\r\n        oocyteCryoMethod: null,\r\n        spermOrigin: null,\r\n        ageSpermProvider: null,\r\n        spermDonorID: null,\r\n        spermDonorStatus: null,\r\n        spermMotility: null,\r\n        spermTooLowCount: null,\r\n        spermDonorBank: null,\r\n        spermSource: null,\r\n        semenVolume: null,\r\n        spermCount: null,\r\n        spermCollection: null\r\n    });\r\n    const oocyteCollections = computed(\r\n        () => store.state.born.oocyteCollections\r\n    );\r\n\r\n    const loading = ref(false);\r\n    const rules = {\r\n        oocyteCollectionDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                oocyteCollectionDateValidator(\r\n                    store.state.artCycle.selectedCycle.cycleType\r\n                )\r\n            ),\r\n            validDate\r\n        },\r\n        oocyteThawDate: { validDate },\r\n        oocyteCryoPreserved: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                oocyteCryoPreservedValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        oocyteCryoMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isNumberOocytesCryoedIsGreaterThan0(form)\r\n            )\r\n        },\r\n        spermOrigin: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                spermOriginValidator(\r\n                    computed(\r\n                        () =>\r\n                            store.state.born.dependentOn\r\n                                .oocytesInseminatedInjected\r\n                    ),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        spermSource: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                spermSourceValidator(\r\n                    computed(\r\n                        () =>\r\n                            store.state.born.dependentOn\r\n                                .oocytesInseminatedInjected\r\n                    ),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        ageSpermProvider: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                ageSpermProviderValidator(\r\n                    computed(\r\n                        () =>\r\n                            store.state.born.dependentOn\r\n                                .oocytesInseminatedInjected\r\n                    ),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        oocyteFreezeDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isNumberOocytesCryoedIsGreaterThan0(form)\r\n            ),\r\n            validDate\r\n        },\r\n        spermCount: {\r\n            validator: helpers.withMessage(\r\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\r\n                'Fresh partner sperm' or 'Fresh own sperm'\r\n                and SpermSource = 'Semen'.`,\r\n                spermMotilityValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => form.spermSource),\r\n                    computed(() => form.spermTooLowCount),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        oocyteOrigin: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                oocyteOriginValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        retrievedOrThawed: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                retrievedOrThawedValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        semenVolume: {\r\n            validator: helpers.withMessage(\r\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\r\n                'Fresh partner sperm' or 'Fresh own sperm'\r\n                and SpermSource = 'Semen'.\r\n                Range: 0.1 - 15 mL.`,\r\n                semenVolumeValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => form.spermSource),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        donorProviderstatus: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                donorProviderSatusValidator(computed(() => form.oocyteOrigin))\r\n            )\r\n        },\r\n        spermDonorID: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                spermDonorIDValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        spermDonorStatus: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                spermDonorStatusValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        spermMotility: {\r\n            validator: helpers.withMessage(\r\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\r\n                'Fresh partner sperm' or 'Fresh own sperm'\r\n                and SpermSource = 'Semen'.`,\r\n                spermMotilityValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => form.spermSource),\r\n                    computed(() => form.spermTooLowCount),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        const data = {\r\n            ...form,\r\n            oocyteCollectionDate: form.oocyteCollectionDate\r\n                ? format(\r\n                      new Date(form.oocyteCollectionDate),\r\n                      DATE_FORMAT_STRING\r\n                  )\r\n                : null,\r\n            oocyteThawDate: form.oocyteThawDate\r\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\r\n                : null,\r\n            oocyteFreezeDate: form.oocyteFreezeDate\r\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\r\n                : null,\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/updateOocyteCollection\", data)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n                // fillForm(store.state.born.oocyteCollections);\r\n            })\r\n            .finally(() => (loading.value = false));\r\n    };\r\n    const confirm = useConfirm();\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.oocyteCollectionDate = data.oocyteCollectionDate\r\n            ? new Date(data.oocyteCollectionDate + TIME_0)\r\n            : null;\r\n        form.oocyteThawDate = data.oocyteThawDate\r\n            ? new Date(data.oocyteThawDate + TIME_0)\r\n            : null;\r\n        form.collectionDateUnknown = data.collectionDateUnknown;\r\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\r\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\r\n        form.retrievedOrThawed = data.retrievedOrThawed;\r\n        form.oocyteFreezeID = data.oocyteFreezeID;\r\n        form.donorProviderIDCode = data.donorProviderIDCode;\r\n        form.donorProviderSource = data.donorProviderSource;\r\n        form.oocyteFreezeDate = data.oocyteFreezeDate\r\n            ? new Date(data.oocyteFreezeDate + TIME_0)\r\n            : null;\r\n        form.oocyteOrigin = data.oocyteOrigin;\r\n        form.donorProviderstatus = data.donorProviderstatus;\r\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\r\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\r\n\r\n        if (store.state.artCycle.selectedCycle.cycleType != \"Egg Freezing\") {\r\n            form.spermOrigin = data.spermOrigin;\r\n            form.ageSpermProvider = data.ageSpermProvider;\r\n            form.spermDonorID = data.spermDonorID;\r\n            form.spermDonorStatus = data.spermDonorStatus;\r\n            form.spermMotility = data.spermMotility;\r\n            form.spermTooLowCount = data.spermTooLowCount;\r\n            form.spermDonorBank = data.spermDonorBank;\r\n            form.spermSource = data.spermSource;\r\n            form.semenVolume = data.semenVolume;\r\n            form.spermCount = data.spermCount;\r\n        }\r\n    };\r\n\r\n    const oocyteOriginOptions = computed(\r\n        () => store.state.options.oocyteOrigin\r\n    );\r\n    const donorProviderStatusOptions = computed(\r\n        () => store.state.options.donorProviderstatus\r\n    );\r\n    const oocyteCryoMethodOptions = computed(\r\n        () => store.state.options.oocyteCryoMethod\r\n    );\r\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\r\n    const spermOriginStatusOptions = computed(\r\n        () => store.state.options.spermDonorStatus\r\n    );\r\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        loading,\r\n        v$,\r\n        save,\r\n        fillForm,\r\n        oocyteCollections,\r\n        oocyteOriginOptions,\r\n        donorProviderStatusOptions,\r\n        oocyteCryoMethodOptions,\r\n        spermOriginOptions,\r\n        spermOriginStatusOptions,\r\n        spermSourceOptions\r\n    };\r\n}\r\n\r\nconst mustBe0IfPriorPregnancies0 = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (parseInt(param.priorPregnancies) != 0) return true;\r\n        else {\r\n            return value == 0;\r\n        }\r\n    });\r\n\r\nconst requiredIfprovincialFundingIsYes = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (param.provincialFundingForThisCycle == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (param.reasonsForTreatmentCycle.includes(\"TCR004\")) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst provincialFundingValidator = (cycleDate) =>\r\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\r\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst reasonsForTreatmentCycleValidtor = (value) => {\r\n    return value.length > 0;\r\n};\r\n\r\nexport function useObstetricalHistoryFormInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n\r\n    const form = reactive({\r\n        priorBirths: null,\r\n        priorPregnancies: null,\r\n        priorFreshCyclesStarted: 0,\r\n        priorETsOwnOocytes: 0,\r\n        priorETsDonorOocytes: 0,\r\n        provincialFundingForThisCycle: null,\r\n        typeOfFunding: null,\r\n        otherSpecify: null,\r\n        originOfSimulatedCycle: null,\r\n        primaryCycle: null,\r\n        reasonsForTreatmentCycle: [],\r\n        reasonsForMaleFactor: [],\r\n        pgtAPlanned: null\r\n    });\r\n\r\n    const rules = {\r\n        priorBirths: {\r\n            required\r\n        },\r\n        typeOfFunding: {\r\n            validator: requiredIfprovincialFundingIsYes(form)\r\n        },\r\n        priorPregnancies: { required },\r\n        reasonsForMaleFactor: {\r\n            validator: helpers.withMessage(\r\n                \"Required when Reason for treatment cycle is male\",\r\n                requiredIfReasonsForTreatmentCycleIsMaleFactor(form)\r\n            )\r\n        },\r\n        provincialFundingForThisCycle: {\r\n            validator: provincialFundingValidator(\r\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n            )\r\n        },\r\n        reasonsForTreatmentCycle: {\r\n            validator: helpers.withMessage(\r\n                \"At least one value is requred\",\r\n                reasonsForTreatmentCycleValidtor\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const _save = () => {\r\n        loading.value = false;\r\n        store\r\n            .dispatch(\"born/updateObstetricalHistory\", {\r\n                ...form,\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\r\n        form.priorPregnancies = data.priorPregnancies;\r\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted\r\n            ? data.priorFreshCyclesStarted\r\n            : 0;\r\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes\r\n            ? data.priorETsOwnOocytes\r\n            : 0;\r\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes\r\n            ? data.priorETsDonorOocytes\r\n            : 0;\r\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\r\n        form.typeOfFunding = data.typeOfFunding;\r\n        form.otherSpecify = data.otherSpecify;\r\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\r\n        form.primaryCycle = data.primaryCycle;\r\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle\r\n            ? data.reasonsForTreatmentCycle\r\n            : [];\r\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor\r\n            ? data.reasonsForMaleFactor\r\n            : [];\r\n        form.pgtAPlanned = data.pgtAPlanned ? data.pgtAPlanned : \"N\";\r\n    };\r\n\r\n    const priorPregnanciesOptions = computed(\r\n        () => store.state.options.pregnancyBirthOutcome\r\n    );\r\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n    const priorFreshCyclesStartedOptions = computed(\r\n        () => store.state.options.priorFreshCyclesStarted\r\n    );\r\n    const priorETsOwnOocytesOptions = computed(\r\n        () => store.state.options.priorETsOwnOocytes\r\n    );\r\n    const priorETsDonorOocytesOptions = computed(\r\n        () => store.state.options.priorETsDonorOocytes\r\n    );\r\n    const typeOfFundingOptions = computed(\r\n        () => store.state.options.typeOfFunding\r\n    );\r\n    const reasonsForMaleFactorOptions = computed(\r\n        () => store.state.options.reasonsForMaleFactor\r\n    );\r\n    const reasonsForTreatmentCycleOptions = computed(\r\n        () => store.state.options.reasonsForTreatmentCycle\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        save,\r\n        loading,\r\n        fillForm,\r\n        priorPregnanciesOptions,\r\n        priorBirthsOptions,\r\n        priorFreshCyclesStartedOptions,\r\n        priorETsOwnOocytesOptions,\r\n        priorETsDonorOocytesOptions,\r\n        typeOfFundingOptions,\r\n        reasonsForMaleFactorOptions,\r\n        reasonsForTreatmentCycleOptions\r\n    };\r\n}\r\n\r\nconst requiredIfMedicationForCOSContains = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            param.medicationForCOS.includes(4) ||\r\n            param.medicationForCOS.includes(5) ||\r\n            param.medicationForCOS.includes(6)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst noOfDaysGonadotropinsValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\r\n        let intersection = [];\r\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\r\n            medicationForCOS.value.includes(item)\r\n        );\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst totalDoseFSHValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\r\n        let intersection = [];\r\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\r\n            medicationForCOS.value.includes(item)\r\n        );\r\n        if (intersection.length > 0) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) >= 50 &&\r\n                parseInt(value) <= 30000\r\n            );\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst totalDoseLHValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (medicationForCOS.value.includes(4)) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseFloat(value) >= 200 &&\r\n                parseFloat(value) <= 400\r\n            );\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\r\n            return helpers.req(value) && value > 0 && value <= 50;\r\n        }\r\n\r\n        if (value != null) {\r\n            return value > 0 && value <= 50;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst mediAdminisPriorCosValidator = (cycle) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            cycle.value.cycleType == \"FET\" ||\r\n            cycle.value.cycleType == \"FOIVF\"\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (new Date(cycle.value.cycleDate) > new Date(\"2022-01-01\")) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        // const medicationForCosKeys = [\"COSM016\"];\r\n        let intersection = [];\r\n        intersection = FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS.filter(\r\n            (item) => medicationForCOS.value.includes(item)\r\n        );\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst progesterOneLevelValidator = (value) => {\r\n    if (value == null) return true;\r\n    else {\r\n        return value > 0 && value <= 31.4;\r\n    }\r\n};\r\n\r\nconst reasonCancelledValidator = (cycleCancelled) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (cycleCancelled.value == \"no\") {\r\n            return value.length == 0;\r\n        } else {\r\n            return value.length > 0;\r\n        }\r\n    });\r\n\r\nconst reasonCancelledDescValidator = (cycleCancelled) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        return true;\r\n        if (cycleCancelled.value == \"no\") {\r\n            return value == \"\" || value == null;\r\n        } else {\r\n            return helpers.req(value);\r\n        }\r\n    });\r\n\r\nconst ofFolliclesGt15mmValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == \"FET\") return true;\r\n        return helpers.req(value) && value > 0 && value <= 25;\r\n    });\r\n\r\nconst ofFolliclesLt15mmValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == \"FET\") return true;\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst medicationForCOSValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == \"FET\") return true;\r\n        return helpers.req(value);\r\n    });\r\n\r\n// const ofFolliclesGt15mmValidator = (cycleType) =>\r\n//     helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n//         console.log(value);\r\n//         return helpers.req(value) && value > 0 && value <= 25;\r\n//     });\r\n\r\nexport function useOvariannFormInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n\r\n    const form = reactive({\r\n        ageOfOocyteAge: null,\r\n        hightOfOocyteHight: null,\r\n        weightOfOocyte: null,\r\n        bmiOfOocyte: null,\r\n        fshDayOocyte: null,\r\n        afcOocyte: null,\r\n        ngPMOOocyte: null,\r\n        typeOfStimulationProtocol: TYPE_OF_STIMULATION_PROTOCOL_DEFAULT,\r\n        otherTypeOfStiProtocolDes: null,\r\n        medicationForCOS: null,\r\n        otherMedicationCOS: null,\r\n        adjuvantMedication: ADJUVANT_MEDICATION_DEFAULTS,\r\n        otherAdjuvantMediDescription: null,\r\n        triggerMedication: TRIGGER_MEDICATION_DEFAULTS,\r\n        otheTriMedDesc: null,\r\n        noOfDaysGonadotropins: null,\r\n        totalDoseFSH: null,\r\n        totalDoseLH: null,\r\n        ofFolliclesLs15mm: null,\r\n        ofFolliclesGt15mm: null,\r\n        estradiolLevel: null,\r\n        progesterOneLevel: null,\r\n        endometrialThicknessFreshCycle: null,\r\n        cycleCancelledBeforeRetrieval: \"no\",\r\n        reasonCancelled: null,\r\n        otherReasonCanDesc: null,\r\n        amhLevelOocyte: null,\r\n        cycleStopped: \"N\",\r\n        totalDoseRekovelleMcg: null,\r\n        mediAdminisPriorCos: MEDI_ADMINIS_PRIOR_COS_DEFUALT,\r\n        otherMediPriorCosDesc: null\r\n    });\r\n\r\n    const rules = {\r\n        ageOfOocyteAge: {\r\n            validator: helpers.withMessage(\"Value Required\", required)\r\n        },\r\n        hightOfOocyteHight: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 90 and 240\",\r\n                minValue(90)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 90 and 240\",\r\n                maxValue(240)\r\n            )\r\n        },\r\n        weightOfOocyte: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 25 and 227\",\r\n                minValue(25)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 25 and 227\",\r\n                maxValue(227)\r\n            )\r\n        },\r\n        bmiOfOocyte: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 10 and 70\",\r\n                minValue(10)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 10 and 70\",\r\n                maxValue(70)\r\n            )\r\n        },\r\n        noOfDaysGonadotropins: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                noOfDaysGonadotropinsValidator(\r\n                    computed(() => form.medicationForCOS)\r\n                )\r\n            )\r\n        },\r\n        totalDoseFSH: {\r\n            validator: helpers.withMessage(\r\n                \"Value Must be between 50 and 30000\",\r\n                totalDoseFSHValidator(computed(() => form.medicationForCOS))\r\n            )\r\n        },\r\n        medicationForCOS: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                medicationForCOSValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        totalDoseLH: {\r\n            validator: helpers.withMessage(\r\n                \"Value Must be between 200 and 400\",\r\n                totalDoseLHValidator(computed(() => form.medicationForCOS))\r\n            )\r\n        },\r\n        afcOocyte: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                afcOocyteValidtor(\r\n                    computed(\r\n                        () =>\r\n                            store.state.born.dependentOn.reasonForTreatmentCycle\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        amhLevelOocyte: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required & must be between 0 to 50\",\r\n                amhLevelOocyteValidtor(\r\n                    computed(\r\n                        () =>\r\n                            store.state.born.dependentOn.reasonForTreatmentCycle\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        mediAdminisPriorCos: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                mediAdminisPriorCosValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle)\r\n                )\r\n            )\r\n        },\r\n        totalDoseRekovelleMcg: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                totalDoseRekovelleMcgValidator(\r\n                    computed(() => form.medicationForCOS)\r\n                )\r\n            )\r\n        },\r\n        progesterOneLevel: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be in range of 0 to 31.4 & value has to be multiplied by 3.18\",\r\n                progesterOneLevelValidator\r\n            )\r\n        },\r\n        estradiolLevel: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 0 and 40000\",\r\n                minValue(0)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 0 and 40000\",\r\n                maxValue(40000)\r\n            )\r\n        },\r\n        reasonCancelled: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be empty if cycle cancelled is no\",\r\n                reasonCancelledValidator(\r\n                    computed(() => form.cycleCancelledBeforeRetrieval)\r\n                )\r\n            )\r\n        },\r\n        otherReasonCanDesc: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be empty if cycle cancelled is no\",\r\n                reasonCancelledDescValidator(\r\n                    computed(() => form.cycleCancelledBeforeRetrieval)\r\n                )\r\n            )\r\n        },\r\n        ofFolliclesGt15mm: {\r\n            validator: helpers.withMessage(\r\n                \"Value required & must between 0 ot 25\",\r\n                ofFolliclesGt15mmValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        ofFolliclesLs15mm: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                ofFolliclesLt15mmValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n    const confirm = useConfirm();\r\n    const _save = () => {\r\n        loading.value = false;\r\n        store\r\n            .dispatch(\"born/updateOvarian\", {\r\n                ...form,\r\n                adjuvantMedication: form.adjuvantMedication.join(\",\"),\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.ageOfOocyteAge = data.ageOfOocyteAge\r\n            ? data.ageOfOocyteAge\r\n            : store.state.artCycle.patient.age;\r\n        form.adjuvantMedication =\r\n            data.adjuvantMedication.length > 0\r\n                ? data.adjuvantMedication\r\n                : ADJUVANT_MEDICATION_DEFAULTS;\r\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\r\n        form.weightOfOocyte = data.weightOfOocyte;\r\n        form.bmiOfOocyte = data.bmiOfOocyte;\r\n        form.fshDayOocyte = data.fshDayOocyte;\r\n        form.afcOocyte = data.afcOocyte;\r\n        form.ngPMOOocyte = data.ngPMOOocyte;\r\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol\r\n            ? data.typeOfStimulationProtocol\r\n            : TYPE_OF_STIMULATION_PROTOCOL_DEFAULT;\r\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\r\n        form.medicationForCOS = data.medicationForCOS;\r\n        form.otherMedicationCOS = data.otherMedicationCOS;\r\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\r\n        form.triggerMedication = data.triggerMedication\r\n            ? data.triggerMedication\r\n            : TRIGGER_MEDICATION_DEFAULTS;\r\n        form.otheTriMedDesc = data.otheTriMedDesc;\r\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\r\n        form.totalDoseFSH = data.totalDoseFSH;\r\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\r\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\r\n        form.cycleCancelledBeforeRetrieval =\r\n            data.cycleCancelledBeforeRetrieval == \"yes\" ? \"yes\" : \"no\";\r\n        form.reasonCancelled = data.reasonCancelled;\r\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\r\n        form.amhLevelOocyte = data.amhLevelOocyte;\r\n        form.cycleStopped = data.cycleStoppped == \"Y\" ? \"Y\" : \"N\";\r\n        form.mediAdminisPriorCos =\r\n            data.mediAdminisPriorCos.length != 0\r\n                ? data.mediAdminisPriorCos\r\n                : MEDI_ADMINIS_PRIOR_COS_DEFUALT;\r\n        form.totalDoseRekovelleMcg = data.totalDoseRekovelleMcg;\r\n        form.otherMediPriorCosDesc = data.otherMediPriorCosDesc;\r\n\r\n        if (data.endometrialThicknessFreshCycle) {\r\n            form.endometrialThicknessFreshCycle =\r\n                data.endometrialThicknessFreshCycle;\r\n        }\r\n\r\n        if (data.estradiolLevel) {\r\n            form.estradiolLevel = data.estradiolLevel;\r\n        }\r\n\r\n        if (data.progesterOneLevel) {\r\n            form.progesterOneLevel = data.progesterOneLevel;\r\n        }\r\n\r\n        if (data.totalDoseLH) {\r\n            form.totalDoseLH = data.totalDoseLH;\r\n        }\r\n    };\r\n\r\n    const typeOfStimulationProtocolOptions = computed(\r\n        () => store.state.options.typeOfStimulationProtocol\r\n    );\r\n    const triggerMedicationOptions = computed(\r\n        () => store.state.options.triggerMedication\r\n    );\r\n    const medicationForCOSOptions = computed(\r\n        () => store.state.options.medicationForCOS\r\n    );\r\n    const medicationAdministraionPriorToCosOptions = computed(\r\n        () => store.state.options.medicationAdministraionPriorToCos\r\n    );\r\n    const reasonCancelledOptions = computed(\r\n        () => store.state.options.reasonCancelled\r\n    );\r\n    const adjuvantMedicationOptions = computed(\r\n        () => store.state.options.adjuvantMedication\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        loading,\r\n        save,\r\n        fillForm,\r\n        typeOfStimulationProtocolOptions,\r\n        triggerMedicationOptions,\r\n        medicationForCOSOptions,\r\n        medicationAdministraionPriorToCosOptions,\r\n        reasonCancelledOptions,\r\n        adjuvantMedicationOptions\r\n    };\r\n}\r\n\r\nexport function useBornEmbryologyInit() {\r\n    const store = useStore();\r\n    const form = inject(\"form\");\r\n\r\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\r\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\r\n\r\n    const inseminationMethodOptions = computed(\r\n        () => store.state.options.inseminationMethod\r\n    );\r\n    const reasonsForNoUseOptions = computed(\r\n        () => store.state.options.reasonsForNoUse\r\n    );\r\n    const embryoStageFreezingOptions = computed(\r\n        () => store.state.options.embryoStageFreezing\r\n    );\r\n    const reasonEmbryoCryopreservationOptions = computed(\r\n        () => store.state.options.reasonEmbryoCryopreservation\r\n    );\r\n    const embryoFreshCryoMethodOptions = computed(\r\n        () => store.state.options.embryoFreshCryoMethod\r\n    );\r\n    const embryoStageThawingOptions = computed(\r\n        () => store.state.options.embryoStageThawing\r\n    );\r\n    const embryoTransferOptions = computed(\r\n        () => store.state.options.reasonsNoET\r\n    );\r\n\r\n    return {\r\n        form,\r\n        isIVFCycle,\r\n        isFETCycle,\r\n        inseminationMethodOptions,\r\n        reasonsForNoUseOptions,\r\n        embryoStageFreezingOptions,\r\n        reasonEmbryoCryopreservationOptions,\r\n        embryoFreshCryoMethodOptions,\r\n        embryoStageThawingOptions,\r\n        embryoTransferOptions\r\n    };\r\n}\r\n\r\nexport function useBornMarkAsComplete() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n\r\n    const markAsComplete = async (source) => {\r\n        const payload = {\r\n            patientId: store.state.artCycle.patient.id,\r\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\r\n            source\r\n        };\r\n\r\n        try {\r\n            const { data } = await $axios.post(\r\n                \"born/mark-as-complete\",\r\n                payload\r\n            );\r\n\r\n            toast.add({\r\n                severity: \"success\",\r\n                summary: \"Sucess\",\r\n                detail: \"Mark as completed\",\r\n                life: 3000\r\n            });\r\n        } catch (err) {\r\n            toast.add({\r\n                severity: \"warn\",\r\n                summary: \"Error\",\r\n                detail: \"An Error occured\",\r\n                life: 3000\r\n            });\r\n        }\r\n    };\r\n\r\n    return {\r\n        markAsComplete\r\n    };\r\n}\r\n\r\nconst embryoTransferValidator = (cycle) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            cycle.value.cancel == false ||\r\n            cycle.value.cyccleType == \"FET\" ||\r\n            cycle.value.cyccleType == \"FOIVF\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\nconst isEbryoTrasferNo = (embryoTransfer) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer.value == \"no\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst isEbryoTrasferYes = (embryoTransfer) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst preparationUterineLiningValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (cycleType.value == \"FET\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\nconst transferDateValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst dateETAdjustedValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst assistedZonaHatchingValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst embryosTransferredValidator = (\r\n    embryoTransfer,\r\n    utilizableEmbryos,\r\n    embryosCryopreserved,\r\n    utilizableAfterThaw\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        let _utilizableEmbryos =\r\n            utilizableEmbryos.value != null\r\n                ? parseInt(utilizableEmbryos.value)\r\n                : 0;\r\n        let _utilizableAfterThaw =\r\n            utilizableAfterThaw.value != null\r\n                ? parseInt(utilizableAfterThaw.value)\r\n                : 0;\r\n        let _embryosCryopreserved =\r\n            embryosCryopreserved.value != null\r\n                ? parseInt(embryosCryopreserved.value)\r\n                : 0;\r\n\r\n        let calc =\r\n            _utilizableEmbryos + _utilizableAfterThaw - _embryosCryopreserved;\r\n\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value) && parseInt(value) <= calc;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst SOURCE_TRANSFERRED_EMBRYOS_NOT_FET = [\r\n    \"TES001\",\r\n    \"TES002\",\r\n    \"TES010\",\r\n    \"TES011\",\r\n    \"TES004\"\r\n];\r\n\r\nconst sourceTransferredEmbryosValidationMessage = (cycleType) => {\r\n    if (cycleType == \"FET\") {\r\n        return `Value requied & value cannot be from one from those -\r\n            1-Fresh embryos from own oocytes-partner sperm\r\n            2-Fresh embryos from own oocytes-donor sperm\r\n            3-Fresh embryos from partner oocytes-donor sperm\r\n            4-Fresh embryos from donor oocytes-own sperm\r\n            5-Fresh embryos from donor oocytes-partner sperm\r\n        `;\r\n    }\r\n    return \"Valur required\";\r\n};\r\n\r\nconst sourceTransferredEmbryosValidator = (embryoTransfer, cyccleType) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (cyccleType.value == \"FET\") {\r\n            let intersection = value.filter((item) =>\r\n                SOURCE_TRANSFERRED_EMBRYOS_NOT_FET.includes(item)\r\n            );\r\n            if (intersection.length > 0) return false;\r\n        }\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst transferInseminationMethodValidator = (\r\n    noOfEmbryosTransferred,\r\n    sourceTransferredEmbryos,\r\n    cycleStartDate\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\r\n        const intersection = freshSourceTransferredEmbryosIds.filter((elem) =>\r\n            [...sourceTransferredEmbryos.value].includes(elem)\r\n        );\r\n\r\n        if (\r\n            noOfEmbryosTransferred.value == 1 &&\r\n            intersection.length != 0 &&\r\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst preImplGeneticTestingValidator = (\r\n    embryoTransfer,\r\n    cycleDate,\r\n    pgtAPlanned\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            embryoTransfer.value == \"yes\" &&\r\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        if (pgtAPlanned.value == \"Y\") {\r\n            return value == \"yes\";\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            embryoTransfer.value == \"yes\" &&\r\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst charTransferredEmbryoValidator = (\r\n    noOfEmbryosTransferred,\r\n    preImplementationGeneticSergery,\r\n    cycleDate\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            preImplementationGeneticSergery.value == \"yes\" &&\r\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        // if (\r\n        //     preImplementationGeneticSergery.value == \"yes\" &&\r\n        //     parseInt(noOfEmbryosTransferred.value) == 1 &&\r\n        //     new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        // ) {\r\n        //     return helpers.req(value);\r\n        // }\r\n        return true;\r\n    });\r\n\r\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (preImplGeneticTesting.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst gestationalCarrierSurrogateValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        // && new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n\r\n        let intersections = [];\r\n        intersections = sourceTransferredEmbryos.value.filter((item) => {\r\n            return TRANSFERRED_EMBRYO_SOURCE_FROZENS.includes(item);\r\n        });\r\n\r\n        if (intersections.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst endometrialThicknessValidtor = (cyccleType) =>\r\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\r\n        if (cyccleType.value == \"FET\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBornEmbryoTransferInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const form = reactive({\r\n        embryoTransfer: null,\r\n        reasonsNoET: null,\r\n        preparationUterineLining: null,\r\n        endometrialThickness: null,\r\n        transferDate: null,\r\n        dateETAdjusted: null,\r\n        dayET: null,\r\n        ultrasoundGuidedET: null,\r\n        assistedZonaHatching: null,\r\n        embryosTransferred: null,\r\n        electiveTransfeESET: null,\r\n        sourceTransferredEmbryos: [],\r\n        transferInseminationMethod: null,\r\n        preImplGeneticTesting: null,\r\n        charTransferredEmbryo: null,\r\n        numberThaws: null,\r\n        sitePGTembryo: null,\r\n        gestationalCarrierSurrogate: null,\r\n        gestationalCarrierSurrogateChart: null,\r\n        heightRecipient: null,\r\n        weightRecipient: null,\r\n        recipientBMI: null,\r\n        endometrialReceptivityTest: null\r\n    });\r\n\r\n    const rules = {\r\n        embryoTransfer: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoTransferValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle)\r\n                )\r\n            )\r\n        },\r\n        reasonsNoET: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferNo(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        preparationUterineLining: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                preparationUterineLiningValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        transferDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            ),\r\n            validDate\r\n        },\r\n        dateETAdjusted: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        assistedZonaHatching: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        embryosTransferred: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required and value cannot be greated than (utilizableEmbryos + utilizableAfterThaw - embryosCryopreserved) \",\r\n                embryosTransferredValidator(\r\n                    computed(() => form.embryoTransfer),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.utilizableEmbryos\r\n                    ),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.embryosCryopreserved\r\n                    ),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.utilizableAfterThaw\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        sourceTransferredEmbryos: {\r\n            validator: helpers.withMessage(\r\n                sourceTransferredEmbryosValidationMessage(\r\n                    store.state.artCycle.selectedCycle != undefined ? store.state.artCycle.selectedCycle.cycleType : null\r\n                ),\r\n                sourceTransferredEmbryosValidator(\r\n                    computed(() => form.embryoTransfer),\r\n                    computed(() => store.state.artCycle.selectedCycle != undefined ? store.state.artCycle.selectedCycle.cycleType : null)\r\n                )\r\n            )\r\n        },\r\n        transferInseminationMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                transferInseminationMethodValidator(\r\n                    computed(() => form.embryosTransferred),\r\n                    computed(() => form.sourceTransferredEmbryos),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        preImplGeneticTesting: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required & must be YES if PGT A Planned is YES\",\r\n                preImplGeneticTestingValidator(\r\n                    computed(() => form.embryoTransfer),\r\n                    computed(\r\n                        () => store.state.artCycle.selectedCycle.cycleDate\r\n                    ),\r\n                    computed(() => store.state.born.dependentOn.pgtAPlanned)\r\n                )\r\n            )\r\n        },\r\n        charTransferredEmbryo: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                charTransferredEmbryoValidator(\r\n                    computed(() => form.embryosTransferred),\r\n                    computed(() => form.preImplGeneticTesting),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        sitePGTembryo: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                sitePGTembryoValidator(\r\n                    computed(() => form.preImplGeneticTesting),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        gestationalCarrierSurrogate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        numberThaws: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                numberThawsValidator(\r\n                    computed(() => form.sourceTransferredEmbryos),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        endometrialThickness: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                endometrialThicknessValidtor(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const getDefaultEndometrialThickness = () => {\r\n        let items = store.state.cycleMonitoring.lines.filter(\r\n            (item) => item.etUs != null\r\n        );\r\n\r\n        if (items.length == 0) return null;\r\n\r\n        let thickness = items[items.length - 1].etUs\r\n            ? parseFloat(items[items.length - 1].etUs)\r\n            : null;\r\n\r\n        return thickness;\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.embryoTransfer = data.embryoTransfer;\r\n        form.reasonsNoET = data.reasonsNoET;\r\n        form.preparationUterineLining = data.preparationUterineLining;\r\n        form.endometrialThickness = data.endometrialThickness\r\n            ? data.endometrialThickness\r\n            : getDefaultEndometrialThickness();\r\n        form.transferDate = data.transferDate\r\n            ? new Date(data.transferDate + \" 00:00:00\")\r\n            : null;\r\n        form.dateETAdjusted = data.dateETAdjusted ? data.dateETAdjusted : \"no\";\r\n        form.dayET = data.dayET;\r\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\r\n        form.assistedZonaHatching = data.assistedZonaHatching;\r\n        form.embryosTransferred = data.embryosTransferred;\r\n        form.electiveTransfeESET = data.electiveTransfeESET;\r\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos\r\n            ? data.sourceTransferredEmbryos\r\n            : [];\r\n        form.transferInseminationMethod = data.transferInseminationMethod;\r\n\r\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\r\n        form.numberThaws = data.numberThaws;\r\n        form.sitePGTembryo = data.sitePGTembryo;\r\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate\r\n            ? data.gestationalCarrierSurrogate\r\n            : \"no\";\r\n        form.gestationalCarrierSurrogateChart =\r\n            data.gestationalCarrierSurrogateChart;\r\n        form.heightRecipient = data.heightRecipient;\r\n        form.weightRecipient = data.weightRecipient;\r\n        form.recipientBMI = data.recipientBMI;\r\n        form.endometrialReceptivityTest = data.endometrialReceptivityTest\r\n            ? data.endometrialReceptivityTest\r\n            : \"N\";\r\n\r\n        if (store.state.born.dependentOn.pgtAPlanned == \"Y\") {\r\n            form.preImplGeneticTesting = \"yes\";\r\n        } else {\r\n            form.preImplGeneticTesting = data.preImplGeneticTesting\r\n                ? data.preImplGeneticTesting\r\n                : \"no\";\r\n        }\r\n\r\n        if (\r\n            data.embryoTransfer == null &&\r\n            store.state.artCycle.selectedCycle.cycleType == \"FET\"\r\n        ) {\r\n            form.embryoTransfer = \"yes\";\r\n        }\r\n\r\n        if (data.preparationUterineLining == null) {\r\n            form.preparationUterineLining = PREPARATION_UTERINE_LINING_DEFAULT;\r\n        }\r\n\r\n        if (data.assistedZonaHatching == null) {\r\n            form.assistedZonaHatching = \"Y\";\r\n        }\r\n\r\n        if (store.state.born.fertilizationEmbryoThawDate) {\r\n            form.transferDate = new Date(\r\n                store.state.born.fertilizationEmbryoThawDate\r\n            );\r\n        }\r\n    };\r\n\r\n    const _save = () => {\r\n        store\r\n            .dispatch(\"born/updateEmbryoTransfer\", {\r\n                ...form,\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n                transferDate: form.transferDate\r\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\r\n                    : null\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            });\r\n    };\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\r\n    const preparationUterineLiningOptions = computed(\r\n        () => store.state.options.preparationUterineLining\r\n    );\r\n    const assistedZonaHatchingOptions = computed(\r\n        () => store.state.options.assistedZonaHatching\r\n    );\r\n    const sourceTransferredEmbryosOptions = computed(\r\n        () => store.state.options.sourceTransferredEmbryos\r\n    );\r\n    const transferInseminationMethodOptions = computed(\r\n        () => store.state.options.transferInseminationMethod\r\n    );\r\n    const charTransferredEmbryoOptions = computed(\r\n        () => store.state.options.charTransferredEmbryo\r\n    );\r\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\r\n    const sitePGTembryoOptions = computed(\r\n        () => store.state.options.sitePGTembryo\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        fillForm,\r\n        save,\r\n        reasonsNoETOptions,\r\n        preparationUterineLiningOptions,\r\n        assistedZonaHatchingOptions,\r\n        sourceTransferredEmbryosOptions,\r\n        transferInseminationMethodOptions,\r\n        charTransferredEmbryoOptions,\r\n        numberThawsOptions,\r\n        sitePGTembryoOptions,\r\n        getDefaultEndometrialThickness\r\n    };\r\n}\r\n\r\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOfOocytesRetrieved.value > 0) {\r\n            return parseInt(value) > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst oocytesNotUsedValidator = (\r\n    oocytesRetrieved,\r\n    inseminatedInjected,\r\n    oocytesCryopreserved,\r\n    cycleType\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (cycleType.value == \"FET\") {\r\n            return true;\r\n        } else {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) ==\r\n                    oocytesRetrieved.value -\r\n                        inseminatedInjected.value -\r\n                        oocytesCryopreserved.value\r\n            );\r\n        }\r\n    });\r\n\r\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (oocytesNotUsed.value > 0) {\r\n            return value.length > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryosCryopreserved.value > 0) {\r\n            return value.length > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true; // temp for now\r\n        if (noOfOocytesRetrieved.value > 0) {\r\n            return (\r\n                value.length > 0 &&\r\n                parseInt(value) <= noOfOocytesRetrieved.value\r\n            );\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) <= noOocytesInseminatedInjected.value\r\n            );\r\n        }\r\n        return true;\r\n    });\r\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) <= noOocytesInseminatedInjected.value\r\n            );\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryosCryopreservedValidator = (\r\n    noOocytesInseminatedInjected,\r\n    embryosThawed\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return value <= embryosThawed.value;\r\n    });\r\n\r\nconst reasonEmbryoCryopreservationValidator = (\r\n    embryosCryopreserved,\r\n    cycleStartDate\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            embryosCryopreserved.value > 0 &&\r\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryosCryopreserved.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryoFreezeDate1Validator = (embryosCryopreserved) =>\r\n    helpers.withParams({ type: \"embryosCryopreserved\" }, (value) => {\r\n        if (embryosCryopreserved.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBornFreshEmbryoInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n    const form = reactive({\r\n        inseminationMethod: [],\r\n        oocytesNotUsed: null,\r\n        reasonsForNoUse: [],\r\n        embryoStageFreezing: [],\r\n        inseminatedInjected: null,\r\n        embryoFreezeID1: null,\r\n        embryoFreezeID2: null,\r\n        embryoFreezeID3: null,\r\n        embryoFreezeID4: null,\r\n        normalFertilization2PN: null,\r\n        embryoFreezeDate1: null,\r\n        embryoFreezeDate2: null,\r\n        embryoFreezeDate3: null,\r\n        embryoFreezeDate4: null,\r\n        ofMII: null,\r\n        utilizableEmbryos: null,\r\n        embryosCryopreserved: null,\r\n        reasonEmbryoCryopreservation: null,\r\n        embryoFreshCryoMethod: null\r\n    });\r\n\r\n    const rules = {\r\n        inseminationMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                inseminationMethodValidator(\r\n                    computed(\r\n                        () => store.state.born.dependentOn.oocytesRetrieved\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        oocytesNotUsed: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be equal to oocytesRetrieved - inseminatedInjected - oocytesCryopreserved\",\r\n                oocytesNotUsedValidator(\r\n                    computed(\r\n                        () => store.state.born.dependentOn.oocytesRetrieved\r\n                    ),\r\n                    computed(() => form.inseminatedInjected),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.oocytesCryopreserved\r\n                    ),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        reasonsForNoUse: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                reasonsForNoUseValidator(computed(() => form.oocytesNotUsed))\r\n            )\r\n        },\r\n        embryoStageFreezing: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoStageFreezingValidator(\r\n                    computed(() => form.embryosCryopreserved)\r\n                )\r\n            )\r\n        },\r\n        inseminatedInjected: {\r\n            validator: helpers.withMessage(\"Value Required\", required)\r\n        },\r\n        normalFertilization2PN: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required and must be less or equal to oocytes inseminated/injected\",\r\n                normalFertilization2PNValidator(\r\n                    computed(() => form.inseminatedInjected)\r\n                )\r\n            )\r\n        },\r\n        ofMII: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                ofMIIValidator(computed(() => form.inseminatedInjected))\r\n            )\r\n        },\r\n        utilizableEmbryos: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                utilizableEmbryosValidator(\r\n                    computed(() => form.inseminatedInjected)\r\n                )\r\n            )\r\n        },\r\n        embryosCryopreserved: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required & value must be less than # embryos Thawed\",\r\n                embryosCryopreservedValidator(\r\n                    computed(() => form.inseminatedInjected),\r\n                    computed(() => store.state.born.dependentOn.embryosThawed)\r\n                )\r\n            )\r\n        },\r\n        reasonEmbryoCryopreservation: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                reasonEmbryoCryopreservationValidator(\r\n                    computed(() => form.embryosCryopreserved),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        embryoFreshCryoMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoFreshCryoMethodValidator(\r\n                    computed(() => form.embryosCryopreserved)\r\n                )\r\n            )\r\n        },\r\n        embryoFreezeDate1: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoFreezeDate1Validator(\r\n                    computed(() => form.embryosCryopreserved)\r\n                )\r\n            ),\r\n            validDate\r\n        },\r\n        embryoFreezeDate2: { validDate },\r\n        embryoFreezeDate3: { validDate },\r\n        embryoFreezeDate4: { validDate }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const _save = () => {\r\n        let payload = {\r\n            ...form,\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n            embryoFreezeDate1: form.embryoFreezeDate1\r\n                ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\r\n                : null,\r\n            embryoFreezeDate2: form.embryoFreezeDate2\r\n                ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\r\n                : null,\r\n            embryoFreezeDate3: form.embryoFreezeDate3\r\n                ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\r\n                : null,\r\n            embryoFreezeDate4: form.embryoFreezeDate4\r\n                ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\r\n                : null\r\n        };\r\n\r\n        // return;\r\n\r\n        store.dispatch(\"born/updateFreshEmbryo\", payload).then(() => {\r\n            toast.add({\r\n                severity: \"success\",\r\n                summary: \"\",\r\n                detail: \"Save Successful\",\r\n                life: 3000\r\n            });\r\n        });\r\n    };\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        emitter.emit(\"fresh-embryo:on-save\");\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.inseminationMethod = data.inseminationMethod;\r\n        form.oocytesNotUsed = data.oocytesNotUsed;\r\n        form.reasonsForNoUse = data.reasonsForNoUse;\r\n        form.embryoStageFreezing = data.embryoStageFreezing;\r\n        form.inseminatedInjected = data.inseminatedInjected;\r\n        form.embryoFreezeID1 = data.embryoFreezeID1;\r\n        form.embryoFreezeID2 = data.embryoFreezeID2;\r\n        form.embryoFreezeID3 = data.embryoFreezeID3;\r\n        form.embryoFreezeID4 = data.embryoFreezeID4;\r\n        form.normalFertilization2PN = data.normalFertilization2PN;\r\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\r\n            ? new Date(data.embryoFreezeDate1 + TIME_0)\r\n            : null;\r\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\r\n            ? new Date(data.embryoFreezeDate2 + TIME_0)\r\n            : null;\r\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\r\n            ? new Date(data.embryoFreezeDate3 + TIME_0)\r\n            : null;\r\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\r\n            ? new Date(data.embryoFreezeDate4 + TIME_0)\r\n            : null;\r\n        form.ofMII = data.ofMII;\r\n        form.utilizableEmbryos = data.utilizableEmbryos;\r\n        form.embryosCryopreserved = data.embryosCryopreserved;\r\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\r\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\r\n    };\r\n\r\n    const fillFormDefault = (data) => {\r\n        if (form.inseminationMethod.length == 0)\r\n            form.inseminationMethod = data.inseminationMethod;\r\n        if (form.oocytesNotUsed == null)\r\n            form.oocytesNotUsed = data.oocytesNotUsed;\r\n        if (form.reasonsForNoUse.length == 0)\r\n            form.reasonsForNoUse = data.reasonsForNoUse;\r\n        if (form.embryoStageFreezing.length == 0)\r\n            form.embryoStageFreezing = data.embryoStageFreezing;\r\n        if (form.inseminatedInjected == null)\r\n            form.inseminatedInjected = data.inseminatedInjected;\r\n        if (form.embryoFreezeID1 == null)\r\n            form.embryoFreezeID1 = data.embryoFreezeID1;\r\n        if (form.embryoFreezeID2 == null)\r\n            form.embryoFreezeID2 = data.embryoFreezeID2;\r\n        if (form.embryoFreezeID3 == null)\r\n            form.embryoFreezeID3 = data.embryoFreezeID3;\r\n        if (form.embryoFreezeID4 == null)\r\n            form.embryoFreezeID4 = data.embryoFreezeID4;\r\n        if (form.normalFertilization2PN == null)\r\n            form.normalFertilization2PN = data.normalFertilization2PN;\r\n        if (form.embryoFreezeDate1 == null)\r\n            form.embryoFreezeDate1 = data.embryoFreezeDate1\r\n                ? new Date(data.embryoFreezeDate1 + TIME_0)\r\n                : null;\r\n        if (form.embryoFreezeDate2 == null)\r\n            form.embryoFreezeDate2 = data.embryoFreezeDate2\r\n                ? new Date(data.embryoFreezeDate2 + TIME_0)\r\n                : null;\r\n        if (form.embryoFreezeDate3 == null)\r\n            form.embryoFreezeDate3 = data.embryoFreezeDate3\r\n                ? new Date(data.embryoFreezeDate3 + TIME_0)\r\n                : null;\r\n        if (form.embryoFreezeDate4 == null)\r\n            form.embryoFreezeDate4 = data.embryoFreezeDate4\r\n                ? new Date(data.embryoFreezeDate4 + TIME_0)\r\n                : null;\r\n        if (form.ofMII == null) form.ofMII = data.ofMII;\r\n        if (form.utilizableEmbryos == null)\r\n            form.utilizableEmbryos = data.utilizableEmbryos;\r\n        if (form.embryosCryopreserved == null)\r\n            form.embryosCryopreserved = data.embryosCryopreserved;\r\n        if (form.reasonEmbryoCryopreservation == null)\r\n            form.reasonEmbryoCryopreservation =\r\n                data.reasonEmbryoCryopreservation;\r\n        if (form.embryoFreshCryoMethod == null)\r\n            form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\r\n    };\r\n\r\n    const getDeafultDataByPrimaryCycle = async ({ patientId, cycleId }) => {\r\n        const resp = await getFreshEbmryo(patientId, cycleId);\r\n        if (resp.status == \"success\") {\r\n            fillFormDefault(resp.freshEmbryos);\r\n        }\r\n    };\r\n\r\n    const inseminationMethodOptions = computed(\r\n        () => store.state.options.inseminationMethod\r\n    );\r\n    const reasonsForNoUseOptions = computed(\r\n        () => store.state.options.reasonsForNoUse\r\n    );\r\n    const embryoStageFreezingOptions = computed(\r\n        () => store.state.options.embryoStageFreezing\r\n    );\r\n    const reasonEmbryoCryopreservationOptions = computed(\r\n        () => store.state.options.reasonEmbryoCryopreservation\r\n    );\r\n    const embryoFreshCryoMethodOptions = computed(\r\n        () => store.state.options.embryoFreshCryoMethod\r\n    );\r\n\r\n    const cycleIds = computed(() => store.state.artCycle.cyclesSummary);\r\n\r\n    return {\r\n        store,\r\n        loading,\r\n        form,\r\n        v$,\r\n        fillForm,\r\n        save,\r\n        inseminationMethodOptions,\r\n        reasonsForNoUseOptions,\r\n        embryoStageFreezingOptions,\r\n        reasonEmbryoCryopreservationOptions,\r\n        embryoFreshCryoMethodOptions,\r\n        cycleIds,\r\n        getDeafultDataByPrimaryCycle\r\n    };\r\n}\r\n\r\nconst isFETCycleValidator = (cyccleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cyccleType.value == \"FET\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBronFrozenEmbyoInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n    const form = reactive({\r\n        oocyteCollectionDate: null,\r\n        embryoFreezeID1Thawed: null,\r\n        embryoFreezeID2Thawed: null,\r\n        embryoFreezeID3Thawed: null,\r\n        embryoFreezeID4Thawed: null,\r\n        embryosThawed: null,\r\n        utilizableAfterThaw: null,\r\n        embryoStageThawing: null,\r\n        embryoFrozenCryoMethod: null,\r\n        embryoThawDate: null,\r\n        donatedEmbryoFromAnotherCouple: null\r\n    });\r\n\r\n    const rules = {\r\n        utilizableAfterThaw: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        embryoStageThawing: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        embryoFrozenCryoMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        embryoThawDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            ),\r\n            validDate\r\n        },\r\n        donatedEmbryoFromAnotherCouple: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        store\r\n            .dispatch(\"born/updateFrozenEmbryo\", {\r\n                ...form,\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n                oocyteCollectionDate: form.oocyteCollectionDate\r\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\r\n                    : null,\r\n                embryoThawDate: form.embryoThawDate\r\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\r\n                    : null\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        let embryoThawDate = data.embryoThawDate\r\n            ? new Date(data.embryoThawDate + TIME_0)\r\n            : null;\r\n\r\n        form.oocyteCollectionDate = data.oocyteCollectionDate\r\n            ? new Date(data.oocyteCollectionDate + TIME_0)\r\n            : null;\r\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\r\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\r\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\r\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\r\n        form.embryosThawed = data.embryosThawed;\r\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\r\n        form.embryoStageThawing = data.embryoStageThawing;\r\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\r\n        form.embryoThawDate = embryoThawDate;\r\n        form.donatedEmbryoFromAnotherCouple =\r\n            data.donatedEmbryoFromAnotherCouple;\r\n\r\n        if (data.embryoStageThawing.length == 0) {\r\n            form.embryoStageThawing = [4];\r\n        }\r\n\r\n        if (\r\n            store.state.artCycle.selectedCycle.cycleType == \"FET\" &&\r\n            data.embryoFrozenCryoMethod == null\r\n        ) {\r\n            form.embryoFrozenCryoMethod = \"ECRY002\";\r\n        }\r\n\r\n        store.commit(\"born/SET_FERTILIZATION_EMBRYO_THAW_DATE\", embryoThawDate);\r\n    };\r\n\r\n    const embryoStageThawingOptions = computed(\r\n        () => store.state.options.embryoStageThawing\r\n    );\r\n    const embryoFrozenCryoMethodOptions = computed(\r\n        () => store.state.options.embryoFrozenCryoMethod\r\n    );\r\n\r\n    return {\r\n        store,\r\n        loading,\r\n        form,\r\n        v$,\r\n        save,\r\n        fillForm,\r\n        embryoStageThawingOptions,\r\n        embryoFrozenCryoMethodOptions\r\n    };\r\n}\r\n\r\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\r\n    cycleDate,\r\n    embryoTransfer\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\r\n            return true;\r\n        }\r\n\r\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\r\n            return value.length > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\r\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\r\n        if (parseInt(noOfBabiesBorn.value) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBornExtraFormInit() {\r\n    const store = useStore();\r\n\r\n    const form = reactive({\r\n        patientNotes: null,\r\n        bornConsentFlag: null,\r\n        pgtAIsPlanned: null,\r\n        patientHistoryNotes: null,\r\n        mediAdminisPriorCos: [],\r\n        otherMediPriorCosDesc: null,\r\n        totalDoseRekovelleMcg: null,\r\n        stimulationNotes: null,\r\n        spermCollectionNotes: null,\r\n        embryologyNotes: null,\r\n        endoRecTestdPerformed: null,\r\n        recTestBiopsyResult: null,\r\n        transferNotes: null,\r\n        pregnancyOutcomeNotes: null,\r\n        estimatedDateOfBirth: null,\r\n        gestationalAge: null,\r\n        complicationsOfPregnancy: [],\r\n        maternalHealthConditions: [],\r\n        diabetesAndPregnancy: null,\r\n        hypertensionDisorder: null,\r\n        typeOfLabour: null,\r\n        augmentation: [],\r\n        methodsOfInduction: [],\r\n        typeOfDelivery: null,\r\n        allIndicationsOfLabour: null,\r\n        cervicalRipening: [],\r\n        allIndicationsCaesarean: null,\r\n        labourBirthComplications: [],\r\n        maternalOutcome: null,\r\n        birthWeight: null,\r\n        congenitalAnomalies: null,\r\n        neonatalDeath: null,\r\n        apgar1: null,\r\n        apgar5: null,\r\n        apgar10: null,\r\n        neonatalBirthComplications: null,\r\n        admissionToNicu: null,\r\n        notesOnBirthOutcome: null,\r\n        liveBornFetus: null,\r\n        sexFetus: null\r\n    });\r\n\r\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\r\n    const medicationForCOS = ref();\r\n\r\n    const rules = {\r\n        congenitalAnomalies: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                congenitalAnomaliesValidator(\r\n                    computed(() => store.state.born.dependentOn.noOfBabiesBorn)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const getBornExtra = () => {\r\n        store\r\n            .dispatch(\"born/getBornExtra\", {\r\n                patientId: store.state.artCycle.patient.id,\r\n                cycleId: store.state.artCycle.selectedCycle.cycleId\r\n            })\r\n            .then((data) => {\r\n                fillForm(data);\r\n            })\r\n            .catch(() => {})\r\n            .finally(() => {\r\n                v$.value.$validate();\r\n            });\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.patientNotes = data.patient_notes;\r\n        form.bornConsentFlag = data.born_consent_flag;\r\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\r\n        form.patientHistoryNotes = data.patient_history_notes;\r\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\r\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\r\n        form.stimulationNotes = data.stimulation_notes;\r\n        form.spermCollectionNotes = data.sperm_collection_notes;\r\n        form.embryologyNotes = data.embryology_notes;\r\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\r\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\r\n        form.transferNotes = data.transfer_notes;\r\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\r\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\r\n            ? new Date(data.estimated_date_of_birth)\r\n            : null;\r\n        form.gestationalAge = data.gestational_age;\r\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\r\n        form.maternalHealthConditions = data.maternal_health_conditions;\r\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\r\n        form.hypertensionDisorder = data.hypertension_disorder;\r\n        form.typeOfLabour = data.type_of_labour;\r\n        form.augmentation = data.augmentation;\r\n        form.methodsOfInduction = data.methods_of_induction;\r\n        form.typeOfDelivery = data.type_of_delivery;\r\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\r\n        form.cervicalRipening = data.cervical_ripening;\r\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\r\n        form.labourBirthComplications = data.labour_birth_complications;\r\n        form.maternalOutcome = data.maternal_outcome;\r\n        form.birthWeight = data.birth_weight;\r\n        form.congenitalAnomalies = data.congenital_anomalies;\r\n        form.neonatalDeath = data.neonatal_death;\r\n        form.apgar1 = data.apgar_1;\r\n        form.apgar5 = data.apgar_5;\r\n        form.apgar10 = data.apgar_10;\r\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\r\n        form.admissionToNicu = data.admission_to_nicu;\r\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\r\n        form.liveBornFetus = data.live_born_fetus; // todo after service\r\n        form.sexFetus = data.sex_fetus; // todo after service\r\n    };\r\n\r\n    const loading = ref(false);\r\n    const toast = useToast();\r\n    const _save = () => {\r\n        loading.value = true;\r\n        let payload = {\r\n            patientId: store.state.artCycle.patient.id,\r\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\r\n            patient_notes: form.patientNotes,\r\n            born_consent_flag: form.bornConsentFlag,\r\n            pgt_a_is_planned: form.pgtAIsPlanned,\r\n            patient_history_notes: form.patientHistoryNotes,\r\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\r\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\r\n            stimulation_notes: form.stimulationNotes,\r\n            sperm_collection_notes: form.spermCollectionNotes,\r\n            embryology_notes: form.embryologyNotes,\r\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\r\n            rec_test_biopsy_result: form.recTestBiopsyResult,\r\n            transfer_notes: form.transferNotes,\r\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\r\n            estimated_date_of_birth: form.estimatedDateOfBirth\r\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\r\n                : null,\r\n            gestational_age: form.gestationalAge,\r\n            complications_of_pregnancy: form.complicationsOfPregnancy,\r\n            maternal_health_conditions: form.maternalHealthConditions,\r\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\r\n            hypertension_disorder: form.hypertensionDisorder,\r\n            type_of_labour: form.typeOfLabour,\r\n            augmentation: form.augmentation,\r\n            methods_of_induction: form.methodsOfInduction,\r\n            type_of_delivery: form.typeOfDelivery,\r\n            all_indications_of_labour: form.allIndicationsOfLabour,\r\n            cervical_ripening: form.cervicalRipening,\r\n            all_indications_caesarean: form.allIndicationsCaesarean,\r\n            labour_birth_complications: form.labourBirthComplications,\r\n            maternal_outcome: form.maternalOutcome,\r\n            birth_weight: form.birthWeight,\r\n            congenital_anomalies: form.congenitalAnomalies,\r\n            neonatal_death: form.neonatalDeath,\r\n            apgar_1: form.apgar1,\r\n            apgar_5: form.apgar5,\r\n            apgar_10: form.apgar10,\r\n            neonatal_birth_complications: form.neonatalBirthComplications,\r\n            admission_to_nicu: form.admissionToNicu,\r\n            notes_on_birth_outcome: form.notesOnBirthOutcome,\r\n            preExistingMentalHealthCondition:\r\n                form.preExistingMentalHealthCondition,\r\n            sex_fetus: form.sexFetus,\r\n            live_born_fetus: form.liveBornFetus\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/saveBornExtra\", payload)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .catch(() => {})\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    return {\r\n        form,\r\n        loading,\r\n        v$,\r\n        save,\r\n        fillForm,\r\n        getBornExtra,\r\n        medicationForCOS,\r\n        medicationForCOSContainFSHOrLhOrFshPlusLH\r\n    };\r\n}\r\n\r\nexport function useBornFieldOptions() {\r\n    const store = useStore();\r\n    const complicationsOfPregnancyOptions = computed(\r\n        () => store.state.options.complicationsOfPregnancy\r\n    );\r\n\r\n    const metarnalHealthConditionOptions = computed(\r\n        () => store.state.options.maternalHealthConditions\r\n    );\r\n\r\n    const diabetesAndPregnancyOptions = reactive([\r\n        {\r\n            value: \"None\",\r\n            label: \"None\"\r\n        },\r\n        {\r\n            value: \"Gestational | Insulin\",\r\n            label: \"Gestational | Insulin\"\r\n        },\r\n        {\r\n            value: \"Gestational | No Insulin\",\r\n            label: \"Gestational | No Insulin\"\r\n        },\r\n        {\r\n            value: \"Gestational | Insulin Status Unknown\",\r\n            label: \"Gestational | Insulin Status Unknown\"\r\n        },\r\n        {\r\n            value: \"Type I\",\r\n            label: \"Type I\"\r\n        },\r\n        {\r\n            value: \"Type II | Insulin\",\r\n            label: \"Type II | Insulin\"\r\n        },\r\n        {\r\n            value: \"Type II | No Insulin\",\r\n            label: \"Type II | No Insulin\"\r\n        },\r\n        {\r\n            value: \"Type Unknown\",\r\n            label: \"Type Unknown\"\r\n        },\r\n        {\r\n            value: \"Declined testing\",\r\n            label: \"Declined testing\"\r\n        },\r\n        {\r\n            value: \"Unknown\",\r\n            label: \"Unknown\"\r\n        }\r\n    ]);\r\n\r\n    const hypertensionDisorderOptions = reactive([\r\n        {\r\n            value: \"None\",\r\n            label: \"None\"\r\n        },\r\n        {\r\n            value: \"Gestational Hypertension\",\r\n            label: \"Gestational Hypertension\"\r\n        },\r\n        {\r\n            value: \"Preeclampsia\",\r\n            label: \"Preeclampsia\"\r\n        },\r\n        {\r\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\r\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\r\n        },\r\n        {\r\n            value: \"HELLP Syndrome\",\r\n            label: \"HELLP Syndrome\"\r\n        },\r\n        {\r\n            value: \"Eclampsia\",\r\n            label: \"Eclampsia\"\r\n        },\r\n        {\r\n            value: \"Unknown\",\r\n            label: \"Unknown\"\r\n        }\r\n    ]);\r\n\r\n    const typeOfLabourOptions = computed(\r\n        () => store.state.options.typeOfLabour\r\n    );\r\n\r\n    const augmentationOptions = computed(\r\n        () => store.state.options.augmentation\r\n    );\r\n\r\n    const methodsOfInductionOptions = computed(\r\n        () => store.state.options.methodsOfInduction\r\n    );\r\n\r\n    const typeOfDeliveryOptions = computed(\r\n        () => store.state.options.typeOfDelivery\r\n    );\r\n\r\n    const cervicalRipeningOptions = computed(\r\n        () => store.state.options.cervicalRipening\r\n    );\r\n\r\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\r\n\r\n    const neonatalBirthComplicationsOptions = computed(\r\n        () => store.state.options.newbornComplications\r\n    );\r\n\r\n    const indicationLabourOptions = computed(\r\n        () => store.state.options.allIndicationsOfLabour\r\n    );\r\n\r\n    const indicationCaesareanOptions = computed(\r\n        () => store.state.options.allIndicationsCaesarean\r\n    );\r\n\r\n    const labourBirthComplicationsOptions = computed(\r\n        () => store.state.options.labourBirthComplications\r\n    );\r\n\r\n    const maternalOutcomeOptions = computed(\r\n        () => store.state.options.maternalOutcome\r\n    );\r\n\r\n    const medicationForCOSOptions = computed(\r\n        () => store.state.options.medicationAdministraionPriorCOS\r\n    );\r\n\r\n    return {\r\n        complicationsOfPregnancyOptions,\r\n        metarnalHealthConditionOptions,\r\n        diabetesAndPregnancyOptions,\r\n        hypertensionDisorderOptions,\r\n        typeOfLabourOptions,\r\n        augmentationOptions,\r\n        methodsOfInductionOptions,\r\n        typeOfDeliveryOptions,\r\n        cervicalRipeningOptions,\r\n        apgarOptions,\r\n        neonatalBirthComplicationsOptions,\r\n        indicationLabourOptions,\r\n        indicationCaesareanOptions,\r\n        labourBirthComplicationsOptions,\r\n        maternalOutcomeOptions,\r\n        medicationForCOSOptions\r\n    };\r\n}\r\n","const { helpers } = require(\"@vuelidate/validators\");\r\n\r\nconst DATE_REGEX = /^((0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|20)?[0-9]{2})*$/;\r\n\r\nexport const validDate = helpers.withMessage(\r\n    \"Date format is not valid\",\r\n    (value) => {\r\n        if (value == null) return true;\r\n        if (value instanceof Date) return true;\r\n        return DATE_REGEX.match(value);\r\n    }\r\n);\r\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n"],"sourceRoot":""}