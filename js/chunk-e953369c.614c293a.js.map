{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js","webpack:///./node_modules/core-js/modules/es.array.join.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","hasBornCSVPermission","readPermission","spermTooLowCountValidator","complications","helpers","withParams","length","includes","req","typeOfPregnancyValidator","embryoTransfer","fetalSacsUSValidator","param","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","treatmentOutcomeValidator","cycleCancelled","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","validator","withMessage","dependentOn","_save","join","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","spermOriginValidator","oocytesInseminatedInjected","cyccleType","CycleType","EGG_FREEZING","FET","spermSourceValidator","isIVForFETCycle","spermCountValidator","semenVolumeValidator","spermOrigin","spermSource","intersection","freshSpermOrigins","filter","oocyteOriginValidator","cycleType","retrievedOrThawedValidator","oocyteCryoPreservedValidator","donorProviderSatusValidator","oocyteOrigin","console","log","OOCYTE_ORIGIN","FRESH_DONOR_OOCYTES","FROZEN_DONOR_OOCYTES","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","donorProviderstatus","oocyteCryoMethod","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","TIME_0","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","cycleDate","reasonsForTreatmentCycleValidtor","useObstetricalHistoryFormInit","priorBirths","priorPregnancies","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","pgtAPlanned","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","noOfDaysGonadotropinsValidator","medicationForCOS","FSH_VALIDATORS_MEDICATION_FOR_COS","totalDoseFSHValidator","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","mediAdminisPriorCosValidator","cycle","totalDoseRekovelleMcgValidator","FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS","progesterOneLevelValidator","reasonCancelledValidator","reasonCancelledDescValidator","ofFolliclesGt15mmValidator","ofFolliclesLt15mmValidator","medicationForCOSValidator","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","TYPE_OF_STIMULATION_PROTOCOL_DEFAULT","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","ADJUVANT_MEDICATION_DEFAULTS","otherAdjuvantMediDescription","triggerMedication","TRIGGER_MEDICATION_DEFAULTS","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","cycleStopped","totalDoseRekovelleMcg","mediAdminisPriorCos","otherMediPriorCosDesc","minValue","maxValue","patient","age","cycleStoppped","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","medicationAdministraionPriorToCosOptions","medicationAdministraionPriorToCos","reasonCancelledOptions","adjuvantMedicationOptions","useBornMarkAsComplete","markAsComplete","source","payload","patientId","id","cycleId","$axios","post","embryoTransferValidator","cancel","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","utilizableEmbryos","embryosCryopreserved","utilizableAfterThaw","_utilizableEmbryos","_utilizableAfterThaw","_embryosCryopreserved","calc","SOURCE_TRANSFERRED_EMBRYOS_NOT_FET","sourceTransferredEmbryosValidationMessage","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","elem","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","intersections","TRANSFERRED_EMBRYO_SOURCE_FROZENS","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","endometrialReceptivityTest","getDefaultEndometrialThickness","items","cycleMonitoring","lines","etUs","thickness","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","oocytesRetrieved","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","embryoStageFreezingValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","embryosThawed","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","embryoFreezeDate1Validator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","reasonEmbryoCryopreservation","embryoFreshCryoMethod","emitter","emit","fillFormDefault","getDeafultDataByPrimaryCycle","getFreshEbmryo","resp","status","freshEmbryos","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","cycleIds","cyclesSummary","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","embryoStageThawingOptions","embryoFrozenCryoMethodOptions","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","liveBornFetus","sexFetus","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","live_born_fetus","sex_fetus","preExistingMentalHealthCondition","useBornFieldOptions","complicationsOfPregnancyOptions","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","newbornComplications","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS","$","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","Object","STRICT_METHOD","target","proto","forced","separator","call","this","undefined"],"mappings":"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","file":"js/chunk-e953369c.614c293a.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    const hasBornCSVPermission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => item.appKey === \"born-csv\"\n        );\n\n        if (idx > 0) {\n            return store.state.user.permissions[idx].readPermission;\n        }\n        return false;\n    });\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission,\n        hasBornCSVPermission\n    };\n}\n","import { CycleType, DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport {\n    ADJUVANT_MEDICATION_DEFAULTS,\n    CYCLE_START_DATE_JAN_19,\n    FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS,\n    FSH_VALIDATORS_MEDICATION_FOR_COS,\n    OOCYTE_ORIGIN,\n    RADIO_NO,\n    RADIO_YES,\n    TIME_0,\n    TRANSFERRED_EMBRYO_SOURCE_FROZENS,\n    TRIGGER_MEDICATION_DEFAULTS,\n    TYPE_OF_STIMULATION_PROTOCOL_DEFAULT\n} from \"@/constants\";\nimport { getFreshEbmryo } from \"@/service/born\";\nimport { emitter } from \"@/event-bus\";\nimport { $axios } from \"@/service/app-http\";\n\nconst spermTooLowCountValidator = (complications) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (complications.value.length == 0) {\n            return true;\n        }\n\n        if (complications.value.includes(\"None\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst typeOfPregnancyValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return value === \"Not Pregnant\";\n        }\n\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst fetalSacsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == null ||\n            param.typeOfPregnancy == \"Biochemical\" ||\n            param.typeOfPregnancy == \"Not Pregnant\" ||\n            param.typeOfPregnancy == \"Unknown\"\n        ) {\n            return true;\n        }\n\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\"\n        ) {\n            return parseInt(value) > 0;\n        }\n\n        if (param.typeOfPregnancy == \"Ectopic\") {\n            return parseInt(value) >= 0;\n        }\n\n        return true;\n    });\n\nconst fetalheartsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\n                typeOfPregnancy.value == \"Heterotopic\") &&\n            parseInt(fetalheartsUS.value) >= 2\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst treatmentOutcomeValidator = (embryoTransfer, cycleCancelled) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\" || cycleCancelled.value == \"yes\") {\n            return value == \"Cycle not completed to transfer\" || value == null;\n        }\n\n        return true;\n    });\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const confirm = useConfirm();\n\n    const form = reactive({\n        complications: [],\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\n\n    const fillForm = (data) => {\n        form.complications = data.complications ? data.complications : [];\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n        if (data.treatmentOutcome != null) {\n            form.treatmentOutcome = data.treatmentOutcome;\n        }\n        if (data.typeOfPregnancy != null) {\n            form.typeOfPregnancy = data.typeOfPregnancy;\n        }\n    };\n\n    const rule = {\n        complications: {\n            required\n        },\n        spermTooLowCount: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermTooLowCountValidator(computed(() => form.complications))\n            )\n        },\n        typeOfPregnancy: {\n            validator: helpers.withMessage(\n                \"Value Required if embryo transfer is yes & must be Not Pregnent if embryo transfer is no\",\n                typeOfPregnancyValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer)\n                )\n            )\n        },\n        fetalSacsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalSacsUSValidator(form)\n            )\n        },\n        fetalheartsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalheartsUSValidator(form)\n            )\n        },\n        chorionicity: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        electiveFetalReduction: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        treatmentOutcome: {\n            validator: helpers.withMessage(\n                \"Value Must be Cycle not completed to transfer or null\",\n                treatmentOutcomeValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer),\n                    computed(() => store.state.born.dependentOn.cycleCancelled)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            complications: form.complications.join(\",\"),\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fetalSacsUSWarning = ref();\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        confirm,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nconst newbornDateBirthValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst pregnancyLossDateValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050890\" ||\n            form.pregnancyBirthOutcome == \"1050900\" ||\n            form.pregnancyBirthOutcome == \"1050910\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst babiesbornValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                pregnancyLossDateValidator(form)\n            )\n        },\n        newbornDateBirth: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                newbornDateBirthValidator(form)\n            )\n        },\n        babiesborn: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                babiesbornValidator(form)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: form.newbornDateBirth\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\n                : null,\n            pregnancyLossDate: form.pregnancyLossDate\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\n                : null\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermOriginValidator = (oocytesInseminatedInjected, cyccleType) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (\n            cyccleType.value == CycleType.EGG_FREEZING ||\n            cyccleType.value == CycleType.FET\n        ) {\n            return true;\n        }\n\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermSourceValidator = (oocytesInseminatedInjected, cyccleType) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (\n            cyccleType.value == CycleType.EGG_FREEZING ||\n            cyccleType.value == CycleType.FET\n        ) {\n            return true;\n        }\n\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        return true; // temp for now\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // return true; // temp for now\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermCountValidator = (spermTooLowCount) =>\n    helpers.withParams({ type: \"spermTooLowCond\" }, (value) => {\n        if (spermTooLowCount.value == \"N\") {\n            return value >= 1 && value <= 999;\n        }\n        return true;\n    });\n\nconst semenVolumeValidator = (spermOrigin, spermSource, cyccleType) =>\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\n        if (cyccleType.value == \"Egg Freezing\") return true;\n\n        let intersection = [];\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\n        intersection = spermOrigin.value.filter((item) =>\n            freshSpermOrigins.includes(item)\n        );\n\n        if (spermSource.value == \"SSRC001\" && intersection.length > 0) {\n            return helpers.req(value) && value >= 0.1 && value <= 15;\n        }\n\n        return true;\n    });\n\nconst oocyteOriginValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == CycleType.FET) {\n            return true;\n        }\n        return helpers.req(value);\n    });\n\nconst retrievedOrThawedValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == CycleType.FET) {\n            return true;\n        }\n        return helpers.req(value);\n    });\n\nconst oocyteCryoPreservedValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == CycleType.FET) {\n            return true;\n        }\n        return helpers.req(value);\n    });\n\nconst donorProviderSatusValidator = (oocyteOrigin) =>\n    helpers.withParams({ type: \"oocyteOrigin\" }, (value) => {\n        console.log(oocyteOrigin.value);\n        if (\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FRESH_DONOR_OOCYTES) ||\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FROZEN_DONOR_OOCYTES)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isIVForFETCycle(store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        oocyteCryoPreserved: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                oocyteCryoPreservedValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        oocyteCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermOrigin: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermOriginValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    ),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        spermSource: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermSourceValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    ),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        oocyteFreezeDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermCount: {\n            validator: helpers.withMessage(\n                \"Value must be between 1 to 999\",\n                spermCountValidator(computed(() => form.spermTooLowCount))\n            )\n        },\n        oocyteOrigin: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                oocyteOriginValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        retrievedOrThawed: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                retrievedOrThawedValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        semenVolume: {\n            validator: helpers.withMessage(\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\n                'Fresh partner sperm' or 'Fresh own sperm'\n                and SpermSource = 'Semen'.\n                Range: 0.1 - 15 mL.`,\n                semenVolumeValidator(\n                    computed(() => form.spermOrigin),\n                    computed(() => form.spermSource),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        donorProviderstatus: {\n            validator: helpers.withMessage(\n                \"Value required\",\n                donorProviderSatusValidator(computed(() => form.oocyteOrigin))\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: form.oocyteCollectionDate\n                ? format(\n                      new Date(form.oocyteCollectionDate),\n                      DATE_FORMAT_STRING\n                  )\n                : null,\n            oocyteThawDate: form.oocyteThawDate\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\n                : null,\n            oocyteFreezeDate: form.oocyteFreezeDate\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\n                : null,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate + TIME_0)\n            : null;\n        form.oocyteThawDate = data.oocyteThawDate\n            ? new Date(data.oocyteThawDate + TIME_0)\n            : null;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate\n            ? new Date(data.oocyteFreezeDate + TIME_0)\n            : null;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n\n        if (store.state.artCycle.selectedCycle.cycleType != \"Egg Freezing\") {\n            form.spermOrigin = data.spermOrigin;\n            form.ageSpermProvider = data.ageSpermProvider;\n            form.spermDonorID = data.spermDonorID;\n            form.spermDonorStatus = data.spermDonorStatus;\n            form.spermMotility = data.spermMotility;\n            form.spermTooLowCount = data.spermTooLowCount;\n            form.spermDonorBank = data.spermDonorBank;\n            form.spermSource = data.spermSource;\n            form.semenVolume = data.semenVolume;\n            form.spermCount = data.spermCount;\n        }\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.reasonsForTreatmentCycle.includes(\"TCR004\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst provincialFundingValidator = (cycleDate) =>\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst reasonsForTreatmentCycleValidtor = (value) => {\n    return value.length > 0;\n};\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: 0,\n        priorETsOwnOocytes: 0,\n        priorETsDonorOocytes: 0,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: [],\n        reasonsForMaleFactor: [],\n        pgtAPlanned: null\n    });\n\n    const rules = {\n        priorBirths: {\n            required\n        },\n        typeOfFunding: {\n            validator: requiredIfprovincialFundingIsYes(form)\n        },\n        priorPregnancies: { required },\n        reasonsForMaleFactor: {\n            validator: helpers.withMessage(\n                \"Required when Reason for treatment cycle is male\",\n                requiredIfReasonsForTreatmentCycleIsMaleFactor(form)\n            )\n        },\n        provincialFundingForThisCycle: {\n            validator: provincialFundingValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        reasonsForTreatmentCycle: {\n            validator: helpers.withMessage(\n                \"At least one value is requred\",\n                reasonsForTreatmentCycleValidtor\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted\n            ? data.priorFreshCyclesStarted\n            : 0;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes\n            ? data.priorETsOwnOocytes\n            : 0;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes\n            ? data.priorETsDonorOocytes\n            : 0;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle\n            ? data.reasonsForTreatmentCycle\n            : [];\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor\n            ? data.reasonsForMaleFactor\n            : [];\n        form.pgtAPlanned = data.pgtAPlanned ? data.pgtAPlanned : \"N\";\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst noOfDaysGonadotropinsValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\n        let intersection = [];\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\n            medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseFSHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\n        let intersection = [];\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\n            medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) >= 50 &&\n                parseInt(value) <= 30000\n            );\n        }\n\n        return true;\n    });\n\nconst totalDoseLHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return (\n                helpers.req(value) &&\n                parseFloat(value) >= 200 &&\n                parseFloat(value) <= 400\n            );\n        }\n\n        return true;\n    });\n\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\n            return helpers.req(value) && value > 0 && value <= 50;\n        }\n\n        if (value != null) {\n            return value > 0 && value <= 50;\n        }\n\n        return true;\n    });\n\nconst mediAdminisPriorCosValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cycleType == \"FET\" ||\n            cycle.value.cycleType == \"FOIVF\"\n        ) {\n            return true;\n        }\n\n        if (new Date(cycle.value.cycleDate) > new Date(\"2022-01-01\")) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\"];\n        let intersection = [];\n        intersection = FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS.filter(\n            (item) => medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst progesterOneLevelValidator = (value) => {\n    if (value == null) return true;\n    else {\n        return value > 0 && value <= 31.4;\n    }\n};\n\nconst reasonCancelledValidator = (cycleCancelled) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (cycleCancelled.value == \"no\") {\n            return value.length == 0;\n        } else {\n            return value.length > 0;\n        }\n    });\n\nconst reasonCancelledDescValidator = (cycleCancelled) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        return true;\n        if (cycleCancelled.value == \"no\") {\n            return value == \"\" || value == null;\n        } else {\n            return helpers.req(value);\n        }\n    });\n\nconst ofFolliclesGt15mmValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == \"FET\") return true;\n        return helpers.req(value) && value > 0 && value <= 25;\n    });\n\nconst ofFolliclesLt15mmValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == \"FET\") return true;\n        return helpers.req(value);\n    });\n\nconst medicationForCOSValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == \"FET\") return true;\n        return helpers.req(value);\n    });\n\n// const ofFolliclesGt15mmValidator = (cycleType) =>\n//     helpers.withParams({ type: \"cycleType\" }, (value) => {\n//         console.log(value);\n//         return helpers.req(value) && value > 0 && value <= 25;\n//     });\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: TYPE_OF_STIMULATION_PROTOCOL_DEFAULT,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: ADJUVANT_MEDICATION_DEFAULTS,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: TRIGGER_MEDICATION_DEFAULTS,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: \"no\",\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null,\n        cycleStopped: \"N\",\n        totalDoseRekovelleMcg: null,\n        mediAdminisPriorCos: null,\n        otherMediPriorCosDesc: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        hightOfOocyteHight: {\n            minValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                minValue(90)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                maxValue(240)\n            )\n        },\n        weightOfOocyte: {\n            minValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                minValue(25)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                maxValue(227)\n            )\n        },\n        noOfDaysGonadotropins: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                noOfDaysGonadotropinsValidator(\n                    computed(() => form.medicationForCOS)\n                )\n            )\n        },\n        totalDoseFSH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 50 and 30000\",\n                totalDoseFSHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        medicationForCOS: {\n            validator: helpers.withMessage(\n                \"Value required\",\n                medicationForCOSValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        totalDoseLH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 200 and 400\",\n                totalDoseLHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        afcOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                afcOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        amhLevelOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required & must be between 0 to 50\",\n                amhLevelOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        mediAdminisPriorCos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                mediAdminisPriorCosValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        totalDoseRekovelleMcg: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                totalDoseRekovelleMcgValidator(\n                    computed(() => form.medicationForCOS)\n                )\n            )\n        },\n        progesterOneLevel: {\n            validator: helpers.withMessage(\n                \"Value must be in range of 0 to 31.4 & value has to be multiplied by 3.18\",\n                progesterOneLevelValidator\n            )\n        },\n        estradiolLevel: {\n            minValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                minValue(0)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                maxValue(40000)\n            )\n        },\n        reasonCancelled: {\n            validator: helpers.withMessage(\n                \"Value must be empty if cycle cancelled is no\",\n                reasonCancelledValidator(\n                    computed(() => form.cycleCancelledBeforeRetrieval)\n                )\n            )\n        },\n        otherReasonCanDesc: {\n            validator: helpers.withMessage(\n                \"Value must be empty if cycle cancelled is no\",\n                reasonCancelledDescValidator(\n                    computed(() => form.cycleCancelledBeforeRetrieval)\n                )\n            )\n        },\n        ofFolliclesGt15mm: {\n            validator: helpers.withMessage(\n                \"Value required & must between 0 ot 25\",\n                ofFolliclesGt15mmValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        ofFolliclesLs15mm: {\n            validator: helpers.withMessage(\n                \"Value required\",\n                ofFolliclesLt15mmValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                adjuvantMedication: form.adjuvantMedication.join(\",\"),\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication =\n            data.adjuvantMedication.length > 0\n                ? data.adjuvantMedication\n                : ADJUVANT_MEDICATION_DEFAULTS;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol\n            ? data.typeOfStimulationProtocol\n            : TYPE_OF_STIMULATION_PROTOCOL_DEFAULT;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication\n            ? data.triggerMedication\n            : TRIGGER_MEDICATION_DEFAULTS;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.cycleCancelledBeforeRetrieval =\n            data.cycleCancelledBeforeRetrieval == \"yes\" ? \"yes\" : \"no\";\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n        form.cycleStopped = data.cycleStoppped == \"Y\" ? \"Y\" : \"N\";\n        form.mediAdminisPriorCos = data.mediAdminisPriorCos;\n        form.totalDoseRekovelleMcg = data.totalDoseRekovelleMcg;\n        form.otherMediPriorCosDesc = data.otherMediPriorCosDesc;\n\n        if (data.endometrialThicknessFreshCycle) {\n            form.endometrialThicknessFreshCycle =\n                data.endometrialThicknessFreshCycle;\n        }\n\n        if (data.estradiolLevel) {\n            form.estradiolLevel = data.estradiolLevel;\n        }\n\n        if (data.progesterOneLevel) {\n            form.progesterOneLevel = data.progesterOneLevel;\n        }\n\n        if (data.totalDoseLH) {\n            form.totalDoseLH = data.totalDoseLH;\n        }\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const medicationAdministraionPriorToCosOptions = computed(\n        () => store.state.options.medicationAdministraionPriorToCos\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        medicationAdministraionPriorToCosOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nexport function useBornMarkAsComplete() {\n    const store = useStore();\n    const toast = useToast();\n\n    const markAsComplete = async (source) => {\n        const payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            source\n        };\n\n        try {\n            const { data } = await $axios.post(\n                \"born/mark-as-complete\",\n                payload\n            );\n\n            toast.add({\n                severity: \"success\",\n                summary: \"Sucess\",\n                detail: \"Mark as completed\",\n                life: 3000\n            });\n        } catch (err) {\n            toast.add({\n                severity: \"warn\",\n                summary: \"Error\",\n                detail: \"An Error occured\",\n                life: 3000\n            });\n        }\n    };\n\n    return {\n        markAsComplete\n    };\n}\n\nconst embryoTransferValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cancel == false ||\n            cycle.value.cyccleType == \"FET\" ||\n            cycle.value.cyccleType == \"FOIVF\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\nconst isEbryoTrasferNo = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isEbryoTrasferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preparationUterineLiningValidator = (cycleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst transferDateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst dateETAdjustedValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst assistedZonaHatchingValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst embryosTransferredValidator = (\n    embryoTransfer,\n    utilizableEmbryos,\n    embryosCryopreserved,\n    utilizableAfterThaw\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        let _utilizableEmbryos =\n            utilizableEmbryos.value != null\n                ? parseInt(utilizableEmbryos.value)\n                : 0;\n        let _utilizableAfterThaw =\n            utilizableAfterThaw.value != null\n                ? parseInt(utilizableAfterThaw.value)\n                : 0;\n        let _embryosCryopreserved =\n            embryosCryopreserved.value != null\n                ? parseInt(embryosCryopreserved.value)\n                : 0;\n\n        let calc =\n            _utilizableEmbryos + _utilizableAfterThaw - _embryosCryopreserved;\n\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value) && parseInt(value) <= calc;\n        }\n        return true;\n    });\n\nconst SOURCE_TRANSFERRED_EMBRYOS_NOT_FET = [\n    \"TES001\",\n    \"TES002\",\n    \"TES010\",\n    \"TES011\",\n    \"TES004\"\n];\n\nconst sourceTransferredEmbryosValidationMessage = (cycleType) => {\n    if (cycleType == \"FET\") {\n        return `Value requied & value cannot be from one from those -\n            1-Fresh embryos from own oocytes-partner sperm\n            2-Fresh embryos from own oocytes-donor sperm\n            3-Fresh embryos from partner oocytes-donor sperm\n            4-Fresh embryos from donor oocytes-own sperm\n            5-Fresh embryos from donor oocytes-partner sperm\n        `;\n    }\n    return \"Valur required\";\n};\n\nconst sourceTransferredEmbryosValidator = (embryoTransfer, cyccleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            let intersection = value.filter((item) =>\n                SOURCE_TRANSFERRED_EMBRYOS_NOT_FET.includes(item)\n            );\n            if (intersection.length > 0) return false;\n        }\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst transferInseminationMethodValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\n        const intersection = freshSourceTransferredEmbryosIds.filter((elem) =>\n            [...sourceTransferredEmbryos.value].includes(elem)\n        );\n\n        if (\n            noOfEmbryosTransferred.value == 1 &&\n            intersection.length != 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingValidator = (\n    embryoTransfer,\n    cycleDate,\n    pgtAPlanned\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n\n        if (pgtAPlanned.value == \"Y\") {\n            return value == \"yes\";\n        }\n        return true;\n    });\n\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst charTransferredEmbryoValidator = (\n    noOfEmbryosTransferred,\n    preImplementationGeneticSergery,\n    cycleDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            preImplementationGeneticSergery.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        // if (\n        //     preImplementationGeneticSergery.value == \"yes\" &&\n        //     parseInt(noOfEmbryosTransferred.value) == 1 &&\n        //     new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        // ) {\n        //     return helpers.req(value);\n        // }\n        return true;\n    });\n\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (preImplGeneticTesting.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst gestationalCarrierSurrogateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // && new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n\n        let intersections = [];\n        intersections = sourceTransferredEmbryos.value.filter((item) => {\n            return TRANSFERRED_EMBRYO_SOURCE_FROZENS.includes(item);\n        });\n\n        if (intersections.length > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst endometrialThicknessValidtor = (cyccleType) =>\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: [],\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null,\n        endometrialReceptivityTest: null\n    });\n\n    const rules = {\n        embryoTransfer: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoTransferValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        reasonsNoET: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferNo(computed(() => form.embryoTransfer))\n            )\n        },\n        preparationUterineLining: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                preparationUterineLiningValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        transferDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        dateETAdjusted: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        assistedZonaHatching: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        embryosTransferred: {\n            validator: helpers.withMessage(\n                \"Value Required and value cannot be greated than (utilizableEmbryos + utilizableAfterThaw - embryosCryopreserved) \",\n                embryosTransferredValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(\n                        () => store.state.born.dependentOn.utilizableEmbryos\n                    ),\n                    computed(\n                        () => store.state.born.dependentOn.embryosCryopreserved\n                    ),\n                    computed(\n                        () => store.state.born.dependentOn.utilizableAfterThaw\n                    )\n                )\n            )\n        },\n        sourceTransferredEmbryos: {\n            validator: helpers.withMessage(\n                sourceTransferredEmbryosValidationMessage(\n                    store.state.artCycle.selectedCycle.cycleType\n                ),\n                sourceTransferredEmbryosValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        transferInseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                transferInseminationMethodValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        preImplGeneticTesting: {\n            validator: helpers.withMessage(\n                \"Value Required & must be YES if PGT A Planned is YES\",\n                preImplGeneticTestingValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(\n                        () => store.state.artCycle.selectedCycle.cycleDate\n                    ),\n                    computed(() => store.state.born.dependentOn.pgtAPlanned)\n                )\n            )\n        },\n        charTransferredEmbryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                charTransferredEmbryoValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        sitePGTembryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                sitePGTembryoValidator(\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        gestationalCarrierSurrogate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        numberThaws: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                numberThawsValidator(\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        endometrialThickness: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                endometrialThicknessValidtor(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getDefaultEndometrialThickness = () => {\n        let items = store.state.cycleMonitoring.lines.filter(\n            (item) => item.etUs != null\n        );\n\n        if (items.length == 0) return null;\n\n        let thickness = items[items.length - 1].etUs\n            ? parseFloat(items[items.length - 1].etUs)\n            : null;\n\n        return thickness;\n    };\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness\n            ? data.endometrialThickness\n            : getDefaultEndometrialThickness();\n        form.transferDate = data.transferDate\n            ? new Date(data.transferDate + \" 00:00:00\")\n            : null;\n        form.dateETAdjusted = data.dateETAdjusted ? data.dateETAdjusted : \"no\";\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos\n            ? data.sourceTransferredEmbryos\n            : [];\n        form.transferInseminationMethod = data.transferInseminationMethod;\n\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate\n            ? data.gestationalCarrierSurrogate\n            : \"no\";\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n        form.endometrialReceptivityTest = data.endometrialReceptivityTest\n            ? data.endometrialReceptivityTest\n            : \"N\";\n\n        if (store.state.born.dependentOn.pgtAPlanned == \"Y\") {\n            form.preImplGeneticTesting = \"yes\";\n        } else {\n            form.preImplGeneticTesting = data.preImplGeneticTesting\n                ? data.preImplGeneticTesting\n                : \"no\";\n        }\n    };\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions,\n        getDefaultEndometrialThickness\n    };\n}\n\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nconst oocytesNotUsedValidator = (\n    oocytesRetrieved,\n    inseminatedInjected,\n    oocytesCryopreserved,\n    cycleType\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return true;\n        } else {\n            return (\n                helpers.req(value) &&\n                parseInt(value) ==\n                    oocytesRetrieved.value -\n                        inseminatedInjected.value -\n                        oocytesCryopreserved.value\n            );\n        }\n    });\n\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (oocytesNotUsed.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n        if (noOfOocytesRetrieved.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOfOocytesRetrieved.value\n            );\n        }\n        return true;\n    });\n\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\n\nconst embryosCryopreservedValidator = (\n    noOocytesInseminatedInjected,\n    embryosThawed\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n\n        return value <= embryosThawed.value;\n    });\n\nconst reasonEmbryoCryopreservationValidator = (\n    embryosCryopreserved,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryosCryopreserved.value > 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst embryoFreezeDate1Validator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"embryosCryopreserved\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: [],\n        oocytesNotUsed: null,\n        reasonsForNoUse: [],\n        embryoStageFreezing: [],\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                inseminationMethodValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    )\n                )\n            )\n        },\n        oocytesNotUsed: {\n            validator: helpers.withMessage(\n                \"Value must be equal to oocytesRetrieved - inseminatedInjected - oocytesCryopreserved\",\n                oocytesNotUsedValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    ),\n                    computed(() => form.inseminatedInjected),\n                    computed(\n                        () => store.state.born.dependentOn.oocytesCryopreserved\n                    ),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        reasonsForNoUse: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonsForNoUseValidator(computed(() => form.oocytesNotUsed))\n            )\n        },\n        embryoStageFreezing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoStageFreezingValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        inseminatedInjected: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        normalFertilization2PN: {\n            validator: helpers.withMessage(\n                \"Value Required and must be less or equal to oocytes inseminated/injected\",\n                normalFertilization2PNValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        ofMII: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                ofMIIValidator(computed(() => form.inseminatedInjected))\n            )\n        },\n        utilizableEmbryos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                utilizableEmbryosValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        embryosCryopreserved: {\n            validator: helpers.withMessage(\n                \"Value Required & value must be less than # embryos Thawed\",\n                embryosCryopreservedValidator(\n                    computed(() => form.inseminatedInjected),\n                    computed(() => store.state.born.dependentOn.embryosThawed)\n                )\n            )\n        },\n        reasonEmbryoCryopreservation: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonEmbryoCryopreservationValidator(\n                    computed(() => form.embryosCryopreserved),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        embryoFreshCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreshCryoMethodValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        embryoFreezeDate1: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreezeDate1Validator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        let payload = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            embryoFreezeDate1: form.embryoFreezeDate1\n                ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate2: form.embryoFreezeDate2\n                ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate3: form.embryoFreezeDate3\n                ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate4: form.embryoFreezeDate4\n                ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                : null\n        };\n\n        // return;\n\n        store.dispatch(\"born/updateFreshEmbryo\", payload).then(() => {\n            toast.add({\n                severity: \"success\",\n                summary: \"\",\n                detail: \"Save Successful\",\n                life: 3000\n            });\n        });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        emitter.emit(\"fresh-embryo:on-save\");\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\n            ? new Date(data.embryoFreezeDate1 + TIME_0)\n            : null;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\n            ? new Date(data.embryoFreezeDate2 + TIME_0)\n            : null;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\n            ? new Date(data.embryoFreezeDate3 + TIME_0)\n            : null;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\n            ? new Date(data.embryoFreezeDate4 + TIME_0)\n            : null;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const fillFormDefault = (data) => {\n        if (form.inseminationMethod.length == 0)\n            form.inseminationMethod = data.inseminationMethod;\n        if (form.oocytesNotUsed == null)\n            form.oocytesNotUsed = data.oocytesNotUsed;\n        if (form.reasonsForNoUse.length == 0)\n            form.reasonsForNoUse = data.reasonsForNoUse;\n        if (form.embryoStageFreezing.length == 0)\n            form.embryoStageFreezing = data.embryoStageFreezing;\n        if (form.inseminatedInjected == null)\n            form.inseminatedInjected = data.inseminatedInjected;\n        if (form.embryoFreezeID1 == null)\n            form.embryoFreezeID1 = data.embryoFreezeID1;\n        if (form.embryoFreezeID2 == null)\n            form.embryoFreezeID2 = data.embryoFreezeID2;\n        if (form.embryoFreezeID3 == null)\n            form.embryoFreezeID3 = data.embryoFreezeID3;\n        if (form.embryoFreezeID4 == null)\n            form.embryoFreezeID4 = data.embryoFreezeID4;\n        if (form.normalFertilization2PN == null)\n            form.normalFertilization2PN = data.normalFertilization2PN;\n        if (form.embryoFreezeDate1 == null)\n            form.embryoFreezeDate1 = data.embryoFreezeDate1\n                ? new Date(data.embryoFreezeDate1 + TIME_0)\n                : null;\n        if (form.embryoFreezeDate2 == null)\n            form.embryoFreezeDate2 = data.embryoFreezeDate2\n                ? new Date(data.embryoFreezeDate2 + TIME_0)\n                : null;\n        if (form.embryoFreezeDate3 == null)\n            form.embryoFreezeDate3 = data.embryoFreezeDate3\n                ? new Date(data.embryoFreezeDate3 + TIME_0)\n                : null;\n        if (form.embryoFreezeDate4 == null)\n            form.embryoFreezeDate4 = data.embryoFreezeDate4\n                ? new Date(data.embryoFreezeDate4 + TIME_0)\n                : null;\n        if (form.ofMII == null) form.ofMII = data.ofMII;\n        if (form.utilizableEmbryos == null)\n            form.utilizableEmbryos = data.utilizableEmbryos;\n        if (form.embryosCryopreserved == null)\n            form.embryosCryopreserved = data.embryosCryopreserved;\n        if (form.reasonEmbryoCryopreservation == null)\n            form.reasonEmbryoCryopreservation =\n                data.reasonEmbryoCryopreservation;\n        if (form.embryoFreshCryoMethod == null)\n            form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const getDeafultDataByPrimaryCycle = async ({ patientId, cycleId }) => {\n        const resp = await getFreshEbmryo(patientId, cycleId);\n        if (resp.status == \"success\") {\n            fillFormDefault(resp.freshEmbryos);\n        }\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    const cycleIds = computed(() => store.state.artCycle.cyclesSummary);\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        cycleIds,\n        getDeafultDataByPrimaryCycle\n    };\n}\n\nconst isFETCycleValidator = (cyccleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoStageThawing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoFrozenCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoThawDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        donatedEmbryoFromAnotherCouple: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null,\n                embryoThawDate: form.embryoThawDate\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate + TIME_0)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate + TIME_0)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoFrozenCryoMethodOptions = computed(\n        () => store.state.options.embryoFrozenCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoFrozenCryoMethodOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\n        if (parseInt(noOfBabiesBorn.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null,\n        liveBornFetus: null,\n        sexFetus: null\n    });\n\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\n    const medicationForCOS = ref();\n\n    const rules = {\n        congenitalAnomalies: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                congenitalAnomaliesValidator(\n                    computed(() => store.state.born.dependentOn.noOfBabiesBorn)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\n            ? new Date(data.estimated_date_of_birth)\n            : null;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n        form.liveBornFetus = data.live_born_fetus; // todo after service\n        form.sexFetus = data.sex_fetus; // todo after service\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome,\n            preExistingMentalHealthCondition:\n                form.preExistingMentalHealthCondition,\n            sex_fetus: form.sexFetus,\n            live_born_fetus: form.liveBornFetus\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra,\n        medicationForCOS,\n        medicationForCOSContainFSHOrLhOrFshPlusLH\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsOfPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = computed(\n        () => store.state.options.typeOfLabour\n    );\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = computed(\n        () => store.state.options.typeOfDelivery\n    );\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = computed(\n        () => store.state.options.newbornComplications\n    );\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = computed(\n        () => store.state.options.maternalOutcome\n    );\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n"],"sourceRoot":""}