{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./node_modules/core-js/modules/es.string.trim.js","webpack:///./src/composable/born.js","webpack:///./src/composable/validator.js","webpack:///./node_modules/core-js/modules/es.array.join.js","webpack:///./node_modules/core-js/internals/string-trim-forced.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","providerNo","providerName","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","hasBornCSVPermission","readPermission","$","$trim","trim","forcedStringTrimMethod","target","proto","forced","this","spermTooLowCountValidator","complications","helpers","withParams","length","includes","req","typeOfPregnancyValidator","embryoTransfer","fetalSacsUSValidator","param","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","validator","withMessage","dependentOn","_save","join","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","oxytocinBeforeBirth","babiesborn","gestationalWeeks","gestationalDays","Date","validDate","console","log","format","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","oocyteCollectionDateValidator","semenVolumeValidator","spermOrigin","spermSource","cyccleType","intersection","freshSpermOrigins","filter","spermMotilityValidator","cycleType","CycleType","EGG_FREEZING","spermDonorIDValidator","spermDonorStatusValidator","oocyteOriginValidator","FET","retrievedOrThawedValidator","oocyteCryoPreservedValidator","donorProviderSatusValidator","oocyteOrigin","OOCYTE_ORIGIN","FRESH_DONOR_OOCYTES","FROZEN_DONOR_OOCYTES","useOocyteCollectionInit","oocyteCollectionFrom","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","donorProviderstatus","oocyteCryoMethod","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","semenVolume","spermCount","spermCollection","otherPatient","otherPrimaryCycleId","fromOutside","oocyteCollections","filteredPatient","patientFilter","event","Service","searchDemographic","term","query","sex","toLowerCase","resp","otherPrimaryCycles","getOtherPrimaryCycles","getPrimaryCyclesService","demographicNo","artCycle","selectedCycle","cycleDate","map","cycleId","onOocyteAssingedToChageHandler","patientId","patient","id","getFreshOocyte","status","fillOocyteFormDefault","freshOocyte","emptyDonor","onOtherCycleIdChangeHandler","emptyOocyteCollectionFrom","TIME_0","ppayload","primaryCycleId","otherPatientId","updatePrimaryCycle","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","reasonsForTreatmentCycleValidtor","useObstetricalHistoryFormInit","priorBirths","priorPregnancies","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","pgtAPlanned","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","noOfDaysGonadotropinsValidator","medicationForCOS","FSH_VALIDATORS_MEDICATION_FOR_COS","totalDoseFSHValidator","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","mediAdminisPriorCosValidator","cycle","totalDoseRekovelleMcgValidator","FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS","progesterOneLevelValidator","reasonCancelledValidator","cycleCancelled","reasonCancelledDescValidator","ofFolliclesGt15mmValidator","ofFolliclesLt15mmValidator","medicationForCOSValidator","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","TYPE_OF_STIMULATION_PROTOCOL_DEFAULT","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","ADJUVANT_MEDICATION_DEFAULTS","otherAdjuvantMediDescription","triggerMedication","TRIGGER_MEDICATION_DEFAULTS","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","cycleStopped","totalDoseRekovelleMcg","mediAdminisPriorCos","MEDI_ADMINIS_PRIOR_COS_DEFUALT","otherMediPriorCosDesc","minValue","maxValue","age","cycleStoppped","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","medicationAdministraionPriorToCosOptions","medicationAdministraionPriorToCos","reasonCancelledOptions","adjuvantMedicationOptions","useBornMarkAsComplete","markAsComplete","source","payload","$axios","post","embryoTransferValidator","cancel","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","utilizableEmbryos","embryosCryopreserved","utilizableAfterThaw","_utilizableEmbryos","_utilizableAfterThaw","_embryosCryopreserved","calc","SOURCE_TRANSFERRED_EMBRYOS_NOT_FET","sourceTransferredEmbryosValidationMessage","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","elem","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","intersections","TRANSFERRED_EMBRYO_SOURCE_FROZENS","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","endometrialReceptivityTest","undefined","getDefaultEndometrialThickness","items","cycleMonitoring","lines","etUs","thickness","PREPARATION_UTERINE_LINING_DEFAULT","fertilizationEmbryoThawDate","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","oocytesRetrieved","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","embryoStageFreezingValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","embryosThawed","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","embryoFreezeDate1Validator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","reasonEmbryoCryopreservation","embryoFreshCryoMethod","isParentSimulated","emitter","emit","simulated_cycle","fillFormDefault","getDeafultDataByPrimaryCycle","getFreshEbmryo","freshEmbryos","simulatedCycle","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","cycleIds","cyclesSummary","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","commit","embryoStageThawingOptions","embryoFrozenCryoMethodOptions","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","liveBornFetus","sexFetus","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","live_born_fetus","sex_fetus","preExistingMentalHealthCondition","useBornFieldOptions","complicationsOfPregnancyOptions","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","newbornComplications","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS","require","DATE_REGEX","match","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","Object","STRICT_METHOD","separator","call","fails","whitespaces","non","module","exports","METHOD_NAME"],"mappings":"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","file":"js/chunk-62632692.dc784c2a.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\r\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\r\nimport useVuelidate from \"@vuelidate/core\";\r\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\r\nimport { useStore } from \"vuex\";\r\nimport { useRoute } from \"vue-router\";\r\n\r\nexport function useUserForm(type) {\r\n    const store = useStore();\r\n    const buttonLabel = computed(() => {\r\n        if (type === FORM_TYPE.CREATE) {\r\n            return \"Save\";\r\n        }\r\n        if (type === FORM_TYPE.EDIT) {\r\n            return \"Save\";\r\n        }\r\n    });\r\n\r\n    const form = reactive({\r\n        name: null,\r\n        email: null,\r\n        username: null,\r\n        phone: null,\r\n        password: null,\r\n        passwordConfirm: null,\r\n        role: null,\r\n        active: true,\r\n        security: [],\r\n        providerNo: null,\r\n        providerName: null\r\n    });\r\n\r\n    const rules = {\r\n        name: { required },\r\n        email: { required, email },\r\n        username: { required },\r\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\r\n        passwordConfirm: {\r\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\r\n        },\r\n        security: { required }\r\n    };\r\n\r\n    const passwordDidnotMatch = computed(\r\n        () => form.password !== form.passwordConfirm\r\n    );\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n    const submitted = ref(false);\r\n\r\n    const userRoleOptions = [\r\n        { label: \"Yes\", value: \"2\" },\r\n        { label: \"No\", value: \"1\" }\r\n    ];\r\n\r\n    const groupOptions = computed(() => store.state.users.groups);\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        submitted,\r\n        buttonLabel,\r\n        userRoleOptions,\r\n        passwordDidnotMatch,\r\n        groupOptions,\r\n    };\r\n}\r\n\r\nexport function usePermissionCheck() {\r\n    const store = useStore();\r\n    const route = useRoute();\r\n\r\n    const permission = computed(() => {\r\n        const idx = store.state.user.permissions.findIndex(\r\n            (item) => `/${item.appKey}` === route.path\r\n        );\r\n        return store.state.user.permissions[idx];\r\n    });\r\n\r\n    const hasUpdatePermission = computed(\r\n        () => permission.value.updatePermission\r\n    );\r\n\r\n    const hasCreatePermission = computed(\r\n        () => permission.value.updatePermission\r\n    );\r\n\r\n    const hasDeletePermission = computed(\r\n        () => permission.value.deletePermission\r\n    );\r\n\r\n    const hasBornCSVPermission = computed(() => {\r\n        const idx = store.state.user.permissions.findIndex(\r\n            (item) => item.appKey === \"born-csv\"\r\n        );\r\n\r\n        if (idx > 0) {\r\n            return store.state.user.permissions[idx].readPermission;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    return {\r\n        hasUpdatePermission,\r\n        hasCreatePermission,\r\n        hasDeletePermission,\r\n        hasBornCSVPermission\r\n    };\r\n}\r\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.es/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","import { CycleType, DATE_FORMAT_STRING } from \"@/config\";\r\nimport format from \"date-fns/format\";\r\nimport { useConfirm } from \"primevue/useconfirm\";\r\nimport { useToast } from \"primevue/usetoast\";\r\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\r\nimport useVuelidate from \"@vuelidate/core\";\r\nimport Service from \"@/service/art-cycle.js\";\r\nimport {\r\n    getPrimaryCycles as getPrimaryCyclesService,\r\n    updatePrimaryCycle\r\n} from \"@/service/opu\";\r\nimport {\r\n    ADJUVANT_MEDICATION_DEFAULTS,\r\n    CYCLE_START_DATE_JAN_19,\r\n    FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS,\r\n    FSH_VALIDATORS_MEDICATION_FOR_COS,\r\n    MEDI_ADMINIS_PRIOR_COS_DEFUALT,\r\n    OOCYTE_ORIGIN,\r\n    PREPARATION_UTERINE_LINING_DEFAULT,\r\n    RADIO_NO,\r\n    RADIO_YES,\r\n    TIME_0,\r\n    TRANSFERRED_EMBRYO_SOURCE_FROZENS,\r\n    TRIGGER_MEDICATION_DEFAULTS,\r\n    TYPE_OF_STIMULATION_PROTOCOL_DEFAULT\r\n} from \"@/constants\";\r\nimport { getFreshEbmryo, getFreshOocyte } from \"@/service/born\";\r\nimport { emitter } from \"@/event-bus\";\r\nimport { $axios } from \"@/service/app-http\";\r\nimport { validDate } from \"@/composable/validator\";\r\n\r\nconst spermTooLowCountValidator = (complications) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (complications.value.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (complications.value.includes(\"None\")) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst typeOfPregnancyValidator = (embryoTransfer) =>\r\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\r\n        if (embryoTransfer.value == \"no\") {\r\n            return value === \"Not Pregnant\";\r\n        }\r\n\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst fetalSacsUSValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            param.typeOfPregnancy == null ||\r\n            param.typeOfPregnancy == \"Biochemical\" ||\r\n            param.typeOfPregnancy == \"Not Pregnant\" ||\r\n            param.typeOfPregnancy == \"Unknown\"\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (\r\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\r\n            param.typeOfPregnancy == \"Heterotopic\" ||\r\n            param.typeOfPregnancy == \"Molar Pregnancy\"\r\n        ) {\r\n            return parseInt(value) > 0;\r\n        }\r\n\r\n        if (param.typeOfPregnancy == \"Ectopic\") {\r\n            return parseInt(value) >= 0;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst fetalheartsUSValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\r\n            param.typeOfPregnancy == \"Heterotopic\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\r\n                typeOfPregnancy.value == \"Heterotopic\") &&\r\n            parseInt(fetalheartsUS.value) >= 2\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst treatmentOutcomeValidator = (embryoTransfer, cycleCancelled) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer.value == \"no\" || cycleCancelled.value == \"yes\") {\r\n            return value == \"Cycle not completed to transfer\" || value == null;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nexport function useComplicationFormInit() {\r\n    const toast = useToast();\r\n    const store = useStore();\r\n    const confirm = useConfirm();\r\n\r\n    const form = reactive({\r\n        complications: [],\r\n        spermTooLowCount: null,\r\n        treatmentOutcome: null,\r\n        typeOfPregnancy: null,\r\n        fetalSacsUS: null,\r\n        fetalheartsUS: null,\r\n        chorionicity: null,\r\n        electiveFetalReduction: null\r\n    });\r\n    const loading = ref(false);\r\n    const complications = computed(() => store.state.born.complications);\r\n\r\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\r\n\r\n    const fillForm = (data) => {\r\n        form.complications = data.complications ? data.complications : [];\r\n        form.spermTooLowCount = data.spermTooLowCount;\r\n        form.fetalSacsUS = data.fetalSacsUS;\r\n        form.fetalheartsUS = data.fetalheartsUS;\r\n        form.chorionicity = data.chorionicity;\r\n        form.electiveFetalReduction = data.electiveFetalReduction;\r\n        if (data.treatmentOutcome != null) {\r\n            form.treatmentOutcome = data.treatmentOutcome;\r\n        }\r\n        if (data.typeOfPregnancy != null) {\r\n            form.typeOfPregnancy = data.typeOfPregnancy;\r\n        }\r\n    };\r\n\r\n    const rule = {\r\n        complications: {\r\n            required\r\n        },\r\n        spermTooLowCount: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                spermTooLowCountValidator(computed(() => form.complications))\r\n            )\r\n        },\r\n        typeOfPregnancy: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required if embryo transfer is yes & must be Not Pregnent if embryo transfer is no\",\r\n                typeOfPregnancyValidator(\r\n                    computed(() => store.state.born.dependentOn.embryoTransfer)\r\n                )\r\n            )\r\n        },\r\n        fetalSacsUS: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                fetalSacsUSValidator(form)\r\n            )\r\n        },\r\n        fetalheartsUS: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                fetalheartsUSValidator(form)\r\n            )\r\n        },\r\n        chorionicity: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\r\n            )\r\n        },\r\n        electiveFetalReduction: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\r\n            )\r\n        },\r\n        // treatmentOutcome: {\r\n        //     validator: helpers.withMessage(\r\n        //         \"Value Must be Cycle not completed to transfer or null\",\r\n        //         treatmentOutcomeValidator(\r\n        //             computed(() => store.state.born.dependentOn.embryoTransfer),\r\n        //             computed(() => store.state.born.dependentOn.cycleCancelled)\r\n        //         )\r\n        //     )\r\n        // }\r\n    };\r\n\r\n    const v$ = useVuelidate(rule, form);\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        const data = {\r\n            ...form,\r\n            complications: form.complications.join(\",\"),\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/updateComplication\", data)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .catch((err) => {})\r\n            .finally(() => (loading.value = false));\r\n    };\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fetalSacsUSWarning = ref();\r\n\r\n    const complicationOptions = computed(\r\n        () => store.state.options.complications\r\n    );\r\n    const treatmentOutcomeOptions = computed(\r\n        () => store.state.options.treatmentOutcome\r\n    );\r\n    const typeOfPregnancyOptions = computed(\r\n        () => store.state.options.typeOfPregnancy\r\n    );\r\n    const chorionicityOptions = computed(\r\n        () => store.state.options.chorionicity\r\n    );\r\n    const electiveFetalReductionOptions = computed(\r\n        () => store.state.options.electiveFetalReduction\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        save,\r\n        v$,\r\n        complications,\r\n        fillForm,\r\n        loading,\r\n        confirm,\r\n        complicationOptions,\r\n        treatmentOutcomeOptions,\r\n        typeOfPregnancyOptions,\r\n        chorionicityOptions,\r\n        electiveFetalReductionOptions\r\n    };\r\n}\r\n\r\nconst newbornDateBirthValidator = (form) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            form.pregnancyBirthOutcome == \"1050880\" ||\r\n            form.pregnancyBirthOutcome == \"1050920\" ||\r\n            form.pregnancyBirthOutcome == \"1050930\" ||\r\n            form.pregnancyBirthOutcome == \"1050940\" ||\r\n            form.pregnancyBirthOutcome == \"1050950\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst pregnancyLossDateValidator = (form) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            form.pregnancyBirthOutcome == \"1050890\" ||\r\n            form.pregnancyBirthOutcome == \"1050900\" ||\r\n            form.pregnancyBirthOutcome == \"1050910\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst babiesbornValidator = (form) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            form.pregnancyBirthOutcome == \"1050880\" ||\r\n            form.pregnancyBirthOutcome == \"1050920\" ||\r\n            form.pregnancyBirthOutcome == \"1050930\" ||\r\n            form.pregnancyBirthOutcome == \"1050940\" ||\r\n            form.pregnancyBirthOutcome == \"1050950\"\r\n        ) {\r\n            return parseInt(value) > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function usePregnancyOutcomeForm() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const form = reactive({\r\n        pregnancyBirthOutcome: null,\r\n        newbornDateBirth: null,\r\n        pregnancyLossDate: null,\r\n        oxytocinBeforeBirth: null,\r\n        babiesborn: null,\r\n        gestationalWeeks: null,\r\n        gestationalDays: null\r\n    });\r\n    const loading = ref(false);\r\n\r\n    const fillForm = (data) => {\r\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\r\n        form.newbornDateBirth = data.newbornDateBirth ? new Date(data.newbornDateBirth) : null;\r\n        form.pregnancyLossDate = data.pregnancyLossDate ? new Date(data.pregnancyLossDate) : null;\r\n        form.oxytocinBeforeBirth = data.oxytocinBeforeBirth;\r\n        form.babiesborn = data.babiesborn;\r\n        form.gestationalWeeks = data.gestationalWeeks;\r\n        form.gestationalDays = data.gestationalDays;\r\n    };\r\n\r\n    const rules = {\r\n        pregnancyLossDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                pregnancyLossDateValidator(form)\r\n            ),\r\n            validDate\r\n        },\r\n        newbornDateBirth: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                newbornDateBirthValidator(form)\r\n            ),\r\n            validDate\r\n        },\r\n        babiesborn: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                babiesbornValidator(form)\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n\r\n        console.log(form.newbornDateBirth);\r\n        const data = {\r\n            ...form,\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n            newbornDateBirth: form.newbornDateBirth // && form.newbornDateBirth != ''\r\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\r\n                : null,\r\n            pregnancyLossDate: form.pregnancyLossDate // && form.pregnancyLossDate != ''\r\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\r\n                : null\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/updatePregnancyOutcome\", data)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .catch((err) => {})\r\n            .finally(() => (loading.value = false));\r\n    };\r\n\r\n    const confirm = useConfirm();\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const pregnancyBirthOutcomeOptions = computed(\r\n        () => store.state.options.pregnancyBirthOutcome\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        pregnancyBirthOutcomeOptions,\r\n        loading,\r\n        fillForm,\r\n        save\r\n    };\r\n}\r\n\r\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst spermOriginValidator = (oocytesInseminatedInjected, cyccleType) =>\r\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\r\n        if (\r\n            cyccleType.value == CycleType.EGG_FREEZING ||\r\n            cyccleType.value == CycleType.FET\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst spermSourceValidator = (oocytesInseminatedInjected, cyccleType) =>\r\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\r\n        if (\r\n            cyccleType.value == CycleType.EGG_FREEZING ||\r\n            cyccleType.value == CycleType.FET\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst ageSpermProviderValidator = (oocytesInseminatedInjected, cycleType) =>\r\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) {\r\n            return true;\r\n        }\r\n\r\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\r\n            return helpers.req(value) && value >= 15 && value <= 80;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst isIVForFETCycle = (param) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        return true; // temp for now\r\n        if (param == \"IVF\" || param == \"FET\") {\r\n            return value != null;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst oocyteCollectionDateValidator = (param) =>\r\n    helpers.withParams({ type: \"date\" }, (value) => {\r\n        return true; // temp for now\r\n        if (param == \"IVF\" || param == \"FET\") {\r\n            return value != null;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst isOocyteRetrivedGreaterThan0 = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        // return true; // temp for now\r\n        if (parseInt(param.retrievedOrThawed) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst spermCountValidator = (spermTooLowCount) =>\r\n    helpers.withParams({ type: \"spermTooLowCond\" }, (value) => {\r\n        if (spermTooLowCount.value == \"N\") {\r\n            return value >= 1 && value <= 999;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst semenVolumeValidator = (spermOrigin, spermSource, cyccleType) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cyccleType.value == \"Egg Freezing\") return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (spermSource.value == \"SSRC001\" && intersection.length > 0) {\r\n            return helpers.req(value) && value >= 0.1 && value <= 15;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst spermMotilityValidator = (\r\n    spermOrigin,\r\n    spermSource,\r\n    spermTooLowCount,\r\n    cycleType\r\n) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (\r\n            spermSource.value == \"SSRC001\" &&\r\n            intersection.length > 0 &&\r\n            spermTooLowCount.value != \"Y\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst spermDonorIDValidator = (spermOrigin, cycleType) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM007\", \"SPM003\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst spermDonorStatusValidator = (spermOrigin, cycleType) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM007\", \"SPM003\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst oocyteOriginValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == CycleType.FET) {\r\n            return true;\r\n        }\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst retrievedOrThawedValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == CycleType.FET) {\r\n            return true;\r\n        }\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst oocyteCryoPreservedValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == CycleType.FET) {\r\n            return true;\r\n        }\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst donorProviderSatusValidator = (oocyteOrigin) =>\r\n    helpers.withParams({ type: \"oocyteOrigin\" }, (value) => {\r\n        if (\r\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FRESH_DONOR_OOCYTES) ||\r\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FROZEN_DONOR_OOCYTES)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useOocyteCollectionInit() {\r\n    const toast = useToast();\r\n    const store = useStore();\r\n    const form = reactive({\r\n        oocyteCollectionFrom: null,\r\n        oocyteCollectionDate: null,\r\n        oocyteThawDate: null,\r\n        collectionDateUnknown: null,\r\n        oocyteFreezeID1Thawed: null,\r\n        oocyteFreezeID2Thawed: null,\r\n        retrievedOrThawed: null,\r\n        oocyteCryoPreserved: null,\r\n        oocyteFreezeID: null,\r\n        donorProviderIDCode: null,\r\n        donorProviderSource: null,\r\n        oocyteFreezeDate: null,\r\n        oocyteOrigin: null,\r\n        donorProviderstatus: null,\r\n        oocyteCryoMethod: null,\r\n        spermOrigin: null,\r\n        ageSpermProvider: null,\r\n        spermDonorID: null,\r\n        spermDonorStatus: null,\r\n        spermMotility: null,\r\n        spermTooLowCount: null,\r\n        spermDonorBank: null,\r\n        spermSource: null,\r\n        semenVolume: null,\r\n        spermCount: null,\r\n        spermCollection: null,\r\n        otherPatient: null,\r\n        otherPrimaryCycleId: null,\r\n        fromOutside: false\r\n    });\r\n    const oocyteCollections = computed(\r\n        () => store.state.born.oocyteCollections\r\n    );\r\n\r\n    const filteredPatient = ref();\r\n    const patientFilter = (event) => {\r\n        Service.searchDemographic({\r\n            term: event.query.trim(),\r\n            sex: \"F\".toLowerCase()\r\n        }).then((resp) => {\r\n            filteredPatient.value = resp.data;\r\n        });\r\n    };\r\n\r\n    const otherPrimaryCycles = ref([]);\r\n\r\n    const getOtherPrimaryCycles = async () => {\r\n        const data = await getPrimaryCyclesService(\r\n            form.otherPatient.demographicNo,\r\n            store.state.artCycle.selectedCycle.cycleDate\r\n        );\r\n        if (data.length > 0) {\r\n            otherPrimaryCycles.value = data.map((item) => ({\r\n                ...item,\r\n                label: `${item.cycleId} (${item.cycleDate})`\r\n            }));\r\n        }\r\n    };\r\n\r\n\r\n    const onOocyteAssingedToChageHandler = async (event) => {\r\n        let patientId = store.state.artCycle.patient.id;\r\n        let cycleId = event.value;\r\n\r\n        const resp = await getFreshOocyte(patientId, cycleId);\r\n        if (resp.status == \"success\") {\r\n            fillOocyteFormDefault(resp.freshOocyte);\r\n        } \r\n\r\n        // form.isParentSimulated = resp.simulatedCycle;\r\n        emptyDonor();\r\n    };\r\n\r\n    const onOtherCycleIdChangeHandler = async (event) => {\r\n        let patientId = null;\r\n\r\n        if (form.otherPatient != null) {\r\n            patientId = form.otherPatient.demographicNo;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        let cycleId = event.value;\r\n\r\n        const resp = await getFreshOocyte(patientId, cycleId);\r\n        if (resp.status == \"success\") {\r\n            fillOocyteFormDefault(resp.freshOocyte);\r\n        } \r\n\r\n        // form.isParentSimulated = resp.simulatedCycle;\r\n        emptyOocyteCollectionFrom();\r\n    };\r\n\r\n\r\n    const emptyOocyteCollectionFrom = () => {\r\n        form.oocyteCollectionFrom = null;\r\n    };\r\n\r\n    const emptyDonor = (event) => {\r\n        // getDefaultFreshEbmryo(event.value);\r\n        form.otherPatient = null;\r\n        form.otherPrimaryCycleId = null;\r\n    };\r\n\r\n    \r\n\r\n    const fillOocyteFormDefault = (data) => {    \r\n        if (form.oocyteCollectionDate == null)\r\n            form.oocyteCollectionDate = data.oocyteCollectionDate\r\n                ? new Date(data.oocyteCollectionDate + TIME_0)\r\n                : null;\r\n        if (form.oocyteThawDate == null)\r\n            form.oocyteThawDate = data.oocyteThawDate\r\n                ? new Date(data.oocyteThawDate + TIME_0)\r\n                : null;           \r\n        if (form.oocyteFreezeID1Thawed == null)\r\n            form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\r\n        if (form.oocyteFreezeID2Thawed == null)\r\n            form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\r\n        if (form.retrievedOrThawed == null)\r\n            form.retrievedOrThawed = data.retrievedOrThawed;\r\n        if (form.oocyteCryoPreserved == null)\r\n            form.oocyteCryoPreserved = data.oocyteCryoPreserved;\r\n        if (form.oocyteFreezeID == null)\r\n            form.oocyteFreezeID = data.oocyteFreezeID;\r\n        if (form.donorProviderIDCode == null)\r\n            form.donorProviderIDCode = data.donorProviderIDCode;\r\n        if (form.donorProviderSource == null)\r\n            form.donorProviderSource = data.donorProviderSource;\r\n        if (form.oocyteFreezeDate == null)\r\n            form.oocyteFreezeDate = data.oocyteFreezeDate\r\n                ? new Date(data.oocyteFreezeDate + TIME_0)\r\n                : null; \r\n        if (form.oocyteOrigin.length == 0)\r\n            form.oocyteOrigin = data.oocyteOrigin;\r\n        if (form.donorProviderstatus.length == 0)\r\n            form.donorProviderstatus = data.donorProviderstatus;\r\n        if (form.oocyteCryoMethod == null)\r\n            form.oocyteCryoMethod = data.oocyteCryoMethod;\r\n        if (form.spermOrigin && form.spermOrigin.length == 0)\r\n            form.spermOrigin = data.spermOrigin;\r\n        if (form.ageSpermProvider == null)\r\n            form.ageSpermProvider = data.ageSpermProvider;\r\n        if (form.spermDonorID == null)\r\n            form.spermDonorID = data.spermDonorID;\r\n        if (form.spermDonorStatus == null)\r\n            form.spermDonorStatus = data.spermDonorStatus; \r\n        if (form.spermMotility == null)\r\n            form.spermMotility = data.spermMotility;\r\n        if (form.spermTooLowCount == null)\r\n            form.spermTooLowCount = data.spermTooLowCount;\r\n        if (form.spermDonorBank == null)\r\n            form.spermDonorBank = data.spermDonorBank; \r\n        if (form.spermSource == null)\r\n            form.spermSource = data.spermSource;\r\n        if (form.semenVolume == null)\r\n            form.semenVolume = data.semenVolume; \r\n        if (form.spermCount == null)\r\n            form.spermCount = data.spermCount;\r\n    };\r\n\r\n    const loading = ref(false);\r\n    const rules = {\r\n        oocyteCollectionDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                oocyteCollectionDateValidator(\r\n                    store.state.artCycle.selectedCycle.cycleType\r\n                )\r\n            ),\r\n            validDate\r\n        },\r\n        oocyteThawDate: { validDate },\r\n        oocyteCryoPreserved: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                oocyteCryoPreservedValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        oocyteCryoMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isNumberOocytesCryoedIsGreaterThan0(form)\r\n            )\r\n        },\r\n        // spermOrigin: {\r\n        //     validator: helpers.withMessage(\r\n        //         \"Value Required\",\r\n        //         spermOriginValidator(\r\n        //             computed(\r\n        //                 () =>\r\n        //                     store.state.born.dependentOn\r\n        //                         .oocytesInseminatedInjected\r\n        //             ),\r\n        //             computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n        //         )\r\n        //     )\r\n        // },\r\n        // spermSource: {\r\n        //     validator: helpers.withMessage(\r\n        //         \"Value Required\",\r\n        //         spermSourceValidator(\r\n        //             computed(\r\n        //                 () =>\r\n        //                     store.state.born.dependentOn\r\n        //                         .oocytesInseminatedInjected\r\n        //             ),\r\n        //             computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n        //         )\r\n        //     )\r\n        // },\r\n        // ageSpermProvider: {\r\n        //     validator: helpers.withMessage(\r\n        //         \"Value Required\",\r\n        //         ageSpermProviderValidator(\r\n        //             computed(\r\n        //                 () =>\r\n        //                     store.state.born.dependentOn\r\n        //                         .oocytesInseminatedInjected\r\n        //             ),\r\n        //             computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n        //         )\r\n        //     )\r\n        // },\r\n        oocyteFreezeDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isNumberOocytesCryoedIsGreaterThan0(form)\r\n            ),\r\n            validDate\r\n        },\r\n        spermCount: {\r\n            validator: helpers.withMessage(\r\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\r\n                'Fresh partner sperm' or 'Fresh own sperm'\r\n                and SpermSource = 'Semen'.`,\r\n                spermMotilityValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => form.spermSource),\r\n                    computed(() => form.spermTooLowCount),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        oocyteOrigin: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                oocyteOriginValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        retrievedOrThawed: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                retrievedOrThawedValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        semenVolume: {\r\n            validator: helpers.withMessage(\r\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\r\n                'Fresh partner sperm' or 'Fresh own sperm'\r\n                and SpermSource = 'Semen'.\r\n                Range: 0.1 - 15 mL.`,\r\n                semenVolumeValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => form.spermSource),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        donorProviderstatus: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                donorProviderSatusValidator(computed(() => form.oocyteOrigin))\r\n            )\r\n        },\r\n        spermDonorID: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                spermDonorIDValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        spermDonorStatus: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                spermDonorStatusValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        spermMotility: {\r\n            validator: helpers.withMessage(\r\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\r\n                'Fresh partner sperm' or 'Fresh own sperm'\r\n                and SpermSource = 'Semen'.`,\r\n                spermMotilityValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => form.spermSource),\r\n                    computed(() => form.spermTooLowCount),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        const data = {\r\n            ...form,\r\n            oocyteCollectionDate: form.oocyteCollectionDate\r\n                ? format(\r\n                      new Date(form.oocyteCollectionDate),\r\n                      DATE_FORMAT_STRING\r\n                  )\r\n                : null,\r\n            oocyteThawDate: form.oocyteThawDate\r\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\r\n                : null,\r\n            oocyteFreezeDate: form.oocyteFreezeDate\r\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\r\n                : null,\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n        };\r\n\r\n\r\n        let ppayload = {\r\n            patientId: store.state.artCycle.patient.id,\r\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\r\n            primaryCycleId: form.oocyteCollectionFrom,\r\n            otherPatientId: form.otherPatient\r\n                        ? form.otherPatient.demographicNo\r\n                        : null,\r\n            otherPrimaryCycleId: form.otherPrimaryCycleId,\r\n            fromOutside: form.fromOutside ? 1 : 0\r\n        };\r\n\r\n\r\n        store\r\n        .dispatch(\"born/updateOocyteCollection\", data)\r\n        .then(() => {\r\n            toast.add({\r\n                severity: \"success\",\r\n                summary: \"\",\r\n                detail: \"Save Successful\",\r\n                life: 3000\r\n            });\r\n            // fillForm(store.state.born.oocyteCollections);\r\n        })\r\n        .finally(() => (loading.value = false));\r\n        \r\n        if(form.oocyteCollectionFrom || (form.otherPatient && form.otherPrimaryCycleId)) {\r\n            updatePrimaryCycle(ppayload).then((resp) => {\r\n                if (resp.status == \"success\") {\r\n                    console.log(\"success\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n    const confirm = useConfirm();\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.oocyteCollectionDate = data.oocyteCollectionDate\r\n            ? new Date(data.oocyteCollectionDate + TIME_0)\r\n            : null;\r\n        form.oocyteThawDate = data.oocyteThawDate\r\n            ? new Date(data.oocyteThawDate + TIME_0)\r\n            : null;\r\n        form.collectionDateUnknown = data.collectionDateUnknown;\r\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\r\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\r\n        form.retrievedOrThawed = data.retrievedOrThawed;\r\n        form.oocyteFreezeID = data.oocyteFreezeID;\r\n        form.donorProviderIDCode = data.donorProviderIDCode;\r\n        form.donorProviderSource = data.donorProviderSource;\r\n        form.oocyteFreezeDate = data.oocyteFreezeDate\r\n            ? new Date(data.oocyteFreezeDate + TIME_0)\r\n            : null;\r\n        form.oocyteOrigin = data.oocyteOrigin;\r\n        form.donorProviderstatus = data.donorProviderstatus;\r\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\r\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\r\n\r\n        if (store.state.artCycle.selectedCycle.cycleType != \"Egg Freezing\") {\r\n            form.spermOrigin = data.spermOrigin;\r\n            form.ageSpermProvider = data.ageSpermProvider;\r\n            form.spermDonorID = data.spermDonorID;\r\n            form.spermDonorStatus = data.spermDonorStatus;\r\n            form.spermMotility = data.spermMotility;\r\n            form.spermTooLowCount = data.spermTooLowCount;\r\n            form.spermDonorBank = data.spermDonorBank;\r\n            form.spermSource = data.spermSource;\r\n            form.semenVolume = data.semenVolume;\r\n            form.spermCount = data.spermCount;\r\n        }\r\n    };\r\n\r\n    const oocyteOriginOptions = computed(\r\n        () => store.state.options.oocyteOrigin\r\n    );\r\n    const donorProviderStatusOptions = computed(\r\n        () => store.state.options.donorProviderstatus\r\n    );\r\n    const oocyteCryoMethodOptions = computed(\r\n        () => store.state.options.oocyteCryoMethod\r\n    );\r\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\r\n    const spermOriginStatusOptions = computed(\r\n        () => store.state.options.spermDonorStatus\r\n    );\r\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        loading,\r\n        v$,\r\n        save,\r\n        fillForm,\r\n        oocyteCollections,\r\n        oocyteOriginOptions,\r\n        donorProviderStatusOptions,\r\n        oocyteCryoMethodOptions,\r\n        spermOriginOptions,\r\n        spermOriginStatusOptions,\r\n        spermSourceOptions,\r\n        onOocyteAssingedToChageHandler,\r\n        onOtherCycleIdChangeHandler,\r\n        filteredPatient,\r\n        patientFilter,\r\n        getOtherPrimaryCycles,\r\n        otherPrimaryCycles\r\n    };\r\n}\r\n\r\nconst mustBe0IfPriorPregnancies0 = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (parseInt(param.priorPregnancies) != 0) return true;\r\n        else {\r\n            return value == 0;\r\n        }\r\n    });\r\n\r\nconst requiredIfprovincialFundingIsYes = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (param.provincialFundingForThisCycle == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (param.reasonsForTreatmentCycle.includes(\"TCR004\")) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst provincialFundingValidator = (cycleDate) =>\r\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\r\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst reasonsForTreatmentCycleValidtor = (value) => {\r\n    return value.length > 0;\r\n};\r\n\r\nexport function useObstetricalHistoryFormInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n\r\n    const form = reactive({\r\n        priorBirths: null,\r\n        priorPregnancies: null,\r\n        priorFreshCyclesStarted: 0,\r\n        priorETsOwnOocytes: 0,\r\n        priorETsDonorOocytes: 0,\r\n        provincialFundingForThisCycle: null,\r\n        typeOfFunding: null,\r\n        otherSpecify: null,\r\n        originOfSimulatedCycle: null,\r\n        primaryCycle: null,\r\n        reasonsForTreatmentCycle: [],\r\n        reasonsForMaleFactor: [],\r\n        pgtAPlanned: null\r\n    });\r\n\r\n    const rules = {\r\n        priorBirths: {\r\n            required\r\n        },\r\n        typeOfFunding: {\r\n            validator: requiredIfprovincialFundingIsYes(form)\r\n        },\r\n        priorPregnancies: { required },\r\n        reasonsForMaleFactor: {\r\n            validator: helpers.withMessage(\r\n                \"Required when Reason for treatment cycle is male\",\r\n                requiredIfReasonsForTreatmentCycleIsMaleFactor(form)\r\n            )\r\n        },\r\n        provincialFundingForThisCycle: {\r\n            validator: provincialFundingValidator(\r\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n            )\r\n        },\r\n        reasonsForTreatmentCycle: {\r\n            validator: helpers.withMessage(\r\n                \"At least one value is requred\",\r\n                reasonsForTreatmentCycleValidtor\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const _save = () => {\r\n        loading.value = false;\r\n        store\r\n            .dispatch(\"born/updateObstetricalHistory\", {\r\n                ...form,\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\r\n        form.priorPregnancies = data.priorPregnancies;\r\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted\r\n            ? data.priorFreshCyclesStarted\r\n            : 0;\r\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes\r\n            ? data.priorETsOwnOocytes\r\n            : 0;\r\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes\r\n            ? data.priorETsDonorOocytes\r\n            : 0;\r\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\r\n        form.typeOfFunding = data.typeOfFunding;\r\n        form.otherSpecify = data.otherSpecify;\r\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\r\n        form.primaryCycle = data.primaryCycle;\r\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle\r\n            ? data.reasonsForTreatmentCycle\r\n            : [];\r\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor\r\n            ? data.reasonsForMaleFactor\r\n            : [];\r\n        form.pgtAPlanned = data.pgtAPlanned ? data.pgtAPlanned : \"N\";\r\n    };\r\n\r\n    const priorPregnanciesOptions = computed(\r\n        () => store.state.options.pregnancyBirthOutcome\r\n    );\r\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n    const priorFreshCyclesStartedOptions = computed(\r\n        () => store.state.options.priorFreshCyclesStarted\r\n    );\r\n    const priorETsOwnOocytesOptions = computed(\r\n        () => store.state.options.priorETsOwnOocytes\r\n    );\r\n    const priorETsDonorOocytesOptions = computed(\r\n        () => store.state.options.priorETsDonorOocytes\r\n    );\r\n    const typeOfFundingOptions = computed(\r\n        () => store.state.options.typeOfFunding\r\n    );\r\n    const reasonsForMaleFactorOptions = computed(\r\n        () => store.state.options.reasonsForMaleFactor\r\n    );\r\n    const reasonsForTreatmentCycleOptions = computed(\r\n        () => store.state.options.reasonsForTreatmentCycle\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        save,\r\n        loading,\r\n        fillForm,\r\n        priorPregnanciesOptions,\r\n        priorBirthsOptions,\r\n        priorFreshCyclesStartedOptions,\r\n        priorETsOwnOocytesOptions,\r\n        priorETsDonorOocytesOptions,\r\n        typeOfFundingOptions,\r\n        reasonsForMaleFactorOptions,\r\n        reasonsForTreatmentCycleOptions\r\n    };\r\n}\r\n\r\nconst requiredIfMedicationForCOSContains = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            param.medicationForCOS.includes(4) ||\r\n            param.medicationForCOS.includes(5) ||\r\n            param.medicationForCOS.includes(6)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst noOfDaysGonadotropinsValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\r\n        let intersection = [];\r\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\r\n            medicationForCOS.value.includes(item)\r\n        );\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst totalDoseFSHValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\r\n        let intersection = [];\r\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\r\n            medicationForCOS.value.includes(item)\r\n        );\r\n        if (intersection.length > 0) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) >= 50 &&\r\n                parseInt(value) <= 30000\r\n            );\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst totalDoseLHValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (medicationForCOS.value.includes(4)) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseFloat(value) >= 200 &&\r\n                parseFloat(value) <= 400\r\n            );\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\r\n            return helpers.req(value) && value > 0 && value <= 50;\r\n        }\r\n\r\n        if (value != null) {\r\n            return value > 0 && value <= 50;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst mediAdminisPriorCosValidator = (cycle) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            cycle.value.cycleType == \"FET\" ||\r\n            cycle.value.cycleType == \"FOIVF\"\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (new Date(cycle.value.cycleDate) > new Date(\"2022-01-01\")) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        // const medicationForCosKeys = [\"COSM016\"];\r\n        let intersection = [];\r\n        intersection = FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS.filter(\r\n            (item) => medicationForCOS.value.includes(item)\r\n        );\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst progesterOneLevelValidator = (value) => {\r\n    if (value == null) return true;\r\n    else {\r\n        return value > 0 && value <= 31.4;\r\n    }\r\n};\r\n\r\nconst reasonCancelledValidator = (cycleCancelled) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (cycleCancelled.value == \"no\") {\r\n            return value.length == 0;\r\n        } else {\r\n            return value.length > 0;\r\n        }\r\n    });\r\n\r\nconst reasonCancelledDescValidator = (cycleCancelled) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        return true;\r\n        if (cycleCancelled.value == \"no\") {\r\n            return value == \"\" || value == null;\r\n        } else {\r\n            return helpers.req(value);\r\n        }\r\n    });\r\n\r\nconst ofFolliclesGt15mmValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == \"FET\") return true;\r\n        return helpers.req(value) && value > 0 && value <= 25;\r\n    });\r\n\r\nconst ofFolliclesLt15mmValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == \"FET\") return true;\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst medicationForCOSValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == \"FET\") return true;\r\n        return helpers.req(value);\r\n    });\r\n\r\n// const ofFolliclesGt15mmValidator = (cycleType) =>\r\n//     helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n//         console.log(value);\r\n//         return helpers.req(value) && value > 0 && value <= 25;\r\n//     });\r\n\r\nexport function useOvariannFormInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n\r\n    const form = reactive({\r\n        ageOfOocyteAge: null,\r\n        hightOfOocyteHight: null,\r\n        weightOfOocyte: null,\r\n        bmiOfOocyte: null,\r\n        fshDayOocyte: null,\r\n        afcOocyte: null,\r\n        ngPMOOocyte: null,\r\n        typeOfStimulationProtocol: TYPE_OF_STIMULATION_PROTOCOL_DEFAULT,\r\n        otherTypeOfStiProtocolDes: null,\r\n        medicationForCOS: null,\r\n        otherMedicationCOS: null,\r\n        adjuvantMedication: ADJUVANT_MEDICATION_DEFAULTS,\r\n        otherAdjuvantMediDescription: null,\r\n        triggerMedication: TRIGGER_MEDICATION_DEFAULTS,\r\n        otheTriMedDesc: null,\r\n        noOfDaysGonadotropins: null,\r\n        totalDoseFSH: null,\r\n        totalDoseLH: null,\r\n        ofFolliclesLs15mm: null,\r\n        ofFolliclesGt15mm: null,\r\n        estradiolLevel: null,\r\n        progesterOneLevel: null,\r\n        endometrialThicknessFreshCycle: null,\r\n        cycleCancelledBeforeRetrieval: \"no\",\r\n        reasonCancelled: null,\r\n        otherReasonCanDesc: null,\r\n        amhLevelOocyte: null,\r\n        cycleStopped: \"N\",\r\n        totalDoseRekovelleMcg: null,\r\n        mediAdminisPriorCos: MEDI_ADMINIS_PRIOR_COS_DEFUALT,\r\n        otherMediPriorCosDesc: null\r\n    });\r\n\r\n    const rules = {\r\n        ageOfOocyteAge: {\r\n            validator: helpers.withMessage(\"Value Required\", required)\r\n        },\r\n        hightOfOocyteHight: {\r\n            validator: helpers.withMessage(\"Value Required\", required),\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 90 and 240\",\r\n                minValue(90)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 90 and 240\",\r\n                maxValue(240)\r\n            )\r\n        },\r\n        weightOfOocyte: {\r\n            validator: helpers.withMessage(\"Value Required\", required),\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 25 and 227\",\r\n                minValue(25)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 25 and 227\",\r\n                maxValue(227)\r\n            )\r\n        },\r\n        bmiOfOocyte: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 10 and 70\",\r\n                minValue(10)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 10 and 70\",\r\n                maxValue(70)\r\n            )\r\n        },\r\n        noOfDaysGonadotropins: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                noOfDaysGonadotropinsValidator(\r\n                    computed(() => form.medicationForCOS)\r\n                )\r\n            )\r\n        },\r\n        totalDoseFSH: {\r\n            validator: helpers.withMessage(\r\n                \"Value Must be between 50 and 30000\",\r\n                totalDoseFSHValidator(computed(() => form.medicationForCOS))\r\n            )\r\n        },\r\n        medicationForCOS: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                medicationForCOSValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        totalDoseLH: {\r\n            validator: helpers.withMessage(\r\n                \"Value Must be between 200 and 400\",\r\n                totalDoseLHValidator(computed(() => form.medicationForCOS))\r\n            )\r\n        },\r\n        afcOocyte: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                afcOocyteValidtor(\r\n                    computed(\r\n                        () =>\r\n                            store.state.born.dependentOn.reasonForTreatmentCycle\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        amhLevelOocyte: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required & must be between 0 to 50\",\r\n                amhLevelOocyteValidtor(\r\n                    computed(\r\n                        () =>\r\n                            store.state.born.dependentOn.reasonForTreatmentCycle\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        mediAdminisPriorCos: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                mediAdminisPriorCosValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle)\r\n                )\r\n            )\r\n        },\r\n        totalDoseRekovelleMcg: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                totalDoseRekovelleMcgValidator(\r\n                    computed(() => form.medicationForCOS)\r\n                )\r\n            )\r\n        },\r\n        progesterOneLevel: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be in range of 0 to 31.4 & value has to be multiplied by 3.18\",\r\n                progesterOneLevelValidator\r\n            )\r\n        },\r\n        estradiolLevel: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 0 and 40000\",\r\n                minValue(0)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 0 and 40000\",\r\n                maxValue(40000)\r\n            )\r\n        },\r\n        reasonCancelled: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be empty if cycle cancelled is no\",\r\n                reasonCancelledValidator(\r\n                    computed(() => form.cycleCancelledBeforeRetrieval)\r\n                )\r\n            )\r\n        },\r\n        otherReasonCanDesc: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be empty if cycle cancelled is no\",\r\n                reasonCancelledDescValidator(\r\n                    computed(() => form.cycleCancelledBeforeRetrieval)\r\n                )\r\n            )\r\n        },\r\n        ofFolliclesGt15mm: {\r\n            validator: helpers.withMessage(\r\n                \"Value required & must between 0 ot 25\",\r\n                ofFolliclesGt15mmValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        ofFolliclesLs15mm: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                ofFolliclesLt15mmValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n    const confirm = useConfirm();\r\n    const _save = () => {\r\n        loading.value = false;\r\n        store\r\n            .dispatch(\"born/updateOvarian\", {\r\n                ...form,\r\n                adjuvantMedication: form.adjuvantMedication.join(\",\"),\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.ageOfOocyteAge = data.ageOfOocyteAge\r\n            ? data.ageOfOocyteAge\r\n            : store.state.artCycle.patient.age;\r\n        form.adjuvantMedication =\r\n            data.adjuvantMedication.length > 0\r\n                ? data.adjuvantMedication\r\n                : ADJUVANT_MEDICATION_DEFAULTS;\r\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\r\n        form.weightOfOocyte = data.weightOfOocyte;\r\n        form.bmiOfOocyte = data.bmiOfOocyte;\r\n        form.fshDayOocyte = data.fshDayOocyte;\r\n        form.afcOocyte = data.afcOocyte;\r\n        form.ngPMOOocyte = data.ngPMOOocyte;\r\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol\r\n            ? data.typeOfStimulationProtocol\r\n            : TYPE_OF_STIMULATION_PROTOCOL_DEFAULT;\r\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\r\n        form.medicationForCOS = data.medicationForCOS;\r\n        form.otherMedicationCOS = data.otherMedicationCOS;\r\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\r\n        form.triggerMedication = data.triggerMedication\r\n            ? data.triggerMedication\r\n            : TRIGGER_MEDICATION_DEFAULTS;\r\n        form.otheTriMedDesc = data.otheTriMedDesc;\r\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\r\n        form.totalDoseFSH = data.totalDoseFSH;\r\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\r\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\r\n        form.cycleCancelledBeforeRetrieval =\r\n            data.cycleCancelledBeforeRetrieval == \"yes\" ? \"yes\" : \"no\";\r\n        form.reasonCancelled = data.reasonCancelled;\r\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\r\n        form.amhLevelOocyte = data.amhLevelOocyte;\r\n        form.cycleStopped = data.cycleStoppped == \"Y\" ? \"Y\" : \"N\";\r\n        form.mediAdminisPriorCos =\r\n            data.mediAdminisPriorCos.length != 0\r\n                ? data.mediAdminisPriorCos\r\n                : MEDI_ADMINIS_PRIOR_COS_DEFUALT;\r\n        form.totalDoseRekovelleMcg = data.totalDoseRekovelleMcg;\r\n        form.otherMediPriorCosDesc = data.otherMediPriorCosDesc;\r\n\r\n        if (data.endometrialThicknessFreshCycle) {\r\n            form.endometrialThicknessFreshCycle =\r\n                data.endometrialThicknessFreshCycle;\r\n        }\r\n\r\n        if (data.estradiolLevel) {\r\n            form.estradiolLevel = data.estradiolLevel;\r\n        }\r\n\r\n        if (data.progesterOneLevel) {\r\n            form.progesterOneLevel = data.progesterOneLevel;\r\n        }\r\n\r\n        if (data.totalDoseLH) {\r\n            form.totalDoseLH = data.totalDoseLH;\r\n        }\r\n    };\r\n\r\n    const typeOfStimulationProtocolOptions = computed(\r\n        () => store.state.options.typeOfStimulationProtocol\r\n    );\r\n    const triggerMedicationOptions = computed(\r\n        () => store.state.options.triggerMedication\r\n    );\r\n    const medicationForCOSOptions = computed(\r\n        () => store.state.options.medicationForCOS\r\n    );\r\n    const medicationAdministraionPriorToCosOptions = computed(\r\n        () => store.state.options.medicationAdministraionPriorToCos\r\n    );\r\n    const reasonCancelledOptions = computed(\r\n        () => store.state.options.reasonCancelled\r\n    );\r\n    const adjuvantMedicationOptions = computed(\r\n        () => store.state.options.adjuvantMedication\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        loading,\r\n        save,\r\n        fillForm,\r\n        typeOfStimulationProtocolOptions,\r\n        triggerMedicationOptions,\r\n        medicationForCOSOptions,\r\n        medicationAdministraionPriorToCosOptions,\r\n        reasonCancelledOptions,\r\n        adjuvantMedicationOptions\r\n    };\r\n}\r\n\r\nexport function useBornEmbryologyInit() {\r\n    const store = useStore();\r\n    const form = inject(\"form\");\r\n\r\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\r\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\r\n\r\n    const inseminationMethodOptions = computed(\r\n        () => store.state.options.inseminationMethod\r\n    );\r\n    const reasonsForNoUseOptions = computed(\r\n        () => store.state.options.reasonsForNoUse\r\n    );\r\n    const embryoStageFreezingOptions = computed(\r\n        () => store.state.options.embryoStageFreezing\r\n    );\r\n    const reasonEmbryoCryopreservationOptions = computed(\r\n        () => store.state.options.reasonEmbryoCryopreservation\r\n    );\r\n    const embryoFreshCryoMethodOptions = computed(\r\n        () => store.state.options.embryoFreshCryoMethod\r\n    );\r\n    const embryoStageThawingOptions = computed(\r\n        () => store.state.options.embryoStageThawing\r\n    );\r\n    const embryoTransferOptions = computed(\r\n        () => store.state.options.reasonsNoET\r\n    );\r\n\r\n    return {\r\n        form,\r\n        isIVFCycle,\r\n        isFETCycle,\r\n        inseminationMethodOptions,\r\n        reasonsForNoUseOptions,\r\n        embryoStageFreezingOptions,\r\n        reasonEmbryoCryopreservationOptions,\r\n        embryoFreshCryoMethodOptions,\r\n        embryoStageThawingOptions,\r\n        embryoTransferOptions\r\n    };\r\n}\r\n\r\nexport function useBornMarkAsComplete() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n\r\n    const markAsComplete = async (source) => {\r\n        const payload = {\r\n            patientId: store.state.artCycle.patient.id,\r\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\r\n            source\r\n        };\r\n\r\n        try {\r\n            const { data } = await $axios.post(\r\n                \"born/mark-as-complete\",\r\n                payload\r\n            );\r\n\r\n            toast.add({\r\n                severity: \"success\",\r\n                summary: \"Sucess\",\r\n                detail: \"Mark as completed\",\r\n                life: 3000\r\n            });\r\n        } catch (err) {\r\n            toast.add({\r\n                severity: \"warn\",\r\n                summary: \"Error\",\r\n                detail: \"An Error occured\",\r\n                life: 3000\r\n            });\r\n        }\r\n    };\r\n\r\n    return {\r\n        markAsComplete\r\n    };\r\n}\r\n\r\nconst embryoTransferValidator = (cycle) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            cycle.value.cancel == false ||\r\n            cycle.value.cyccleType == \"FET\" ||\r\n            cycle.value.cyccleType == \"FOIVF\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\nconst isEbryoTrasferNo = (embryoTransfer) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer.value == \"no\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst isEbryoTrasferYes = (embryoTransfer) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst preparationUterineLiningValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (cycleType.value == \"FET\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\nconst transferDateValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst dateETAdjustedValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst assistedZonaHatchingValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst embryosTransferredValidator = (\r\n    embryoTransfer,\r\n    utilizableEmbryos,\r\n    embryosCryopreserved,\r\n    utilizableAfterThaw\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        let _utilizableEmbryos =\r\n            utilizableEmbryos.value != null\r\n                ? parseInt(utilizableEmbryos.value)\r\n                : 0;\r\n        let _utilizableAfterThaw =\r\n            utilizableAfterThaw.value != null\r\n                ? parseInt(utilizableAfterThaw.value)\r\n                : 0;\r\n        let _embryosCryopreserved =\r\n            embryosCryopreserved.value != null\r\n                ? parseInt(embryosCryopreserved.value)\r\n                : 0;\r\n\r\n        let calc =\r\n            _utilizableEmbryos + _utilizableAfterThaw - _embryosCryopreserved;\r\n\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value) && parseInt(value) <= calc;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst SOURCE_TRANSFERRED_EMBRYOS_NOT_FET = [\r\n    \"TES001\",\r\n    \"TES002\",\r\n    \"TES010\",\r\n    \"TES011\",\r\n    \"TES004\"\r\n];\r\n\r\nconst sourceTransferredEmbryosValidationMessage = (cycleType) => {\r\n    if (cycleType == \"FET\") {\r\n        return `Value requied & value cannot be from one from those -\r\n            1-Fresh embryos from own oocytes-partner sperm\r\n            2-Fresh embryos from own oocytes-donor sperm\r\n            3-Fresh embryos from partner oocytes-donor sperm\r\n            4-Fresh embryos from donor oocytes-own sperm\r\n            5-Fresh embryos from donor oocytes-partner sperm\r\n        `;\r\n    }\r\n    return \"Valur required\";\r\n};\r\n\r\nconst sourceTransferredEmbryosValidator = (embryoTransfer, cyccleType) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (cyccleType.value == \"FET\") {\r\n            let intersection = value.filter((item) =>\r\n                SOURCE_TRANSFERRED_EMBRYOS_NOT_FET.includes(item)\r\n            );\r\n            if (intersection.length > 0) return false;\r\n        }\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst transferInseminationMethodValidator = (\r\n    noOfEmbryosTransferred,\r\n    sourceTransferredEmbryos,\r\n    cycleStartDate\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\r\n        const intersection = freshSourceTransferredEmbryosIds.filter((elem) =>\r\n            [...sourceTransferredEmbryos.value].includes(elem)\r\n        );\r\n\r\n        if (\r\n            noOfEmbryosTransferred.value == 1 &&\r\n            intersection.length != 0 &&\r\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst preImplGeneticTestingValidator = (\r\n    embryoTransfer,\r\n    cycleDate,\r\n    pgtAPlanned\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            embryoTransfer.value == \"yes\" &&\r\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        if (pgtAPlanned.value == \"Y\") {\r\n            return value == \"yes\";\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            embryoTransfer.value == \"yes\" &&\r\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst charTransferredEmbryoValidator = (\r\n    noOfEmbryosTransferred,\r\n    preImplementationGeneticSergery,\r\n    cycleDate\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            preImplementationGeneticSergery.value == \"yes\" &&\r\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        // if (\r\n        //     preImplementationGeneticSergery.value == \"yes\" &&\r\n        //     parseInt(noOfEmbryosTransferred.value) == 1 &&\r\n        //     new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        // ) {\r\n        //     return helpers.req(value);\r\n        // }\r\n        return true;\r\n    });\r\n\r\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (preImplGeneticTesting.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst gestationalCarrierSurrogateValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        // && new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n\r\n        let intersections = [];\r\n        intersections = sourceTransferredEmbryos.value.filter((item) => {\r\n            return TRANSFERRED_EMBRYO_SOURCE_FROZENS.includes(item);\r\n        });\r\n\r\n        if (intersections.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst endometrialThicknessValidtor = (cyccleType) =>\r\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\r\n        if (cyccleType.value == \"FET\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBornEmbryoTransferInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const form = reactive({\r\n        embryoTransfer: null,\r\n        reasonsNoET: null,\r\n        preparationUterineLining: null,\r\n        endometrialThickness: null,\r\n        transferDate: null,\r\n        dateETAdjusted: null,\r\n        dayET: null,\r\n        ultrasoundGuidedET: null,\r\n        assistedZonaHatching: null,\r\n        embryosTransferred: null,\r\n        electiveTransfeESET: null,\r\n        sourceTransferredEmbryos: [],\r\n        transferInseminationMethod: null,\r\n        preImplGeneticTesting: null,\r\n        charTransferredEmbryo: null,\r\n        numberThaws: null,\r\n        sitePGTembryo: null,\r\n        gestationalCarrierSurrogate: null,\r\n        gestationalCarrierSurrogateChart: null,\r\n        heightRecipient: null,\r\n        weightRecipient: null,\r\n        recipientBMI: null,\r\n        endometrialReceptivityTest: null\r\n    });\r\n\r\n    const rules = {\r\n        embryoTransfer: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoTransferValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle)\r\n                )\r\n            )\r\n        },\r\n        reasonsNoET: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferNo(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        preparationUterineLining: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                preparationUterineLiningValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        transferDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            ),\r\n            validDate\r\n        },\r\n        dateETAdjusted: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        assistedZonaHatching: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        embryosTransferred: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required and value cannot be greated than (utilizableEmbryos + utilizableAfterThaw - embryosCryopreserved) \",\r\n                embryosTransferredValidator(\r\n                    computed(() => form.embryoTransfer),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.utilizableEmbryos\r\n                    ),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.embryosCryopreserved\r\n                    ),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.utilizableAfterThaw\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        sourceTransferredEmbryos: {\r\n            validator: helpers.withMessage(\r\n                sourceTransferredEmbryosValidationMessage(\r\n                    store.state.artCycle.selectedCycle != undefined ? store.state.artCycle.selectedCycle.cycleType : null\r\n                ),\r\n                sourceTransferredEmbryosValidator(\r\n                    computed(() => form.embryoTransfer),\r\n                    computed(() => store.state.artCycle.selectedCycle != undefined ? store.state.artCycle.selectedCycle.cycleType : null)\r\n                )\r\n            )\r\n        },\r\n        transferInseminationMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                transferInseminationMethodValidator(\r\n                    computed(() => form.embryosTransferred),\r\n                    computed(() => form.sourceTransferredEmbryos),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        preImplGeneticTesting: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required & must be YES if PGT A Planned is YES\",\r\n                preImplGeneticTestingValidator(\r\n                    computed(() => form.embryoTransfer),\r\n                    computed(\r\n                        () => store.state.artCycle.selectedCycle.cycleDate\r\n                    ),\r\n                    computed(() => store.state.born.dependentOn.pgtAPlanned)\r\n                )\r\n            )\r\n        },\r\n        charTransferredEmbryo: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                charTransferredEmbryoValidator(\r\n                    computed(() => form.embryosTransferred),\r\n                    computed(() => form.preImplGeneticTesting),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        sitePGTembryo: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                sitePGTembryoValidator(\r\n                    computed(() => form.preImplGeneticTesting),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        gestationalCarrierSurrogate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        numberThaws: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                numberThawsValidator(\r\n                    computed(() => form.sourceTransferredEmbryos),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        endometrialThickness: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                endometrialThicknessValidtor(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const getDefaultEndometrialThickness = () => {\r\n        let items = store.state.cycleMonitoring.lines.filter(\r\n            (item) => item.etUs != null\r\n        );\r\n\r\n        if (items.length == 0 \r\n            || items[0].cycleId !== store.state.artCycle.selectedCycle.cycleId) return null;\r\n\r\n        let thickness = items[items.length - 1].etUs\r\n            ? parseFloat(items[items.length - 1].etUs)\r\n            : null;\r\n\r\n        return thickness;\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.embryoTransfer = data.embryoTransfer;\r\n        form.reasonsNoET = data.reasonsNoET;\r\n        form.preparationUterineLining = data.preparationUterineLining;\r\n        form.endometrialThickness = data.endometrialThickness\r\n            ? data.endometrialThickness\r\n            : getDefaultEndometrialThickness();\r\n        form.transferDate = data.transferDate\r\n            ? new Date(data.transferDate + \" 00:00:00\")\r\n            : null;\r\n        form.dateETAdjusted = data.dateETAdjusted ? data.dateETAdjusted : \"no\";\r\n        form.dayET = data.dayET;\r\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\r\n        form.assistedZonaHatching = data.assistedZonaHatching;\r\n        form.embryosTransferred = data.embryosTransferred;\r\n        form.electiveTransfeESET = data.electiveTransfeESET;\r\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos\r\n            ? data.sourceTransferredEmbryos\r\n            : [];\r\n        form.transferInseminationMethod = data.transferInseminationMethod;\r\n\r\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\r\n        form.numberThaws = data.numberThaws;\r\n        form.sitePGTembryo = data.sitePGTembryo;\r\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate\r\n            ? data.gestationalCarrierSurrogate\r\n            : \"no\";\r\n        form.gestationalCarrierSurrogateChart =\r\n            data.gestationalCarrierSurrogateChart;\r\n        form.heightRecipient = data.heightRecipient;\r\n        form.weightRecipient = data.weightRecipient;\r\n        form.recipientBMI = data.recipientBMI;\r\n        form.endometrialReceptivityTest = data.endometrialReceptivityTest\r\n            ? data.endometrialReceptivityTest\r\n            : \"N\";\r\n\r\n        if (store.state.born.dependentOn.pgtAPlanned == \"Y\") {\r\n            form.preImplGeneticTesting = \"yes\";\r\n        } else {\r\n            form.preImplGeneticTesting = data.preImplGeneticTesting\r\n                ? data.preImplGeneticTesting\r\n                : \"no\";\r\n        }\r\n\r\n        if (\r\n            data.embryoTransfer == null &&\r\n            store.state.artCycle.selectedCycle.cycleType == \"FET\"\r\n        ) {\r\n            form.embryoTransfer = \"yes\";\r\n        }\r\n\r\n        if (data.preparationUterineLining == null) {\r\n            form.preparationUterineLining = PREPARATION_UTERINE_LINING_DEFAULT;\r\n        }\r\n\r\n        if (data.assistedZonaHatching == null) {\r\n            form.assistedZonaHatching = \"Y\";\r\n        }\r\n\r\n        if (store.state.born.fertilizationEmbryoThawDate) {\r\n            form.transferDate = new Date(\r\n                store.state.born.fertilizationEmbryoThawDate\r\n            );\r\n        }\r\n    };\r\n\r\n    const _save = () => {\r\n        store\r\n            .dispatch(\"born/updateEmbryoTransfer\", {\r\n                ...form,\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n                transferDate: form.transferDate\r\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\r\n                    : null\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            });\r\n    };\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\r\n    const preparationUterineLiningOptions = computed(\r\n        () => store.state.options.preparationUterineLining\r\n    );\r\n    const assistedZonaHatchingOptions = computed(\r\n        () => store.state.options.assistedZonaHatching\r\n    );\r\n    const sourceTransferredEmbryosOptions = computed(\r\n        () => store.state.options.sourceTransferredEmbryos\r\n    );\r\n    const transferInseminationMethodOptions = computed(\r\n        () => store.state.options.transferInseminationMethod\r\n    );\r\n    const charTransferredEmbryoOptions = computed(\r\n        () => store.state.options.charTransferredEmbryo\r\n    );\r\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\r\n    const sitePGTembryoOptions = computed(\r\n        () => store.state.options.sitePGTembryo\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        fillForm,\r\n        save,\r\n        reasonsNoETOptions,\r\n        preparationUterineLiningOptions,\r\n        assistedZonaHatchingOptions,\r\n        sourceTransferredEmbryosOptions,\r\n        transferInseminationMethodOptions,\r\n        charTransferredEmbryoOptions,\r\n        numberThawsOptions,\r\n        sitePGTembryoOptions,\r\n        getDefaultEndometrialThickness\r\n    };\r\n}\r\n\r\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOfOocytesRetrieved.value > 0) {\r\n            return parseInt(value) > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst oocytesNotUsedValidator = (\r\n    oocytesRetrieved,\r\n    inseminatedInjected,\r\n    oocytesCryopreserved,\r\n    cycleType\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (cycleType.value == \"FET\") {\r\n            return true;\r\n        } else {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) ==\r\n                    oocytesRetrieved.value -\r\n                        inseminatedInjected.value -\r\n                        oocytesCryopreserved.value\r\n            );\r\n        }\r\n    });\r\n\r\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (oocytesNotUsed.value > 0) {\r\n            return value.length > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryosCryopreserved.value > 0) {\r\n            return value.length > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true; // temp for now\r\n        if (noOfOocytesRetrieved.value > 0) {\r\n            return (\r\n                value.length > 0 &&\r\n                parseInt(value) <= noOfOocytesRetrieved.value\r\n            );\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) <= noOocytesInseminatedInjected.value\r\n            );\r\n        }\r\n        return true;\r\n    });\r\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) <= noOocytesInseminatedInjected.value\r\n            );\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryosCryopreservedValidator = (\r\n    noOocytesInseminatedInjected,\r\n    embryosThawed\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return value <= embryosThawed.value;\r\n    });\r\n\r\nconst reasonEmbryoCryopreservationValidator = (\r\n    embryosCryopreserved,\r\n    cycleStartDate\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            embryosCryopreserved.value > 0 &&\r\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryosCryopreserved.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryoFreezeDate1Validator = (embryosCryopreserved) =>\r\n    helpers.withParams({ type: \"embryosCryopreserved\" }, (value) => {\r\n        if (embryosCryopreserved.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBornFreshEmbryoInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n    const form = reactive({\r\n        inseminationMethod: [],\r\n        oocytesNotUsed: null,\r\n        reasonsForNoUse: [],\r\n        embryoStageFreezing: [],\r\n        inseminatedInjected: null,\r\n        embryoFreezeID1: null,\r\n        embryoFreezeID2: null,\r\n        embryoFreezeID3: null,\r\n        embryoFreezeID4: null,\r\n        normalFertilization2PN: null,\r\n        embryoFreezeDate1: null,\r\n        embryoFreezeDate2: null,\r\n        embryoFreezeDate3: null,\r\n        embryoFreezeDate4: null,\r\n        ofMII: null,\r\n        utilizableEmbryos: null,\r\n        embryosCryopreserved: null,\r\n        reasonEmbryoCryopreservation: null,\r\n        embryoFreshCryoMethod: null,\r\n        isParentSimulated: false,\r\n    });\r\n\r\n    const rules = {\r\n        inseminationMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                inseminationMethodValidator(\r\n                    computed(\r\n                        () => store.state.born.dependentOn.oocytesRetrieved\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        oocytesNotUsed: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be equal to oocytesRetrieved - inseminatedInjected - oocytesCryopreserved\",\r\n                oocytesNotUsedValidator(\r\n                    computed(\r\n                        () => store.state.born.dependentOn.oocytesRetrieved\r\n                    ),\r\n                    computed(() => form.inseminatedInjected),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.oocytesCryopreserved\r\n                    ),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        reasonsForNoUse: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                reasonsForNoUseValidator(computed(() => form.oocytesNotUsed))\r\n            )\r\n        },\r\n        embryoStageFreezing: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoStageFreezingValidator(\r\n                    computed(() => form.embryosCryopreserved)\r\n                )\r\n            )\r\n        },\r\n        inseminatedInjected: {\r\n            validator: helpers.withMessage(\"Value Required\", required)\r\n        },\r\n        normalFertilization2PN: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required and must be less or equal to oocytes inseminated/injected\",\r\n                normalFertilization2PNValidator(\r\n                    computed(() => form.inseminatedInjected)\r\n                )\r\n            )\r\n        },\r\n        ofMII: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                ofMIIValidator(computed(() => form.inseminatedInjected))\r\n            )\r\n        },\r\n        utilizableEmbryos: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                utilizableEmbryosValidator(\r\n                    computed(() => form.inseminatedInjected)\r\n                )\r\n            )\r\n        },\r\n        embryosCryopreserved: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required & value must be less than # embryos Thawed\",\r\n                embryosCryopreservedValidator(\r\n                    computed(() => form.inseminatedInjected),\r\n                    computed(() => store.state.born.dependentOn.embryosThawed)\r\n                )\r\n            )\r\n        },\r\n        reasonEmbryoCryopreservation: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                reasonEmbryoCryopreservationValidator(\r\n                    computed(() => form.embryosCryopreserved),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        embryoFreshCryoMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoFreshCryoMethodValidator(\r\n                    computed(() => form.embryosCryopreserved)\r\n                )\r\n            )\r\n        },\r\n        embryoFreezeDate1: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoFreezeDate1Validator(\r\n                    computed(() => form.embryosCryopreserved)\r\n                )\r\n            ),\r\n            validDate\r\n        },\r\n        embryoFreezeDate2: { validDate },\r\n        embryoFreezeDate3: { validDate },\r\n        embryoFreezeDate4: { validDate }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const _save = () => {\r\n        let payload = {\r\n            ...form,\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n            embryoFreezeDate1: form.embryoFreezeDate1\r\n                ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\r\n                : null,\r\n            embryoFreezeDate2: form.embryoFreezeDate2\r\n                ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\r\n                : null,\r\n            embryoFreezeDate3: form.embryoFreezeDate3\r\n                ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\r\n                : null,\r\n            embryoFreezeDate4: form.embryoFreezeDate4\r\n                ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\r\n                : null\r\n        };\r\n\r\n        // return;\r\n\r\n        store.dispatch(\"born/updateFreshEmbryo\", payload).then(() => {\r\n            toast.add({\r\n                severity: \"success\",\r\n                summary: \"\",\r\n                detail: \"Save Successful\",\r\n                life: 3000\r\n            });\r\n        });\r\n    };\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const save = () => {\r\n        if (!form.isParentSimulated && v$.value.$invalid) {\r\n            return;\r\n        }\r\n        emitter.emit(\"fresh-embryo:on-save\");\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.inseminationMethod = data.inseminationMethod;\r\n        form.oocytesNotUsed = data.oocytesNotUsed;\r\n        form.reasonsForNoUse = data.reasonsForNoUse;\r\n        form.embryoStageFreezing = data.embryoStageFreezing;\r\n        form.inseminatedInjected = data.inseminatedInjected;\r\n        form.embryoFreezeID1 = data.embryoFreezeID1;\r\n        form.embryoFreezeID2 = data.embryoFreezeID2;\r\n        form.embryoFreezeID3 = data.embryoFreezeID3;\r\n        form.embryoFreezeID4 = data.embryoFreezeID4;\r\n        form.normalFertilization2PN = data.normalFertilization2PN;\r\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\r\n            ? new Date(data.embryoFreezeDate1 + TIME_0)\r\n            : null;\r\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\r\n            ? new Date(data.embryoFreezeDate2 + TIME_0)\r\n            : null;\r\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\r\n            ? new Date(data.embryoFreezeDate3 + TIME_0)\r\n            : null;\r\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\r\n            ? new Date(data.embryoFreezeDate4 + TIME_0)\r\n            : null;\r\n        form.ofMII = data.ofMII;\r\n        form.utilizableEmbryos = data.utilizableEmbryos;\r\n        form.embryosCryopreserved = data.embryosCryopreserved;\r\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\r\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\r\n\r\n        form.isParentSimulated = data.simulated_cycle;\r\n    };\r\n\r\n    const fillFormDefault = (data) => {\r\n        if (form.inseminationMethod.length == 0)\r\n            form.inseminationMethod = data.inseminationMethod;\r\n        if (form.oocytesNotUsed == null)\r\n            form.oocytesNotUsed = data.oocytesNotUsed;\r\n        if (form.reasonsForNoUse.length == 0)\r\n            form.reasonsForNoUse = data.reasonsForNoUse;\r\n        if (form.embryoStageFreezing.length == 0)\r\n            form.embryoStageFreezing = data.embryoStageFreezing;\r\n        if (form.inseminatedInjected == null)\r\n            form.inseminatedInjected = data.inseminatedInjected;\r\n        if (form.embryoFreezeID1 == null)\r\n            form.embryoFreezeID1 = data.embryoFreezeID1;\r\n        if (form.embryoFreezeID2 == null)\r\n            form.embryoFreezeID2 = data.embryoFreezeID2;\r\n        if (form.embryoFreezeID3 == null)\r\n            form.embryoFreezeID3 = data.embryoFreezeID3;\r\n        if (form.embryoFreezeID4 == null)\r\n            form.embryoFreezeID4 = data.embryoFreezeID4;\r\n        if (form.normalFertilization2PN == null)\r\n            form.normalFertilization2PN = data.normalFertilization2PN;\r\n        if (form.embryoFreezeDate1 == null)\r\n            form.embryoFreezeDate1 = data.embryoFreezeDate1\r\n                ? new Date(data.embryoFreezeDate1 + TIME_0)\r\n                : null;\r\n        if (form.embryoFreezeDate2 == null)\r\n            form.embryoFreezeDate2 = data.embryoFreezeDate2\r\n                ? new Date(data.embryoFreezeDate2 + TIME_0)\r\n                : null;\r\n        if (form.embryoFreezeDate3 == null)\r\n            form.embryoFreezeDate3 = data.embryoFreezeDate3\r\n                ? new Date(data.embryoFreezeDate3 + TIME_0)\r\n                : null;\r\n        if (form.embryoFreezeDate4 == null)\r\n            form.embryoFreezeDate4 = data.embryoFreezeDate4\r\n                ? new Date(data.embryoFreezeDate4 + TIME_0)\r\n                : null;\r\n        if (form.ofMII == null) form.ofMII = data.ofMII;\r\n        if (form.utilizableEmbryos == null)\r\n            form.utilizableEmbryos = data.utilizableEmbryos;\r\n        if (form.embryosCryopreserved == null)\r\n            form.embryosCryopreserved = data.embryosCryopreserved;\r\n        if (form.reasonEmbryoCryopreservation == null)\r\n            form.reasonEmbryoCryopreservation =\r\n                data.reasonEmbryoCryopreservation;\r\n        if (form.embryoFreshCryoMethod == null)\r\n            form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\r\n\r\n        form.isParentSimulated = data.simulated_cycle;\r\n    };\r\n\r\n    const getDeafultDataByPrimaryCycle = async ({ patientId, cycleId }) => {\r\n        const resp = await getFreshEbmryo(patientId, cycleId);\r\n        if (resp.status == \"success\") {\r\n            fillFormDefault(resp.freshEmbryos); \r\n        } \r\n\r\n        form.isParentSimulated = resp.simulatedCycle;\r\n    };\r\n\r\n    const inseminationMethodOptions = computed(\r\n        () => store.state.options.inseminationMethod\r\n    );\r\n    const reasonsForNoUseOptions = computed(\r\n        () => store.state.options.reasonsForNoUse\r\n    );\r\n    const embryoStageFreezingOptions = computed(\r\n        () => store.state.options.embryoStageFreezing\r\n    );\r\n    const reasonEmbryoCryopreservationOptions = computed(\r\n        () => store.state.options.reasonEmbryoCryopreservation\r\n    );\r\n    const embryoFreshCryoMethodOptions = computed(\r\n        () => store.state.options.embryoFreshCryoMethod\r\n    );\r\n\r\n    const cycleIds = computed(() => store.state.artCycle.cyclesSummary);\r\n\r\n    return {\r\n        store,\r\n        loading,\r\n        form,\r\n        v$,\r\n        fillForm,\r\n        save,\r\n        inseminationMethodOptions,\r\n        reasonsForNoUseOptions,\r\n        embryoStageFreezingOptions,\r\n        reasonEmbryoCryopreservationOptions,\r\n        embryoFreshCryoMethodOptions,\r\n        cycleIds,\r\n        getDeafultDataByPrimaryCycle\r\n    };\r\n}\r\n\r\nconst isFETCycleValidator = (cyccleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cyccleType.value == \"FET\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBronFrozenEmbyoInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n    const form = reactive({\r\n        oocyteCollectionDate: null,\r\n        embryoFreezeID1Thawed: null,\r\n        embryoFreezeID2Thawed: null,\r\n        embryoFreezeID3Thawed: null,\r\n        embryoFreezeID4Thawed: null,\r\n        embryosThawed: null,\r\n        utilizableAfterThaw: null,\r\n        embryoStageThawing: null,\r\n        embryoFrozenCryoMethod: null,\r\n        embryoThawDate: null,\r\n        donatedEmbryoFromAnotherCouple: null\r\n    });\r\n\r\n    const rules = {\r\n        utilizableAfterThaw: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        embryoStageThawing: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        embryoFrozenCryoMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        embryoThawDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            ),\r\n            validDate\r\n        },\r\n        donatedEmbryoFromAnotherCouple: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        store\r\n            .dispatch(\"born/updateFrozenEmbryo\", {\r\n                ...form,\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n                oocyteCollectionDate: form.oocyteCollectionDate\r\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\r\n                    : null,\r\n                embryoThawDate: form.embryoThawDate\r\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\r\n                    : null\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        let embryoThawDate = data.embryoThawDate\r\n            ? new Date(data.embryoThawDate + TIME_0)\r\n            : null;\r\n\r\n        form.oocyteCollectionDate = data.oocyteCollectionDate\r\n            ? new Date(data.oocyteCollectionDate + TIME_0)\r\n            : null;\r\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\r\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\r\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\r\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\r\n        form.embryosThawed = data.embryosThawed;\r\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\r\n        form.embryoStageThawing = data.embryoStageThawing;\r\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\r\n        form.embryoThawDate = embryoThawDate;\r\n        form.donatedEmbryoFromAnotherCouple =\r\n            data.donatedEmbryoFromAnotherCouple;\r\n\r\n        if (data.embryoStageThawing.length == 0) {\r\n            form.embryoStageThawing = [4];\r\n        }\r\n\r\n        if (\r\n            store.state.artCycle.selectedCycle.cycleType == \"FET\" &&\r\n            data.embryoFrozenCryoMethod == null\r\n        ) {\r\n            form.embryoFrozenCryoMethod = \"ECRY002\";\r\n        }\r\n\r\n        store.commit(\"born/SET_FERTILIZATION_EMBRYO_THAW_DATE\", embryoThawDate);\r\n    };\r\n\r\n    const embryoStageThawingOptions = computed(\r\n        () => store.state.options.embryoStageThawing\r\n    );\r\n    const embryoFrozenCryoMethodOptions = computed(\r\n        () => store.state.options.embryoFrozenCryoMethod\r\n    );\r\n\r\n    return {\r\n        store,\r\n        loading,\r\n        form,\r\n        v$,\r\n        save,\r\n        fillForm,\r\n        embryoStageThawingOptions,\r\n        embryoFrozenCryoMethodOptions\r\n    };\r\n}\r\n\r\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\r\n    cycleDate,\r\n    embryoTransfer\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\r\n            return true;\r\n        }\r\n\r\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\r\n            return value.length > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\r\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\r\n        if (parseInt(noOfBabiesBorn.value) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBornExtraFormInit() {\r\n    const store = useStore();\r\n\r\n    const form = reactive({\r\n        patientNotes: null,\r\n        bornConsentFlag: null,\r\n        pgtAIsPlanned: null,\r\n        patientHistoryNotes: null,\r\n        mediAdminisPriorCos: [],\r\n        otherMediPriorCosDesc: null,\r\n        totalDoseRekovelleMcg: null,\r\n        stimulationNotes: null,\r\n        spermCollectionNotes: null,\r\n        embryologyNotes: null,\r\n        endoRecTestdPerformed: null,\r\n        recTestBiopsyResult: null,\r\n        transferNotes: null,\r\n        pregnancyOutcomeNotes: null,\r\n        estimatedDateOfBirth: null,\r\n        gestationalAge: null,\r\n        complicationsOfPregnancy: [],\r\n        maternalHealthConditions: [],\r\n        diabetesAndPregnancy: null,\r\n        hypertensionDisorder: null,\r\n        typeOfLabour: null,\r\n        augmentation: [],\r\n        methodsOfInduction: [],\r\n        typeOfDelivery: null,\r\n        allIndicationsOfLabour: null,\r\n        cervicalRipening: [],\r\n        allIndicationsCaesarean: null,\r\n        labourBirthComplications: [],\r\n        maternalOutcome: null,\r\n        birthWeight: null,\r\n        congenitalAnomalies: null,\r\n        neonatalDeath: null,\r\n        apgar1: null,\r\n        apgar5: null,\r\n        apgar10: null,\r\n        neonatalBirthComplications: null,\r\n        admissionToNicu: null,\r\n        notesOnBirthOutcome: null,\r\n        liveBornFetus: null,\r\n        sexFetus: null\r\n    });\r\n\r\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\r\n    const medicationForCOS = ref();\r\n\r\n    const rules = {\r\n        congenitalAnomalies: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                congenitalAnomaliesValidator(\r\n                    computed(() => store.state.born.dependentOn.noOfBabiesBorn)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const getBornExtra = () => {\r\n        store\r\n            .dispatch(\"born/getBornExtra\", {\r\n                patientId: store.state.artCycle.patient.id,\r\n                cycleId: store.state.artCycle.selectedCycle.cycleId\r\n            })\r\n            .then((data) => {\r\n                fillForm(data);\r\n            })\r\n            .catch(() => {})\r\n            .finally(() => {\r\n                v$.value.$validate();\r\n            });\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.patientNotes = data.patient_notes;\r\n        form.bornConsentFlag = data.born_consent_flag;\r\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\r\n        form.patientHistoryNotes = data.patient_history_notes;\r\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\r\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\r\n        form.stimulationNotes = data.stimulation_notes;\r\n        form.spermCollectionNotes = data.sperm_collection_notes;\r\n        form.embryologyNotes = data.embryology_notes;\r\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\r\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\r\n        form.transferNotes = data.transfer_notes;\r\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\r\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\r\n            ? new Date(data.estimated_date_of_birth)\r\n            : null;\r\n        form.gestationalAge = data.gestational_age;\r\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\r\n        form.maternalHealthConditions = data.maternal_health_conditions;\r\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\r\n        form.hypertensionDisorder = data.hypertension_disorder;\r\n        form.typeOfLabour = data.type_of_labour;\r\n        form.augmentation = data.augmentation;\r\n        form.methodsOfInduction = data.methods_of_induction;\r\n        form.typeOfDelivery = data.type_of_delivery;\r\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\r\n        form.cervicalRipening = data.cervical_ripening;\r\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\r\n        form.labourBirthComplications = data.labour_birth_complications;\r\n        form.maternalOutcome = data.maternal_outcome;\r\n        form.birthWeight = data.birth_weight;\r\n        form.congenitalAnomalies = data.congenital_anomalies;\r\n        form.neonatalDeath = data.neonatal_death;\r\n        form.apgar1 = data.apgar_1;\r\n        form.apgar5 = data.apgar_5;\r\n        form.apgar10 = data.apgar_10;\r\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\r\n        form.admissionToNicu = data.admission_to_nicu;\r\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\r\n        form.liveBornFetus = data.live_born_fetus; // todo after service\r\n        form.sexFetus = data.sex_fetus; // todo after service\r\n    };\r\n\r\n    const loading = ref(false);\r\n    const toast = useToast();\r\n    const _save = () => {\r\n        loading.value = true;\r\n        let payload = {\r\n            patientId: store.state.artCycle.patient.id,\r\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\r\n            patient_notes: form.patientNotes,\r\n            born_consent_flag: form.bornConsentFlag,\r\n            pgt_a_is_planned: form.pgtAIsPlanned,\r\n            patient_history_notes: form.patientHistoryNotes,\r\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\r\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\r\n            stimulation_notes: form.stimulationNotes,\r\n            sperm_collection_notes: form.spermCollectionNotes,\r\n            embryology_notes: form.embryologyNotes,\r\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\r\n            rec_test_biopsy_result: form.recTestBiopsyResult,\r\n            transfer_notes: form.transferNotes,\r\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\r\n            estimated_date_of_birth: form.estimatedDateOfBirth\r\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\r\n                : null,\r\n            gestational_age: form.gestationalAge,\r\n            complications_of_pregnancy: form.complicationsOfPregnancy,\r\n            maternal_health_conditions: form.maternalHealthConditions,\r\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\r\n            hypertension_disorder: form.hypertensionDisorder,\r\n            type_of_labour: form.typeOfLabour,\r\n            augmentation: form.augmentation,\r\n            methods_of_induction: form.methodsOfInduction,\r\n            type_of_delivery: form.typeOfDelivery,\r\n            all_indications_of_labour: form.allIndicationsOfLabour,\r\n            cervical_ripening: form.cervicalRipening,\r\n            all_indications_caesarean: form.allIndicationsCaesarean,\r\n            labour_birth_complications: form.labourBirthComplications,\r\n            maternal_outcome: form.maternalOutcome,\r\n            birth_weight: form.birthWeight,\r\n            congenital_anomalies: form.congenitalAnomalies,\r\n            neonatal_death: form.neonatalDeath,\r\n            apgar_1: form.apgar1,\r\n            apgar_5: form.apgar5,\r\n            apgar_10: form.apgar10,\r\n            neonatal_birth_complications: form.neonatalBirthComplications,\r\n            admission_to_nicu: form.admissionToNicu,\r\n            notes_on_birth_outcome: form.notesOnBirthOutcome,\r\n            preExistingMentalHealthCondition:\r\n                form.preExistingMentalHealthCondition,\r\n            sex_fetus: form.sexFetus,\r\n            live_born_fetus: form.liveBornFetus\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/saveBornExtra\", payload)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .catch(() => {})\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    return {\r\n        form,\r\n        loading,\r\n        v$,\r\n        save,\r\n        fillForm,\r\n        getBornExtra,\r\n        medicationForCOS,\r\n        medicationForCOSContainFSHOrLhOrFshPlusLH\r\n    };\r\n}\r\n\r\nexport function useBornFieldOptions() {\r\n    const store = useStore();\r\n    const complicationsOfPregnancyOptions = computed(\r\n        () => store.state.options.complicationsOfPregnancy\r\n    );\r\n\r\n    const metarnalHealthConditionOptions = computed(\r\n        () => store.state.options.maternalHealthConditions\r\n    );\r\n\r\n    const diabetesAndPregnancyOptions = reactive([\r\n        {\r\n            value: \"None\",\r\n            label: \"None\"\r\n        },\r\n        {\r\n            value: \"Gestational | Insulin\",\r\n            label: \"Gestational | Insulin\"\r\n        },\r\n        {\r\n            value: \"Gestational | No Insulin\",\r\n            label: \"Gestational | No Insulin\"\r\n        },\r\n        {\r\n            value: \"Gestational | Insulin Status Unknown\",\r\n            label: \"Gestational | Insulin Status Unknown\"\r\n        },\r\n        {\r\n            value: \"Type I\",\r\n            label: \"Type I\"\r\n        },\r\n        {\r\n            value: \"Type II | Insulin\",\r\n            label: \"Type II | Insulin\"\r\n        },\r\n        {\r\n            value: \"Type II | No Insulin\",\r\n            label: \"Type II | No Insulin\"\r\n        },\r\n        {\r\n            value: \"Type Unknown\",\r\n            label: \"Type Unknown\"\r\n        },\r\n        {\r\n            value: \"Declined testing\",\r\n            label: \"Declined testing\"\r\n        },\r\n        {\r\n            value: \"Unknown\",\r\n            label: \"Unknown\"\r\n        }\r\n    ]);\r\n\r\n    const hypertensionDisorderOptions = reactive([\r\n        {\r\n            value: \"None\",\r\n            label: \"None\"\r\n        },\r\n        {\r\n            value: \"Gestational Hypertension\",\r\n            label: \"Gestational Hypertension\"\r\n        },\r\n        {\r\n            value: \"Preeclampsia\",\r\n            label: \"Preeclampsia\"\r\n        },\r\n        {\r\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\r\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\r\n        },\r\n        {\r\n            value: \"HELLP Syndrome\",\r\n            label: \"HELLP Syndrome\"\r\n        },\r\n        {\r\n            value: \"Eclampsia\",\r\n            label: \"Eclampsia\"\r\n        },\r\n        {\r\n            value: \"Unknown\",\r\n            label: \"Unknown\"\r\n        }\r\n    ]);\r\n\r\n    const typeOfLabourOptions = computed(\r\n        () => store.state.options.typeOfLabour\r\n    );\r\n\r\n    const augmentationOptions = computed(\r\n        () => store.state.options.augmentation\r\n    );\r\n\r\n    const methodsOfInductionOptions = computed(\r\n        () => store.state.options.methodsOfInduction\r\n    );\r\n\r\n    const typeOfDeliveryOptions = computed(\r\n        () => store.state.options.typeOfDelivery\r\n    );\r\n\r\n    const cervicalRipeningOptions = computed(\r\n        () => store.state.options.cervicalRipening\r\n    );\r\n\r\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\r\n\r\n    const neonatalBirthComplicationsOptions = computed(\r\n        () => store.state.options.newbornComplications\r\n    );\r\n\r\n    const indicationLabourOptions = computed(\r\n        () => store.state.options.allIndicationsOfLabour\r\n    );\r\n\r\n    const indicationCaesareanOptions = computed(\r\n        () => store.state.options.allIndicationsCaesarean\r\n    );\r\n\r\n    const labourBirthComplicationsOptions = computed(\r\n        () => store.state.options.labourBirthComplications\r\n    );\r\n\r\n    const maternalOutcomeOptions = computed(\r\n        () => store.state.options.maternalOutcome\r\n    );\r\n\r\n    const medicationForCOSOptions = computed(\r\n        () => store.state.options.medicationAdministraionPriorCOS\r\n    );\r\n\r\n    return {\r\n        complicationsOfPregnancyOptions,\r\n        metarnalHealthConditionOptions,\r\n        diabetesAndPregnancyOptions,\r\n        hypertensionDisorderOptions,\r\n        typeOfLabourOptions,\r\n        augmentationOptions,\r\n        methodsOfInductionOptions,\r\n        typeOfDeliveryOptions,\r\n        cervicalRipeningOptions,\r\n        apgarOptions,\r\n        neonatalBirthComplicationsOptions,\r\n        indicationLabourOptions,\r\n        indicationCaesareanOptions,\r\n        labourBirthComplicationsOptions,\r\n        maternalOutcomeOptions,\r\n        medicationForCOSOptions\r\n    };\r\n}\r\n","const { helpers } = require(\"@vuelidate/validators\");\r\n\r\nconst DATE_REGEX = /^((0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|20)?[0-9]{2})*$/;\r\n\r\nexport const validDate = helpers.withMessage(\r\n    \"Date format is not valid\",\r\n    (value) => {\r\n        if (value == '') return true;\r\n        if (value == null) return true;\r\n        if (value instanceof Date) return true;\r\n        return DATE_REGEX.match(value);\r\n    }\r\n);\r\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n"],"sourceRoot":""}