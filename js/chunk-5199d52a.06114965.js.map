{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","isComplicationNone","param","helpers","withParams","complications","length","isEmbryoTransferYes","embryoTransfer","fetalSacsUSValidator","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","useComplicationFormInit","toast","useToast","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","requireWhen","requiredWhen","validator","_save","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","useConfirm","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","isNumberOocytesInseminatedInjected","inseminatedInjected","isIVForFETCycle","isOocyteRetrivedGreaterThan0","retrievedOrThawed","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","spermOrigin","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","spermSource","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","cycleType","freshEmbryos","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","mustBe0IfPriorPregnancies0","priorPregnancies","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","useObstetricalHistoryFormInit","priorBirths","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","requiredIfMedicationForCOSContains","medicationForCOS","includes","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","otherAdjuvantMediDescription","triggerMedication","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","minValue","maxValue","requiredIfContains","patient","age","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","reasonCancelledOptions","adjuvantMedicationOptions","embryoTransferValidator","cycle","cancel","cyccleType","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","freshSourceTransferredEmbryosIds","preImplGeneticTestingValidator","cycleDate","sitePGTembryoValidator","charTransferredEmbryoValidator","frozenSourceTransferredEmbryosIds","numberThawsValidator","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","reasonsForNoUseValidator","embryoStageFreezingValidator","embryosCryopreserved","inseminatedInjectedValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","useBornFreshEmbryoInit","inseminationMethod","oocytesNotUsed","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","utilizableEmbryos","reasonEmbryoCryopreservation","embryoFreshCryoMethod","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryosThawed","utilizableAfterThaw","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","isFETCycle","embryoStageThawingOptions","embryoTransferOptions","requiredIfCycleGreaterthan22Jan","requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","mediAdminisPriorCos","otherMediPriorCosDesc","totalDoseRekovelleMcg","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","getBornExtra","patientId","id","cycleId","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","other_medi_prior_cos_desc","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","payload","useBornFieldOptions","complicationsOfPregnancyOptions","complicationsPregnancy","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS"],"mappings":"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","file":"js/chunk-5199d52a.06114965.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission\n    };\n}\n","import { DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\n\nconst isComplicationNone = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.complications == \"None\") {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst isEmbryoTransferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer == \"yes\") {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst fetalSacsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == null ||\n            param.typeOfPregnancy == \"Biochemical\" ||\n            param.typeOfPregnancy == \"Not Pregnant\" ||\n            param.typeOfPregnancy == \"Unknown\"\n        ) {\n            return true;\n        }\n\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\"\n        ) {\n            return parseInt(value) > 0;\n        }\n\n        return value.length > 0;\n    });\n\nconst fetalheartsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\" ||\n            param.typeOfPregnancy == \"Ectopic\"\n        ) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\n\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\n                typeOfPregnancy.value == \"Heterotopic\") &&\n            parseInt(fetalheartsUS.value) >= 2\n        ) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        complications: null,\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\n\n    const fillForm = (data) => {\n        form.complications = data.complications;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.treatmentOutcome = data.treatmentOutcome;\n        form.typeOfPregnancy = data.typeOfPregnancy;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n    };\n\n    const rule = {\n        spermTooLowCount: { requireWhen: isComplicationNone(form) },\n        typeOfPregnancy: {\n            requiredWhen: isEmbryoTransferYes(store.state.born.embryoTransfer)\n        },\n        fetalSacsUS: {\n            requiredWhen: fetalSacsUSValidator(form)\n        },\n        fetalheartsUS: {\n            validator: fetalheartsUSValidator(form)\n        },\n        chorionicity: {\n            validator: chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n        },\n        electiveFetalReduction: {\n            validator: chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n        }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nconst newbornDateBirthValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst pregnancyLossDateValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050890\" ||\n            form.pregnancyBirthOutcome == \"1050900\" ||\n            form.pregnancyBirthOutcome == \"1050910\"\n        ) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst babiesbornValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: { validator: pregnancyLossDateValidator(form) },\n        newbornDateBirth: {\n            validator: newbornDateBirthValidator(form)\n        },\n        babiesborn: {\n            validator: babiesbornValidator(form)\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: form.newbornDateBirth\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\n                : null,\n            pregnancyLossDate: form.pregnancyLossDate\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\n                : null\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst isNumberOocytesInseminatedInjected = (param) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(param.inseminatedInjected) > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            requiredWhen: isIVForFETCycle(\n                store.state.artCycle.selectedCycle.cycleType\n            )\n        },\n        oocyteCryoPreserved: {\n            requiredWhen: isOocyteRetrivedGreaterThan0(form)\n        },\n        oocyteCryoMethod: {\n            requiredWhen: isNumberOocytesCryoedIsGreaterThan0(form)\n        },\n        spermOrigin: {\n            requireWhen: isNumberOocytesInseminatedInjected(\n                store.state.born.freshEmbryos\n            )\n        },\n        oocyteFreezeDate: {\n            requiredWhen: isNumberOocytesCryoedIsGreaterThan0(form)\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: form.oocyteCollectionDate\n                ? format(\n                      new Date(form.oocyteCollectionDate),\n                      DATE_FORMAT_STRING\n                  )\n                : null,\n            oocyteThawDate: form.oocyteThawDate\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\n                : null,\n            oocyteFreezeDate: form.oocyteFreezeDate\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\n                : null,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate;\n        form.oocyteThawDate = data.oocyteThawDate;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.spermOrigin = data.spermOrigin;\n        form.ageSpermProvider = data.ageSpermProvider;\n        form.spermDonorID = data.spermDonorID;\n        form.spermDonorStatus = data.spermDonorStatus;\n        form.spermMotility = data.spermMotility;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.spermDonorBank = data.spermDonorBank;\n        form.spermSource = data.spermSource;\n        form.semenVolume = data.semenVolume;\n        form.spermCount = data.spermCount;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.reasonsForTreatmentCycle == 1) {\n            return value.length != 0;\n        }\n        return true;\n    });\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: null,\n        priorETsOwnOocytes: null,\n        priorETsDonorOocytes: null,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: null,\n        reasonsForMaleFactor: null\n    });\n\n    const rules = {\n        priorBirths: {\n            mustBe0IfPriorPregnancies0: mustBe0IfPriorPregnancies0(form)\n        },\n        typeOfFunding: {\n            requiredIfprovincialFundingIsYes: requiredIfprovincialFundingIsYes(\n                form\n            )\n        },\n        reasonsForMaleFactor: {\n            requiredIfReasonsForTreatmentCycleIsMaleFactor: requiredIfReasonsForTreatmentCycleIsMaleFactor(\n                form\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle;\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor;\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return value != null;\n        }\n\n        return true;\n    });\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: null,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: null,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: null,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: null,\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: { required },\n        hightOfOocyteHight: { minValue: minValue(90), maxValue: maxValue(240) },\n        weightOfOocyte: { minValue: minValue(25), maxValue: maxValue(227) },\n        noOfDaysGonadotropins: {\n            requiredIfContains: requiredIfMedicationForCOSContains(form)\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication = data.adjuvantMedication;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.totalDoseLH = data.totalDoseLH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.estradiolLevel = data.estradiolLevel;\n        form.progesterOneLevel = data.progesterOneLevel;\n        form.endometrialThicknessFreshCycle =\n            data.endometrialThicknessFreshCycle;\n        form.cycleCancelledBeforeRetrieval = data.cycleCancelledBeforeRetrieval;\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst embryoTransferValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cancel == false ||\n            cycle.value.cyccleType == \"FET\" ||\n            cycle.value.cyccleType == \"FOIVF\"\n        ) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\nconst isEbryoTrasferNo = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst isEbryoTrasferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst preparationUterineLiningValidator = (cycleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst transferDateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst dateETAdjustedValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst assistedZonaHatchingValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst embryosTransferredValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst sourceTransferredEmbryosValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst transferInseminationMethodValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\n\n        if (\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            freshSourceTransferredEmbryosIds.includes(\n                sourceTransferredEmbryos.value\n            )\n        ) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(\"2019-01-01\")\n        ) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(\"2019-01-01\")\n        ) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst charTransferredEmbryoValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos,\n    cycleDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const frozenSourceTransferredEmbryosIds = [7, 8, 9, 10, 11, 12, 12];\n\n        if (\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            frozenSourceTransferredEmbryosIds.includes(\n                sourceTransferredEmbryos.value\n            ) &&\n            new Date(cycleDate.value) > new Date(\"2019-01-01\")\n        ) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        console.log(preImplGeneticTesting.value == \"yes\");\n        if (preImplGeneticTesting.value == \"yes\") {\n            console.log(\"in\");\n            return value != null;\n        }\n        return true;\n    });\n\nconst gestationalCarrierSurrogateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst numberThawsValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: null,\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null\n    });\n\n    const rules = {\n        embryoTransfer: {\n            validator: embryoTransferValidator(\n                computed(() => store.state.artCycle.selectedCycle)\n            )\n        },\n        reasonsNoET: {\n            validator: isEbryoTrasferNo(computed(() => form.embryoTransfer))\n        },\n        preparationUterineLining: {\n            validator: preparationUterineLiningValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        transferDate: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        dateETAdjusted: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        assistedZonaHatching: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        embryosTransferred: { validator: embryosTransferredValidator() },\n        sourceTransferredEmbryos: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        transferInseminationMethod: {\n            validator: transferInseminationMethodValidator(\n                computed(() => form.embryosTransferred),\n                computed(() => form.sourceTransferredEmbryos)\n            )\n        },\n        preImplGeneticTesting: {\n            validator: preImplGeneticTestingValidator(\n                computed(() => form.embryoTransfer),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        charTransferredEmbryo: {\n            validator: charTransferredEmbryoValidator(\n                computed(() => form.embryosTransferred),\n                computed(() => form.sourceTransferredEmbryos),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        sitePGTembryo: {\n            validator: sitePGTembryoValidator(\n                computed(() => form.preImplGeneticTesting),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        gestationalCarrierSurrogate: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        numberThaws: { validator: numberThawsValidator() }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness;\n        form.transferDate = data.transferDate;\n        form.dateETAdjusted = data.dateETAdjusted;\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos;\n        form.transferInseminationMethod = data.transferInseminationMethod;\n        form.preImplGeneticTesting = data.preImplGeneticTesting;\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate;\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n    };\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions\n    };\n}\n\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst oocytesNotUsedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst reasonsForNoUseValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return (\n                value.length > 0 && parseInt(value) < noOfOocytesRetrieved.value\n            );\n        }\n        return true;\n    });\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) < noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) < noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst embryosCryopreservedValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst reasonEmbryoCryopreservationValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: null,\n        oocytesNotUsed: null,\n        reasonsForNoUse: null,\n        embryoStageFreezing: null,\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {\n            validator: inseminationMethodValidator(\n                computed(\n                    () => store.state.born.oocyteCollections.retrievedOrThawed\n                )\n            )\n        },\n        oocytesNotUsed: {\n            validator: oocytesNotUsedValidator(\n                computed(\n                    () => store.state.born.oocyteCollections.retrievedOrThawed\n                )\n            )\n        },\n        reasonsForNoUse: {\n            validator: reasonsForNoUseValidator(\n                computed(\n                    () => store.state.born.oocyteCollections.retrievedOrThawed\n                )\n            )\n        },\n        embryoStageFreezing: {\n            validator: embryoStageFreezingValidator(\n                computed(() => form.embryosCryopreserved)\n            )\n        },\n        inseminatedInjected: {\n            validator: inseminatedInjectedValidator(\n                computed(\n                    () => store.state.born.oocyteCollections.retrievedOrThawed\n                )\n            )\n        },\n        normalFertilization2PN: {\n            validator: normalFertilization2PNValidator(\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        ofMII: {\n            validator: ofMIIValidator(computed(() => form.inseminatedInjected))\n        },\n        utilizableEmbryos: {\n            validator: utilizableEmbryosValidator(\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        embryosCryopreserved: {\n            validator: embryosCryopreservedValidator(\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        reasonEmbryoCryopreservation: {\n            validator: reasonEmbryoCryopreservationValidator(\n                computed(() => form.embryosCryopreserved)\n            )\n        },\n        embryoFreshCryoMethod: {\n            validator: embryoFreshCryoMethodValidator(\n                computed(() => form.embryosCryopreserved)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateFreshEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                embryoFreezeDate1: form.embryoFreezeDate1\n                    ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate2: form.embryoFreezeDate2\n                    ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate3: form.embryoFreezeDate3\n                    ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate4: form.embryoFreezeDate4\n                    ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions\n    };\n}\n\nconst isFETCycleValidator = (cyccleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        embryoStageThawing: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        embryoFrozenCryoMethod: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        embryoThawDate: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        donatedEmbryoFromAnotherCouple: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22Jan = (param, cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycle.cycleType == \"FET\" || cycle.cycleType == \"FOIVF\") {\n            return true;\n        }\n\n        if (new Date(cycle.cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null\n    });\n\n    const rules = {\n        mediAdminisPriorCos: {\n            requiredIfCycleGreaterthan22Jan: requiredIfCycleGreaterthan22Jan(\n                form,\n                store.state.artCycle.selectedCycle\n            )\n        },\n        totalDoseRekovelleMcg: { required },\n        endoRecTestdPerformed: {\n            requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes: requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes(\n                store.state.artCycle.selectedCycle.cycleDate,\n                store.state.born.embryoTransfer\n            )\n        },\n        congenitalAnomalies: {\n            required\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.otherMediPriorCosDesc = data.other_medi_prior_cos_desc;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            other_medi_prior_cos_desc: form.otherMediPriorCosDesc,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = reactive([\n        {\n            value: \"Spontaneous\",\n            label: \"Spontaneous\"\n        },\n        {\n            value: \"Induced\",\n            label: \"Induced\"\n        },\n        {\n            value: \"No Labour\",\n            label: \"No Labour\"\n        }\n    ]);\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = reactive([\n        \"Spontaneous Vaginal Birth\",\n        \"Assisted Vaginal\",\n        \"Induced or Spontaneous Labour Cesarean Section\",\n        \"No Labour - Cesarean Section\",\n        \"Unknown\"\n    ]);\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = reactive([\n        \"None\",\n        \"Brachial plexus injury\",\n        \"Caput succedaneum\",\n        \"Cephalohematoma\",\n        \"Clavicular fracture\",\n        \"Facial nerve injury\",\n        \"Fracture - other\",\n        \"Palsy - other\",\n        \"Birth injury - other\",\n        \"Unknown\"\n    ]);\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = reactive([\n        {\n            value: \"No Transfer\",\n            label: \"No Transfer\"\n        },\n        {\n            value: \"Discharged Home\",\n            label: \"Discharged Home\"\n        },\n        {\n            value: \"Transfer to other organization\",\n            label: \"Transfer to other organization\"\n        },\n        {\n            value: \"Transfer to ICU/CCU\",\n            label: \"Transfer to ICU/CCU\"\n        },\n        {\n            value: \"Transfer to other non-obstetrical unit same hospital\",\n            label: \"Transfer to other non-obstetrical unit same hospital\"\n        },\n        {\n            value: \"Maternal Death -Not related to Pregnancy or Birth\",\n            label: \"Maternal Death -Not related to Pregnancy or Birth\"\n        },\n        {\n            value: \"Maternal Death - Related to Pregnancy or Birth\",\n            label: \"Maternal Death - Related to Pregnancy or Birth\"\n        }\n    ]);\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n"],"sourceRoot":""}