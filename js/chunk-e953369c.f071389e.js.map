{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js","webpack:///./node_modules/core-js/modules/es.array.join.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","spermTooLowCountValidator","complications","helpers","withParams","length","includes","req","typeOfPregnancyValidator","embryoTransfer","fetalSacsUSValidator","param","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","treatmentOutcomeValidator","cycleCancelled","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","validator","withMessage","dependentOn","_save","join","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","spermOriginValidator","oocytesInseminatedInjected","cyccleType","CycleType","EGG_FREEZING","FET","spermSourceValidator","isIVForFETCycle","spermCountValidator","semenVolumeValidator","spermOrigin","spermSource","intersection","freshSpermOrigins","filter","oocyteOriginValidator","cycleType","retrievedOrThawedValidator","oocyteCryoPreservedValidator","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","TIME_0","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","cycleDate","reasonsForTreatmentCycleValidtor","useObstetricalHistoryFormInit","priorBirths","priorPregnancies","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","pgtAPlanned","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","noOfDaysGonadotropinsValidator","medicationForCOS","FSH_VALIDATORS_MEDICATION_FOR_COS","totalDoseFSHValidator","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","mediAdminisPriorCosValidator","cycle","totalDoseRekovelleMcgValidator","FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS","progesterOneLevelValidator","reasonCancelledValidator","reasonCancelledDescValidator","ofFolliclesGt15mmValidator","ofFolliclesLt15mmValidator","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","TYPE_OF_STIMULATION_PROTOCOL_DEFAULT","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","ADJUVANT_MEDICATION_DEFAULTS","otherAdjuvantMediDescription","triggerMedication","TRIGGER_MEDICATION_DEFAULTS","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","cycleStopped","totalDoseRekovelleMcg","mediAdminisPriorCos","otherMediPriorCosDesc","minValue","maxValue","patient","age","cycleStoppped","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","medicationAdministraionPriorToCosOptions","medicationAdministraionPriorToCos","reasonCancelledOptions","adjuvantMedicationOptions","embryoTransferValidator","cancel","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","utilizableEmbryos","embryosCryopreserved","utilizableAfterThaw","_utilizableEmbryos","_utilizableAfterThaw","_embryosCryopreserved","calc","SOURCE_TRANSFERRED_EMBRYOS_NOT_FET","sourceTransferredEmbryosValidationMessage","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","elem","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","intersections","TRANSFERRED_EMBRYO_SOURCE_FROZENS","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","endometrialReceptivityTest","getDefaultEndometrialThickness","items","cycleMonitoring","lines","etUs","thickness","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","oocytesRetrieved","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","embryoStageFreezingValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","embryosThawed","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","embryoFreezeDate1Validator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","reasonEmbryoCryopreservation","embryoFreshCryoMethod","payload","emitter","emit","fillFormDefault","getDeafultDataByPrimaryCycle","patientId","cycleId","getFreshEbmryo","resp","status","freshEmbryos","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","cycleIds","cyclesSummary","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","embryoStageThawingOptions","embryoFrozenCryoMethodOptions","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","liveBornFetus","sexFetus","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","id","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","live_born_fetus","sex_fetus","preExistingMentalHealthCondition","useBornFieldOptions","complicationsOfPregnancyOptions","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","newbornComplications","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS","$","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","Object","STRICT_METHOD","target","proto","forced","separator","call","this","undefined"],"mappings":"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","file":"js/chunk-e953369c.f071389e.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission\n    };\n}\n","import { CycleType, DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport {\n    ADJUVANT_MEDICATION_DEFAULTS,\n    CYCLE_START_DATE_JAN_19,\n    FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS,\n    FSH_VALIDATORS_MEDICATION_FOR_COS,\n    RADIO_NO,\n    RADIO_YES,\n    TIME_0,\n    TRANSFERRED_EMBRYO_SOURCE_FROZENS,\n    TRIGGER_MEDICATION_DEFAULTS,\n    TYPE_OF_STIMULATION_PROTOCOL_DEFAULT\n} from \"@/constants\";\nimport { getFreshEbmryo } from \"@/service/born\";\nimport { emitter } from \"@/event-bus\";\n\nconst spermTooLowCountValidator = (complications) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (complications.value.length == 0) {\n            return true;\n        }\n\n        if (complications.value.includes(\"None\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst typeOfPregnancyValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return value === \"Not Pregnant\";\n        }\n\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst fetalSacsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == null ||\n            param.typeOfPregnancy == \"Biochemical\" ||\n            param.typeOfPregnancy == \"Not Pregnant\" ||\n            param.typeOfPregnancy == \"Unknown\"\n        ) {\n            return true;\n        }\n\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\"\n        ) {\n            return parseInt(value) > 0;\n        }\n\n        if (param.typeOfPregnancy == \"Ectopic\") {\n            return parseInt(value) >= 0;\n        }\n\n        return true;\n    });\n\nconst fetalheartsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\n                typeOfPregnancy.value == \"Heterotopic\") &&\n            parseInt(fetalheartsUS.value) >= 2\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst treatmentOutcomeValidator = (embryoTransfer, cycleCancelled) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\" || cycleCancelled.value == \"yes\") {\n            return value == \"Cycle not completed to transfer\" || value == null;\n        }\n\n        return true;\n    });\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const confirm = useConfirm();\n\n    const form = reactive({\n        complications: [],\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\n\n    const fillForm = (data) => {\n        form.complications = data.complications ? data.complications : [];\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n        if (data.treatmentOutcome != null) {\n            form.treatmentOutcome = data.treatmentOutcome;\n        }\n        if (data.typeOfPregnancy != null) {\n            form.typeOfPregnancy = data.typeOfPregnancy;\n        }\n    };\n\n    const rule = {\n        complications: {\n            required\n        },\n        spermTooLowCount: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermTooLowCountValidator(computed(() => form.complications))\n            )\n        },\n        typeOfPregnancy: {\n            validator: helpers.withMessage(\n                \"Value Required if embryo transfer is yes & must be Not Pregnent if embryo transfer is no\",\n                typeOfPregnancyValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer)\n                )\n            )\n        },\n        fetalSacsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalSacsUSValidator(form)\n            )\n        },\n        fetalheartsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalheartsUSValidator(form)\n            )\n        },\n        chorionicity: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        electiveFetalReduction: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        treatmentOutcome: {\n            validator: helpers.withMessage(\n                \"Value Must be Cycle not completed to transfer or null\",\n                treatmentOutcomeValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer),\n                    computed(() => store.state.born.dependentOn.cycleCancelled)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            complications: form.complications.join(\",\"),\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fetalSacsUSWarning = ref();\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        confirm,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nconst newbornDateBirthValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst pregnancyLossDateValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050890\" ||\n            form.pregnancyBirthOutcome == \"1050900\" ||\n            form.pregnancyBirthOutcome == \"1050910\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst babiesbornValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                pregnancyLossDateValidator(form)\n            )\n        },\n        newbornDateBirth: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                newbornDateBirthValidator(form)\n            )\n        },\n        babiesborn: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                babiesbornValidator(form)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: form.newbornDateBirth\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\n                : null,\n            pregnancyLossDate: form.pregnancyLossDate\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\n                : null\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermOriginValidator = (oocytesInseminatedInjected, cyccleType) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (\n            cyccleType.value == CycleType.EGG_FREEZING ||\n            cyccleType.value == CycleType.FET\n        ) {\n            return true;\n        }\n\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermSourceValidator = (oocytesInseminatedInjected, cyccleType) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (\n            cyccleType.value == CycleType.EGG_FREEZING ||\n            cyccleType.value == CycleType.FET\n        ) {\n            return true;\n        }\n\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        return true; // temp for now\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // return true; // temp for now\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermCountValidator = (spermTooLowCount) =>\n    helpers.withParams({ type: \"spermTooLowCond\" }, (value) => {\n        if (spermTooLowCount.value == \"N\") {\n            return value >= 1 && value <= 999;\n        }\n        return true;\n    });\n\nconst semenVolumeValidator = (spermOrigin, spermSource, cyccleType) =>\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\n        if (cyccleType.value == \"Egg Freezing\") return true;\n\n        let intersection = [];\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\n        intersection = spermOrigin.value.filter((item) =>\n            freshSpermOrigins.includes(item)\n        );\n\n        if (spermSource.value == \"SSRC001\" && intersection.length > 0) {\n            return helpers.req(value) && value >= 0.1 && value <= 15;\n        }\n\n        return true;\n    });\n\nconst oocyteOriginValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == CycleType.FET) {\n            return true;\n        }\n        return helpers.req(value);\n    });\n\nconst retrievedOrThawedValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == CycleType.FET) {\n            return true;\n        }\n        return helpers.req(value);\n    });\n\nconst oocyteCryoPreservedValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == CycleType.FET) {\n            return true;\n        }\n        return helpers.req(value);\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isIVForFETCycle(store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        oocyteCryoPreserved: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                oocyteCryoPreservedValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        oocyteCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermOrigin: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermOriginValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    ),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        spermSource: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermSourceValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    ),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        oocyteFreezeDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermCount: {\n            validator: helpers.withMessage(\n                \"Value must be between 1 to 999\",\n                spermCountValidator(computed(() => form.spermTooLowCount))\n            )\n        },\n        oocyteOrigin: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                oocyteOriginValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        retrievedOrThawed: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                retrievedOrThawedValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        semenVolume: {\n            validator: helpers.withMessage(\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\n                'Fresh partner sperm' or 'Fresh own sperm'\n                and SpermSource = 'Semen'.\n                Range: 0.1 - 15 mL.`,\n                semenVolumeValidator(\n                    computed(() => form.spermOrigin),\n                    computed(() => form.spermSource),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: form.oocyteCollectionDate\n                ? format(\n                      new Date(form.oocyteCollectionDate),\n                      DATE_FORMAT_STRING\n                  )\n                : null,\n            oocyteThawDate: form.oocyteThawDate\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\n                : null,\n            oocyteFreezeDate: form.oocyteFreezeDate\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\n                : null,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate + TIME_0)\n            : null;\n        form.oocyteThawDate = data.oocyteThawDate\n            ? new Date(data.oocyteThawDate + TIME_0)\n            : null;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n\n        if (store.state.artCycle.selectedCycle.cycleType != \"Egg Freezing\") {\n            form.spermOrigin = data.spermOrigin;\n            form.ageSpermProvider = data.ageSpermProvider;\n            form.spermDonorID = data.spermDonorID;\n            form.spermDonorStatus = data.spermDonorStatus;\n            form.spermMotility = data.spermMotility;\n            form.spermTooLowCount = data.spermTooLowCount;\n            form.spermDonorBank = data.spermDonorBank;\n            form.spermSource = data.spermSource;\n            form.semenVolume = data.semenVolume;\n            form.spermCount = data.spermCount;\n        }\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.reasonsForTreatmentCycle.includes(\"TCR004\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst provincialFundingValidator = (cycleDate) =>\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst reasonsForTreatmentCycleValidtor = (value) => {\n    return value.length > 0;\n};\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: 0,\n        priorETsOwnOocytes: 0,\n        priorETsDonorOocytes: 0,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: [],\n        reasonsForMaleFactor: [],\n        pgtAPlanned: null\n    });\n\n    const rules = {\n        priorBirths: {\n            required\n        },\n        typeOfFunding: {\n            validator: requiredIfprovincialFundingIsYes(form)\n        },\n        priorPregnancies: { required },\n        reasonsForMaleFactor: {\n            validator: helpers.withMessage(\n                \"Required when Reason for treatment cycle is male\",\n                requiredIfReasonsForTreatmentCycleIsMaleFactor(form)\n            )\n        },\n        provincialFundingForThisCycle: {\n            validator: provincialFundingValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        reasonsForTreatmentCycle: {\n            validator: helpers.withMessage(\n                \"At least one value is requred\",\n                reasonsForTreatmentCycleValidtor\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted\n            ? data.priorFreshCyclesStarted\n            : 0;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes\n            ? data.priorETsOwnOocytes\n            : 0;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes\n            ? data.priorETsDonorOocytes\n            : 0;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle\n            ? data.reasonsForTreatmentCycle\n            : [];\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor\n            ? data.reasonsForMaleFactor\n            : [];\n        form.pgtAPlanned = data.pgtAPlanned ? data.pgtAPlanned : \"N\";\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst noOfDaysGonadotropinsValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\n        let intersection = [];\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\n            medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseFSHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\n        let intersection = [];\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\n            medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) >= 50 &&\n                parseInt(value) <= 30000\n            );\n        }\n\n        return true;\n    });\n\nconst totalDoseLHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return (\n                helpers.req(value) &&\n                parseFloat(value) >= 200 &&\n                parseFloat(value) <= 400\n            );\n        }\n\n        return true;\n    });\n\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\n            return helpers.req(value) && value > 0 && value <= 50;\n        }\n\n        if (value != null) {\n            return value > 0 && value <= 50;\n        }\n\n        return true;\n    });\n\nconst mediAdminisPriorCosValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cycleType == \"FET\" ||\n            cycle.value.cycleType == \"FOIVF\"\n        ) {\n            return true;\n        }\n\n        if (new Date(cycle.value.cycleDate) > new Date(\"2022-01-01\")) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\"];\n        let intersection = [];\n        intersection = FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS.filter(\n            (item) => medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst progesterOneLevelValidator = (value) => {\n    if (value == null) return true;\n    else {\n        return value > 0 && value <= 31.4;\n    }\n};\n\nconst reasonCancelledValidator = (cycleCancelled) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (cycleCancelled.value == \"no\") {\n            return value.length == 0;\n        } else {\n            return value.length > 0;\n        }\n    });\n\nconst reasonCancelledDescValidator = (cycleCancelled) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        return true;\n        if (cycleCancelled.value == \"no\") {\n            return value == \"\" || value == null;\n        } else {\n            return helpers.req(value);\n        }\n    });\n\nconst ofFolliclesGt15mmValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == \"FET\") return true;\n        return helpers.req(value) && value > 0 && value <= 25;\n    });\n\nconst ofFolliclesLt15mmValidator = (cycleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cycleType.value == \"FET\") return true;\n        return helpers.req(value);\n    });\n\n// const ofFolliclesGt15mmValidator = (cycleType) =>\n//     helpers.withParams({ type: \"cycleType\" }, (value) => {\n//         console.log(value);\n//         return helpers.req(value) && value > 0 && value <= 25;\n//     });\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: TYPE_OF_STIMULATION_PROTOCOL_DEFAULT,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: ADJUVANT_MEDICATION_DEFAULTS,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: TRIGGER_MEDICATION_DEFAULTS,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: \"no\",\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null,\n        cycleStopped: \"N\",\n        totalDoseRekovelleMcg: null,\n        mediAdminisPriorCos: null,\n        otherMediPriorCosDesc: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        hightOfOocyteHight: {\n            minValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                minValue(90)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                maxValue(240)\n            )\n        },\n        weightOfOocyte: {\n            minValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                minValue(25)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                maxValue(227)\n            )\n        },\n        noOfDaysGonadotropins: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                noOfDaysGonadotropinsValidator(\n                    computed(() => form.medicationForCOS)\n                )\n            )\n        },\n        totalDoseFSH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 50 and 30000\",\n                totalDoseFSHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        medicationForCOS: { required },\n        totalDoseLH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 200 and 400\",\n                totalDoseLHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        afcOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                afcOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        amhLevelOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required & must be between 0 to 50\",\n                amhLevelOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        mediAdminisPriorCos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                mediAdminisPriorCosValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        totalDoseRekovelleMcg: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                totalDoseRekovelleMcgValidator(\n                    computed(() => form.medicationForCOS)\n                )\n            )\n        },\n        progesterOneLevel: {\n            validator: helpers.withMessage(\n                \"Value must be in range of 0 to 31.4 & value has to be multiplied by 3.18\",\n                progesterOneLevelValidator\n            )\n        },\n        estradiolLevel: {\n            minValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                minValue(0)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                maxValue(40000)\n            )\n        },\n        reasonCancelled: {\n            validator: helpers.withMessage(\n                \"Value must be empty if cycle cancelled is no\",\n                reasonCancelledValidator(\n                    computed(() => form.cycleCancelledBeforeRetrieval)\n                )\n            )\n        },\n        otherReasonCanDesc: {\n            validator: helpers.withMessage(\n                \"Value must be empty if cycle cancelled is no\",\n                reasonCancelledDescValidator(\n                    computed(() => form.cycleCancelledBeforeRetrieval)\n                )\n            )\n        },\n        ofFolliclesGt15mm: {\n            validator: helpers.withMessage(\n                \"Value required & must between 0 ot 25\",\n                ofFolliclesGt15mmValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        ofFolliclesLs15mm: {\n            validator: helpers.withMessage(\n                \"Value required\",\n                ofFolliclesLt15mmValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                adjuvantMedication: form.adjuvantMedication.join(\",\"),\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication =\n            data.adjuvantMedication.length > 0\n                ? data.adjuvantMedication\n                : ADJUVANT_MEDICATION_DEFAULTS;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol\n            ? data.typeOfStimulationProtocol\n            : TYPE_OF_STIMULATION_PROTOCOL_DEFAULT;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication\n            ? data.triggerMedication\n            : TRIGGER_MEDICATION_DEFAULTS;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.cycleCancelledBeforeRetrieval =\n            data.cycleCancelledBeforeRetrieval == \"yes\" ? \"yes\" : \"no\";\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n        form.cycleStopped = data.cycleStoppped == \"Y\" ? \"Y\" : \"N\";\n        form.mediAdminisPriorCos = data.mediAdminisPriorCos;\n        form.totalDoseRekovelleMcg = data.totalDoseRekovelleMcg;\n        form.otherMediPriorCosDesc = data.otherMediPriorCosDesc;\n\n        if (data.endometrialThicknessFreshCycle) {\n            form.endometrialThicknessFreshCycle =\n                data.endometrialThicknessFreshCycle;\n        }\n\n        if (data.estradiolLevel) {\n            form.estradiolLevel = data.estradiolLevel;\n        }\n\n        if (data.progesterOneLevel) {\n            form.progesterOneLevel = data.progesterOneLevel;\n        }\n\n        if (data.totalDoseLH) {\n            form.totalDoseLH = data.totalDoseLH;\n        }\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const medicationAdministraionPriorToCosOptions = computed(\n        () => store.state.options.medicationAdministraionPriorToCos\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        medicationAdministraionPriorToCosOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst embryoTransferValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cancel == false ||\n            cycle.value.cyccleType == \"FET\" ||\n            cycle.value.cyccleType == \"FOIVF\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\nconst isEbryoTrasferNo = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isEbryoTrasferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preparationUterineLiningValidator = (cycleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst transferDateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst dateETAdjustedValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst assistedZonaHatchingValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst embryosTransferredValidator = (\n    embryoTransfer,\n    utilizableEmbryos,\n    embryosCryopreserved,\n    utilizableAfterThaw\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        let _utilizableEmbryos =\n            utilizableEmbryos.value != null\n                ? parseInt(utilizableEmbryos.value)\n                : 0;\n        let _utilizableAfterThaw =\n            utilizableAfterThaw.value != null\n                ? parseInt(utilizableAfterThaw.value)\n                : 0;\n        let _embryosCryopreserved =\n            embryosCryopreserved.value != null\n                ? parseInt(embryosCryopreserved.value)\n                : 0;\n\n        let calc =\n            _utilizableEmbryos + _utilizableAfterThaw - _embryosCryopreserved;\n\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value) && parseInt(value) <= calc;\n        }\n        return true;\n    });\n\nconst SOURCE_TRANSFERRED_EMBRYOS_NOT_FET = [\n    \"TES001\",\n    \"TES002\",\n    \"TES010\",\n    \"TES011\",\n    \"TES004\"\n];\n\nconst sourceTransferredEmbryosValidationMessage = (cycleType) => {\n    if (cycleType == \"FET\") {\n        return `Value requied & value cannot be from one from those -\n            1-Fresh embryos from own oocytes-partner sperm\n            2-Fresh embryos from own oocytes-donor sperm\n            3-Fresh embryos from partner oocytes-donor sperm\n            4-Fresh embryos from donor oocytes-own sperm\n            5-Fresh embryos from donor oocytes-partner sperm\n        `;\n    }\n    return \"Valur required\";\n};\n\nconst sourceTransferredEmbryosValidator = (embryoTransfer, cyccleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            let intersection = value.filter((item) =>\n                SOURCE_TRANSFERRED_EMBRYOS_NOT_FET.includes(item)\n            );\n            if (intersection.length > 0) return false;\n        }\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst transferInseminationMethodValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\n        const intersection = freshSourceTransferredEmbryosIds.filter((elem) =>\n            [...sourceTransferredEmbryos.value].includes(elem)\n        );\n\n        if (\n            noOfEmbryosTransferred.value == 1 &&\n            intersection.length != 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingValidator = (\n    embryoTransfer,\n    cycleDate,\n    pgtAPlanned\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n\n        if (pgtAPlanned.value == \"Y\") {\n            return value == \"yes\";\n        }\n        return true;\n    });\n\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst charTransferredEmbryoValidator = (\n    noOfEmbryosTransferred,\n    preImplementationGeneticSergery,\n    cycleDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            preImplementationGeneticSergery.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        // if (\n        //     preImplementationGeneticSergery.value == \"yes\" &&\n        //     parseInt(noOfEmbryosTransferred.value) == 1 &&\n        //     new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        // ) {\n        //     return helpers.req(value);\n        // }\n        return true;\n    });\n\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (preImplGeneticTesting.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst gestationalCarrierSurrogateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // && new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n\n        let intersections = [];\n        intersections = sourceTransferredEmbryos.value.filter((item) => {\n            return TRANSFERRED_EMBRYO_SOURCE_FROZENS.includes(item);\n        });\n\n        if (intersections.length > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst endometrialThicknessValidtor = (cyccleType) =>\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: [],\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null,\n        endometrialReceptivityTest: null\n    });\n\n    const rules = {\n        embryoTransfer: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoTransferValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        reasonsNoET: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferNo(computed(() => form.embryoTransfer))\n            )\n        },\n        preparationUterineLining: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                preparationUterineLiningValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        transferDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        dateETAdjusted: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        assistedZonaHatching: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        embryosTransferred: {\n            validator: helpers.withMessage(\n                \"Value Required and value cannot be greated than (utilizableEmbryos + utilizableAfterThaw - embryosCryopreserved) \",\n                embryosTransferredValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(\n                        () => store.state.born.dependentOn.utilizableEmbryos\n                    ),\n                    computed(\n                        () => store.state.born.dependentOn.embryosCryopreserved\n                    ),\n                    computed(\n                        () => store.state.born.dependentOn.utilizableAfterThaw\n                    )\n                )\n            )\n        },\n        sourceTransferredEmbryos: {\n            validator: helpers.withMessage(\n                sourceTransferredEmbryosValidationMessage(\n                    store.state.artCycle.selectedCycle.cycleType\n                ),\n                sourceTransferredEmbryosValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        transferInseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                transferInseminationMethodValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        preImplGeneticTesting: {\n            validator: helpers.withMessage(\n                \"Value Required & must be YES if PGT A Planned is YES\",\n                preImplGeneticTestingValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(\n                        () => store.state.artCycle.selectedCycle.cycleDate\n                    ),\n                    computed(() => store.state.born.dependentOn.pgtAPlanned)\n                )\n            )\n        },\n        charTransferredEmbryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                charTransferredEmbryoValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        sitePGTembryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                sitePGTembryoValidator(\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        gestationalCarrierSurrogate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        numberThaws: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                numberThawsValidator(\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        endometrialThickness: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                endometrialThicknessValidtor(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getDefaultEndometrialThickness = () => {\n        let items = store.state.cycleMonitoring.lines.filter(\n            (item) => item.etUs != null\n        );\n\n        if (items.length == 0) return null;\n\n        let thickness = items[items.length - 1].etUs\n            ? parseFloat(items[items.length - 1].etUs)\n            : null;\n\n        return thickness;\n    };\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness\n            ? data.endometrialThickness\n            : getDefaultEndometrialThickness();\n        form.transferDate = data.transferDate\n            ? new Date(data.transferDate + \" 00:00:00\")\n            : null;\n        form.dateETAdjusted = data.dateETAdjusted ? data.dateETAdjusted : \"no\";\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos\n            ? data.sourceTransferredEmbryos\n            : [];\n        form.transferInseminationMethod = data.transferInseminationMethod;\n\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate\n            ? data.gestationalCarrierSurrogate\n            : \"no\";\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n        form.endometrialReceptivityTest = data.endometrialReceptivityTest\n            ? data.endometrialReceptivityTest\n            : \"N\";\n\n        if (store.state.born.dependentOn.pgtAPlanned == \"Y\") {\n            form.preImplGeneticTesting = \"yes\";\n        } else {\n            form.preImplGeneticTesting = data.preImplGeneticTesting\n                ? data.preImplGeneticTesting\n                : \"no\";\n        }\n    };\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions,\n        getDefaultEndometrialThickness\n    };\n}\n\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nconst oocytesNotUsedValidator = (\n    oocytesRetrieved,\n    inseminatedInjected,\n    oocytesCryopreserved,\n    cycleType\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return true;\n        } else {\n            return (\n                helpers.req(value) &&\n                parseInt(value) ==\n                    oocytesRetrieved.value -\n                        inseminatedInjected.value -\n                        oocytesCryopreserved.value\n            );\n        }\n    });\n\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (oocytesNotUsed.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n        if (noOfOocytesRetrieved.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOfOocytesRetrieved.value\n            );\n        }\n        return true;\n    });\n\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\n\nconst embryosCryopreservedValidator = (\n    noOocytesInseminatedInjected,\n    embryosThawed\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n\n        return value <= embryosThawed.value;\n    });\n\nconst reasonEmbryoCryopreservationValidator = (\n    embryosCryopreserved,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryosCryopreserved.value > 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst embryoFreezeDate1Validator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"embryosCryopreserved\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: [],\n        oocytesNotUsed: null,\n        reasonsForNoUse: [],\n        embryoStageFreezing: [],\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                inseminationMethodValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    )\n                )\n            )\n        },\n        oocytesNotUsed: {\n            validator: helpers.withMessage(\n                \"Value must be equal to oocytesRetrieved - inseminatedInjected - oocytesCryopreserved\",\n                oocytesNotUsedValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    ),\n                    computed(() => form.inseminatedInjected),\n                    computed(\n                        () => store.state.born.dependentOn.oocytesCryopreserved\n                    ),\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        reasonsForNoUse: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonsForNoUseValidator(computed(() => form.oocytesNotUsed))\n            )\n        },\n        embryoStageFreezing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoStageFreezingValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        inseminatedInjected: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        normalFertilization2PN: {\n            validator: helpers.withMessage(\n                \"Value Required and must be less or equal to oocytes inseminated/injected\",\n                normalFertilization2PNValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        ofMII: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                ofMIIValidator(computed(() => form.inseminatedInjected))\n            )\n        },\n        utilizableEmbryos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                utilizableEmbryosValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        embryosCryopreserved: {\n            validator: helpers.withMessage(\n                \"Value Required & value must be less than # embryos Thawed\",\n                embryosCryopreservedValidator(\n                    computed(() => form.inseminatedInjected),\n                    computed(() => store.state.born.dependentOn.embryosThawed)\n                )\n            )\n        },\n        reasonEmbryoCryopreservation: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonEmbryoCryopreservationValidator(\n                    computed(() => form.embryosCryopreserved),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        embryoFreshCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreshCryoMethodValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        embryoFreezeDate1: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreezeDate1Validator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        let payload = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            embryoFreezeDate1: form.embryoFreezeDate1\n                ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate2: form.embryoFreezeDate2\n                ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate3: form.embryoFreezeDate3\n                ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate4: form.embryoFreezeDate4\n                ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                : null\n        };\n\n        // return;\n\n        store.dispatch(\"born/updateFreshEmbryo\", payload).then(() => {\n            toast.add({\n                severity: \"success\",\n                summary: \"\",\n                detail: \"Save Successful\",\n                life: 3000\n            });\n        });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        emitter.emit(\"fresh-embryo:on-save\");\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\n            ? new Date(data.embryoFreezeDate1 + TIME_0)\n            : null;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\n            ? new Date(data.embryoFreezeDate2 + TIME_0)\n            : null;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\n            ? new Date(data.embryoFreezeDate3 + TIME_0)\n            : null;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\n            ? new Date(data.embryoFreezeDate4 + TIME_0)\n            : null;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const fillFormDefault = (data) => {\n        if (form.inseminationMethod.length == 0)\n            form.inseminationMethod = data.inseminationMethod;\n        if (form.oocytesNotUsed == null)\n            form.oocytesNotUsed = data.oocytesNotUsed;\n        if (form.reasonsForNoUse.length == 0)\n            form.reasonsForNoUse = data.reasonsForNoUse;\n        if (form.embryoStageFreezing.length == 0)\n            form.embryoStageFreezing = data.embryoStageFreezing;\n        if (form.inseminatedInjected == null)\n            form.inseminatedInjected = data.inseminatedInjected;\n        if (form.embryoFreezeID1 == null)\n            form.embryoFreezeID1 = data.embryoFreezeID1;\n        if (form.embryoFreezeID2 == null)\n            form.embryoFreezeID2 = data.embryoFreezeID2;\n        if (form.embryoFreezeID3 == null)\n            form.embryoFreezeID3 = data.embryoFreezeID3;\n        if (form.embryoFreezeID4 == null)\n            form.embryoFreezeID4 = data.embryoFreezeID4;\n        if (form.normalFertilization2PN == null)\n            form.normalFertilization2PN = data.normalFertilization2PN;\n        if (form.embryoFreezeDate1 == null)\n            form.embryoFreezeDate1 = data.embryoFreezeDate1\n                ? new Date(data.embryoFreezeDate1 + TIME_0)\n                : null;\n        if (form.embryoFreezeDate2 == null)\n            form.embryoFreezeDate2 = data.embryoFreezeDate2\n                ? new Date(data.embryoFreezeDate2 + TIME_0)\n                : null;\n        if (form.embryoFreezeDate3 == null)\n            form.embryoFreezeDate3 = data.embryoFreezeDate3\n                ? new Date(data.embryoFreezeDate3 + TIME_0)\n                : null;\n        if (form.embryoFreezeDate4 == null)\n            form.embryoFreezeDate4 = data.embryoFreezeDate4\n                ? new Date(data.embryoFreezeDate4 + TIME_0)\n                : null;\n        if (form.ofMII == null) form.ofMII = data.ofMII;\n        if (form.utilizableEmbryos == null)\n            form.utilizableEmbryos = data.utilizableEmbryos;\n        if (form.embryosCryopreserved == null)\n            form.embryosCryopreserved = data.embryosCryopreserved;\n        if (form.reasonEmbryoCryopreservation == null)\n            form.reasonEmbryoCryopreservation =\n                data.reasonEmbryoCryopreservation;\n        if (form.embryoFreshCryoMethod == null)\n            form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const getDeafultDataByPrimaryCycle = async ({ patientId, cycleId }) => {\n        const resp = await getFreshEbmryo(patientId, cycleId);\n        if (resp.status == \"success\") {\n            fillFormDefault(resp.freshEmbryos);\n        }\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    const cycleIds = computed(() => store.state.artCycle.cyclesSummary);\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        cycleIds,\n        getDeafultDataByPrimaryCycle\n    };\n}\n\nconst isFETCycleValidator = (cyccleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoStageThawing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoFrozenCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoThawDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        donatedEmbryoFromAnotherCouple: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null,\n                embryoThawDate: form.embryoThawDate\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate + TIME_0)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate + TIME_0)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoFrozenCryoMethodOptions = computed(\n        () => store.state.options.embryoFrozenCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoFrozenCryoMethodOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\n        if (parseInt(noOfBabiesBorn.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null,\n        liveBornFetus: null,\n        sexFetus: null\n    });\n\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\n    const medicationForCOS = ref();\n\n    const rules = {\n        congenitalAnomalies: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                congenitalAnomaliesValidator(\n                    computed(() => store.state.born.dependentOn.noOfBabiesBorn)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\n            ? new Date(data.estimated_date_of_birth)\n            : null;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n        form.liveBornFetus = data.live_born_fetus; // todo after service\n        form.sexFetus = data.sex_fetus; // todo after service\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome,\n            preExistingMentalHealthCondition:\n                form.preExistingMentalHealthCondition,\n            sex_fetus: form.sexFetus,\n            live_born_fetus: form.liveBornFetus\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra,\n        medicationForCOS,\n        medicationForCOSContainFSHOrLhOrFshPlusLH\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsOfPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = computed(\n        () => store.state.options.typeOfLabour\n    );\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = computed(\n        () => store.state.options.typeOfDelivery\n    );\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = computed(\n        () => store.state.options.newbornComplications\n    );\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = computed(\n        () => store.state.options.maternalOutcome\n    );\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n"],"sourceRoot":""}