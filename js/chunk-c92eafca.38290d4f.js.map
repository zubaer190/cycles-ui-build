{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js","webpack:///./src/composable/validator.js","webpack:///./node_modules/core-js/modules/es.array.join.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","hasBornCSVPermission","readPermission","spermTooLowCountValidator","complications","helpers","withParams","length","includes","req","typeOfPregnancyValidator","embryoTransfer","fetalSacsUSValidator","param","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","validator","withMessage","dependentOn","_save","join","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","Date","validDate","console","log","format","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","oocyteCollectionDateValidator","semenVolumeValidator","spermOrigin","spermSource","cyccleType","intersection","freshSpermOrigins","filter","spermMotilityValidator","cycleType","CycleType","EGG_FREEZING","spermDonorIDValidator","spermDonorStatusValidator","oocyteOriginValidator","FET","retrievedOrThawedValidator","oocyteCryoPreservedValidator","donorProviderSatusValidator","oocyteOrigin","OOCYTE_ORIGIN","FRESH_DONOR_OOCYTES","FROZEN_DONOR_OOCYTES","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","donorProviderstatus","oocyteCryoMethod","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","TIME_0","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","cycleDate","reasonsForTreatmentCycleValidtor","useObstetricalHistoryFormInit","priorBirths","priorPregnancies","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","pgtAPlanned","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","noOfDaysGonadotropinsValidator","medicationForCOS","FSH_VALIDATORS_MEDICATION_FOR_COS","totalDoseFSHValidator","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","mediAdminisPriorCosValidator","cycle","totalDoseRekovelleMcgValidator","FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS","progesterOneLevelValidator","reasonCancelledValidator","cycleCancelled","reasonCancelledDescValidator","ofFolliclesGt15mmValidator","ofFolliclesLt15mmValidator","medicationForCOSValidator","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","TYPE_OF_STIMULATION_PROTOCOL_DEFAULT","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","ADJUVANT_MEDICATION_DEFAULTS","otherAdjuvantMediDescription","triggerMedication","TRIGGER_MEDICATION_DEFAULTS","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","cycleStopped","totalDoseRekovelleMcg","mediAdminisPriorCos","MEDI_ADMINIS_PRIOR_COS_DEFUALT","otherMediPriorCosDesc","minValue","maxValue","patient","age","cycleStoppped","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","medicationAdministraionPriorToCosOptions","medicationAdministraionPriorToCos","reasonCancelledOptions","adjuvantMedicationOptions","useBornMarkAsComplete","markAsComplete","source","payload","patientId","id","cycleId","$axios","post","embryoTransferValidator","cancel","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","utilizableEmbryos","embryosCryopreserved","utilizableAfterThaw","_utilizableEmbryos","_utilizableAfterThaw","_embryosCryopreserved","calc","SOURCE_TRANSFERRED_EMBRYOS_NOT_FET","sourceTransferredEmbryosValidationMessage","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","elem","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","intersections","TRANSFERRED_EMBRYO_SOURCE_FROZENS","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","endometrialReceptivityTest","undefined","getDefaultEndometrialThickness","items","cycleMonitoring","lines","etUs","thickness","PREPARATION_UTERINE_LINING_DEFAULT","fertilizationEmbryoThawDate","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","oocytesRetrieved","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","embryoStageFreezingValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","embryosThawed","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","embryoFreezeDate1Validator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","reasonEmbryoCryopreservation","embryoFreshCryoMethod","emitter","emit","fillFormDefault","getDeafultDataByPrimaryCycle","getFreshEbmryo","resp","status","freshEmbryos","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","cycleIds","cyclesSummary","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","commit","embryoStageThawingOptions","embryoFrozenCryoMethodOptions","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","liveBornFetus","sexFetus","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","live_born_fetus","sex_fetus","preExistingMentalHealthCondition","useBornFieldOptions","complicationsOfPregnancyOptions","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","newbornComplications","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS","require","DATE_REGEX","match","$","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","Object","STRICT_METHOD","target","proto","forced","separator","call","this"],"mappings":"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","file":"js/chunk-c92eafca.38290d4f.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\r\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\r\nimport useVuelidate from \"@vuelidate/core\";\r\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\r\nimport { useStore } from \"vuex\";\r\nimport { useRoute } from \"vue-router\";\r\n\r\nexport function useUserForm(type) {\r\n    const store = useStore();\r\n    const buttonLabel = computed(() => {\r\n        if (type === FORM_TYPE.CREATE) {\r\n            return \"Save\";\r\n        }\r\n        if (type === FORM_TYPE.EDIT) {\r\n            return \"Save\";\r\n        }\r\n    });\r\n\r\n    const form = reactive({\r\n        name: null,\r\n        email: null,\r\n        username: null,\r\n        phone: null,\r\n        password: null,\r\n        passwordConfirm: null,\r\n        role: null,\r\n        active: true,\r\n        security: []\r\n    });\r\n\r\n    const rules = {\r\n        name: { required },\r\n        email: { required, email },\r\n        username: { required },\r\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\r\n        passwordConfirm: {\r\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\r\n        }\r\n    };\r\n\r\n    const passwordDidnotMatch = computed(\r\n        () => form.password !== form.passwordConfirm\r\n    );\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n    const submitted = ref(false);\r\n\r\n    const userRoleOptions = [\r\n        { label: \"Yes\", value: \"2\" },\r\n        { label: \"No\", value: \"1\" }\r\n    ];\r\n\r\n    const groupOptions = computed(() => store.state.users.groups);\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        submitted,\r\n        buttonLabel,\r\n        userRoleOptions,\r\n        passwordDidnotMatch,\r\n        groupOptions\r\n    };\r\n}\r\n\r\nexport function usePermissionCheck() {\r\n    const store = useStore();\r\n    const route = useRoute();\r\n\r\n    const permission = computed(() => {\r\n        const idx = store.state.user.permissions.findIndex(\r\n            (item) => `/${item.appKey}` === route.path\r\n        );\r\n        return store.state.user.permissions[idx];\r\n    });\r\n\r\n    const hasUpdatePermission = computed(\r\n        () => permission.value.updatePermission\r\n    );\r\n\r\n    const hasCreatePermission = computed(\r\n        () => permission.value.updatePermission\r\n    );\r\n\r\n    const hasDeletePermission = computed(\r\n        () => permission.value.deletePermission\r\n    );\r\n\r\n    const hasBornCSVPermission = computed(() => {\r\n        const idx = store.state.user.permissions.findIndex(\r\n            (item) => item.appKey === \"born-csv\"\r\n        );\r\n\r\n        if (idx > 0) {\r\n            return store.state.user.permissions[idx].readPermission;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    return {\r\n        hasUpdatePermission,\r\n        hasCreatePermission,\r\n        hasDeletePermission,\r\n        hasBornCSVPermission\r\n    };\r\n}\r\n","import { CycleType, DATE_FORMAT_STRING } from \"@/config\";\r\nimport format from \"date-fns/format\";\r\nimport { useConfirm } from \"primevue/useconfirm\";\r\nimport { useToast } from \"primevue/usetoast\";\r\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\r\nimport useVuelidate from \"@vuelidate/core\";\r\nimport {\r\n    ADJUVANT_MEDICATION_DEFAULTS,\r\n    CYCLE_START_DATE_JAN_19,\r\n    FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS,\r\n    FSH_VALIDATORS_MEDICATION_FOR_COS,\r\n    MEDI_ADMINIS_PRIOR_COS_DEFUALT,\r\n    OOCYTE_ORIGIN,\r\n    PREPARATION_UTERINE_LINING_DEFAULT,\r\n    RADIO_NO,\r\n    RADIO_YES,\r\n    TIME_0,\r\n    TRANSFERRED_EMBRYO_SOURCE_FROZENS,\r\n    TRIGGER_MEDICATION_DEFAULTS,\r\n    TYPE_OF_STIMULATION_PROTOCOL_DEFAULT\r\n} from \"@/constants\";\r\nimport { getFreshEbmryo } from \"@/service/born\";\r\nimport { emitter } from \"@/event-bus\";\r\nimport { $axios } from \"@/service/app-http\";\r\nimport { validDate } from \"@/composable/validator\";\r\n\r\nconst spermTooLowCountValidator = (complications) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (complications.value.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (complications.value.includes(\"None\")) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst typeOfPregnancyValidator = (embryoTransfer) =>\r\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\r\n        if (embryoTransfer.value == \"no\") {\r\n            return value === \"Not Pregnant\";\r\n        }\r\n\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst fetalSacsUSValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            param.typeOfPregnancy == null ||\r\n            param.typeOfPregnancy == \"Biochemical\" ||\r\n            param.typeOfPregnancy == \"Not Pregnant\" ||\r\n            param.typeOfPregnancy == \"Unknown\"\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (\r\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\r\n            param.typeOfPregnancy == \"Heterotopic\" ||\r\n            param.typeOfPregnancy == \"Molar Pregnancy\"\r\n        ) {\r\n            return parseInt(value) > 0;\r\n        }\r\n\r\n        if (param.typeOfPregnancy == \"Ectopic\") {\r\n            return parseInt(value) >= 0;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst fetalheartsUSValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\r\n            param.typeOfPregnancy == \"Heterotopic\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\r\n                typeOfPregnancy.value == \"Heterotopic\") &&\r\n            parseInt(fetalheartsUS.value) >= 2\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst treatmentOutcomeValidator = (embryoTransfer, cycleCancelled) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer.value == \"no\" || cycleCancelled.value == \"yes\") {\r\n            return value == \"Cycle not completed to transfer\" || value == null;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nexport function useComplicationFormInit() {\r\n    const toast = useToast();\r\n    const store = useStore();\r\n    const confirm = useConfirm();\r\n\r\n    const form = reactive({\r\n        complications: [],\r\n        spermTooLowCount: null,\r\n        treatmentOutcome: null,\r\n        typeOfPregnancy: null,\r\n        fetalSacsUS: null,\r\n        fetalheartsUS: null,\r\n        chorionicity: null,\r\n        electiveFetalReduction: null\r\n    });\r\n    const loading = ref(false);\r\n    const complications = computed(() => store.state.born.complications);\r\n\r\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\r\n\r\n    const fillForm = (data) => {\r\n        form.complications = data.complications ? data.complications : [];\r\n        form.spermTooLowCount = data.spermTooLowCount;\r\n        form.fetalSacsUS = data.fetalSacsUS;\r\n        form.fetalheartsUS = data.fetalheartsUS;\r\n        form.chorionicity = data.chorionicity;\r\n        form.electiveFetalReduction = data.electiveFetalReduction;\r\n        if (data.treatmentOutcome != null) {\r\n            form.treatmentOutcome = data.treatmentOutcome;\r\n        }\r\n        if (data.typeOfPregnancy != null) {\r\n            form.typeOfPregnancy = data.typeOfPregnancy;\r\n        }\r\n    };\r\n\r\n    const rule = {\r\n        complications: {\r\n            required\r\n        },\r\n        spermTooLowCount: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                spermTooLowCountValidator(computed(() => form.complications))\r\n            )\r\n        },\r\n        typeOfPregnancy: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required if embryo transfer is yes & must be Not Pregnent if embryo transfer is no\",\r\n                typeOfPregnancyValidator(\r\n                    computed(() => store.state.born.dependentOn.embryoTransfer)\r\n                )\r\n            )\r\n        },\r\n        fetalSacsUS: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                fetalSacsUSValidator(form)\r\n            )\r\n        },\r\n        fetalheartsUS: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                fetalheartsUSValidator(form)\r\n            )\r\n        },\r\n        chorionicity: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\r\n            )\r\n        },\r\n        electiveFetalReduction: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\r\n            )\r\n        },\r\n        // treatmentOutcome: {\r\n        //     validator: helpers.withMessage(\r\n        //         \"Value Must be Cycle not completed to transfer or null\",\r\n        //         treatmentOutcomeValidator(\r\n        //             computed(() => store.state.born.dependentOn.embryoTransfer),\r\n        //             computed(() => store.state.born.dependentOn.cycleCancelled)\r\n        //         )\r\n        //     )\r\n        // }\r\n    };\r\n\r\n    const v$ = useVuelidate(rule, form);\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        const data = {\r\n            ...form,\r\n            complications: form.complications.join(\",\"),\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/updateComplication\", data)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .catch((err) => {})\r\n            .finally(() => (loading.value = false));\r\n    };\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fetalSacsUSWarning = ref();\r\n\r\n    const complicationOptions = computed(\r\n        () => store.state.options.complications\r\n    );\r\n    const treatmentOutcomeOptions = computed(\r\n        () => store.state.options.treatmentOutcome\r\n    );\r\n    const typeOfPregnancyOptions = computed(\r\n        () => store.state.options.typeOfPregnancy\r\n    );\r\n    const chorionicityOptions = computed(\r\n        () => store.state.options.chorionicity\r\n    );\r\n    const electiveFetalReductionOptions = computed(\r\n        () => store.state.options.electiveFetalReduction\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        save,\r\n        v$,\r\n        complications,\r\n        fillForm,\r\n        loading,\r\n        confirm,\r\n        complicationOptions,\r\n        treatmentOutcomeOptions,\r\n        typeOfPregnancyOptions,\r\n        chorionicityOptions,\r\n        electiveFetalReductionOptions\r\n    };\r\n}\r\n\r\nconst newbornDateBirthValidator = (form) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            form.pregnancyBirthOutcome == \"1050880\" ||\r\n            form.pregnancyBirthOutcome == \"1050920\" ||\r\n            form.pregnancyBirthOutcome == \"1050930\" ||\r\n            form.pregnancyBirthOutcome == \"1050940\" ||\r\n            form.pregnancyBirthOutcome == \"1050950\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst pregnancyLossDateValidator = (form) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            form.pregnancyBirthOutcome == \"1050890\" ||\r\n            form.pregnancyBirthOutcome == \"1050900\" ||\r\n            form.pregnancyBirthOutcome == \"1050910\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst babiesbornValidator = (form) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            form.pregnancyBirthOutcome == \"1050880\" ||\r\n            form.pregnancyBirthOutcome == \"1050920\" ||\r\n            form.pregnancyBirthOutcome == \"1050930\" ||\r\n            form.pregnancyBirthOutcome == \"1050940\" ||\r\n            form.pregnancyBirthOutcome == \"1050950\"\r\n        ) {\r\n            return parseInt(value) > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function usePregnancyOutcomeForm() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const form = reactive({\r\n        pregnancyBirthOutcome: null,\r\n        newbornDateBirth: null,\r\n        pregnancyLossDate: null,\r\n        babiesborn: null,\r\n        gestationalWeeks: null,\r\n        gestationalDays: null\r\n    });\r\n    const loading = ref(false);\r\n\r\n    const fillForm = (data) => {\r\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\r\n        form.newbornDateBirth = data.newbornDateBirth ? new Date(data.newbornDateBirth) : null;\r\n        form.pregnancyLossDate = data.pregnancyLossDate ? new Date(data.pregnancyLossDate) : null;\r\n        form.babiesborn = data.babiesborn;\r\n        form.gestationalWeeks = data.gestationalWeeks;\r\n        form.gestationalDays = data.gestationalDays;\r\n    };\r\n\r\n    const rules = {\r\n        pregnancyLossDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                pregnancyLossDateValidator(form)\r\n            ),\r\n            validDate\r\n        },\r\n        newbornDateBirth: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                newbornDateBirthValidator(form)\r\n            ),\r\n            validDate\r\n        },\r\n        babiesborn: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                babiesbornValidator(form)\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n\r\n        console.log(form.newbornDateBirth);\r\n        const data = {\r\n            ...form,\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n            newbornDateBirth: form.newbornDateBirth // && form.newbornDateBirth != ''\r\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\r\n                : null,\r\n            pregnancyLossDate: form.pregnancyLossDate // && form.pregnancyLossDate != ''\r\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\r\n                : null\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/updatePregnancyOutcome\", data)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .catch((err) => {})\r\n            .finally(() => (loading.value = false));\r\n    };\r\n\r\n    const confirm = useConfirm();\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const pregnancyBirthOutcomeOptions = computed(\r\n        () => store.state.options.pregnancyBirthOutcome\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        pregnancyBirthOutcomeOptions,\r\n        loading,\r\n        fillForm,\r\n        save\r\n    };\r\n}\r\n\r\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst spermOriginValidator = (oocytesInseminatedInjected, cyccleType) =>\r\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\r\n        if (\r\n            cyccleType.value == CycleType.EGG_FREEZING ||\r\n            cyccleType.value == CycleType.FET\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst spermSourceValidator = (oocytesInseminatedInjected, cyccleType) =>\r\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\r\n        if (\r\n            cyccleType.value == CycleType.EGG_FREEZING ||\r\n            cyccleType.value == CycleType.FET\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst ageSpermProviderValidator = (oocytesInseminatedInjected, cycleType) =>\r\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) {\r\n            return true;\r\n        }\r\n\r\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\r\n            return helpers.req(value) && value >= 15 && value <= 80;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst isIVForFETCycle = (param) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        return true; // temp for now\r\n        if (param == \"IVF\" || param == \"FET\") {\r\n            return value != null;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst oocyteCollectionDateValidator = (param) =>\r\n    helpers.withParams({ type: \"date\" }, (value) => {\r\n        return true; // temp for now\r\n        if (param == \"IVF\" || param == \"FET\") {\r\n            return value != null;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst isOocyteRetrivedGreaterThan0 = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        // return true; // temp for now\r\n        if (parseInt(param.retrievedOrThawed) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst spermCountValidator = (spermTooLowCount) =>\r\n    helpers.withParams({ type: \"spermTooLowCond\" }, (value) => {\r\n        if (spermTooLowCount.value == \"N\") {\r\n            return value >= 1 && value <= 999;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst semenVolumeValidator = (spermOrigin, spermSource, cyccleType) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cyccleType.value == \"Egg Freezing\") return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (spermSource.value == \"SSRC001\" && intersection.length > 0) {\r\n            return helpers.req(value) && value >= 0.1 && value <= 15;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst spermMotilityValidator = (\r\n    spermOrigin,\r\n    spermSource,\r\n    spermTooLowCount,\r\n    cycleType\r\n) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (\r\n            spermSource.value == \"SSRC001\" &&\r\n            intersection.length > 0 &&\r\n            spermTooLowCount.value != \"Y\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst spermDonorIDValidator = (spermOrigin, cycleType) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM007\", \"SPM003\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst spermDonorStatusValidator = (spermOrigin, cycleType) =>\r\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\r\n        if (cycleType.value == CycleType.EGG_FREEZING) return true;\r\n\r\n        let intersection = [];\r\n        let freshSpermOrigins = [\"SPM007\", \"SPM003\"];\r\n        intersection = spermOrigin.value.filter((item) =>\r\n            freshSpermOrigins.includes(item)\r\n        );\r\n\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst oocyteOriginValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == CycleType.FET) {\r\n            return true;\r\n        }\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst retrievedOrThawedValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == CycleType.FET) {\r\n            return true;\r\n        }\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst oocyteCryoPreservedValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == CycleType.FET) {\r\n            return true;\r\n        }\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst donorProviderSatusValidator = (oocyteOrigin) =>\r\n    helpers.withParams({ type: \"oocyteOrigin\" }, (value) => {\r\n        if (\r\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FRESH_DONOR_OOCYTES) ||\r\n            oocyteOrigin.value.includes(OOCYTE_ORIGIN.FROZEN_DONOR_OOCYTES)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useOocyteCollectionInit() {\r\n    const toast = useToast();\r\n    const store = useStore();\r\n    const form = reactive({\r\n        oocyteCollectionDate: null,\r\n        oocyteThawDate: null,\r\n        collectionDateUnknown: null,\r\n        oocyteFreezeID1Thawed: null,\r\n        oocyteFreezeID2Thawed: null,\r\n        retrievedOrThawed: null,\r\n        oocyteCryoPreserved: null,\r\n        oocyteFreezeID: null,\r\n        donorProviderIDCode: null,\r\n        donorProviderSource: null,\r\n        oocyteFreezeDate: null,\r\n        oocyteOrigin: null,\r\n        donorProviderstatus: null,\r\n        oocyteCryoMethod: null,\r\n        spermOrigin: null,\r\n        ageSpermProvider: null,\r\n        spermDonorID: null,\r\n        spermDonorStatus: null,\r\n        spermMotility: null,\r\n        spermTooLowCount: null,\r\n        spermDonorBank: null,\r\n        spermSource: null,\r\n        semenVolume: null,\r\n        spermCount: null,\r\n        spermCollection: null\r\n    });\r\n    const oocyteCollections = computed(\r\n        () => store.state.born.oocyteCollections\r\n    );\r\n\r\n    const loading = ref(false);\r\n    const rules = {\r\n        oocyteCollectionDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                oocyteCollectionDateValidator(\r\n                    store.state.artCycle.selectedCycle.cycleType\r\n                )\r\n            ),\r\n            validDate\r\n        },\r\n        oocyteThawDate: { validDate },\r\n        oocyteCryoPreserved: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                oocyteCryoPreservedValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        oocyteCryoMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isNumberOocytesCryoedIsGreaterThan0(form)\r\n            )\r\n        },\r\n        // spermOrigin: {\r\n        //     validator: helpers.withMessage(\r\n        //         \"Value Required\",\r\n        //         spermOriginValidator(\r\n        //             computed(\r\n        //                 () =>\r\n        //                     store.state.born.dependentOn\r\n        //                         .oocytesInseminatedInjected\r\n        //             ),\r\n        //             computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n        //         )\r\n        //     )\r\n        // },\r\n        // spermSource: {\r\n        //     validator: helpers.withMessage(\r\n        //         \"Value Required\",\r\n        //         spermSourceValidator(\r\n        //             computed(\r\n        //                 () =>\r\n        //                     store.state.born.dependentOn\r\n        //                         .oocytesInseminatedInjected\r\n        //             ),\r\n        //             computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n        //         )\r\n        //     )\r\n        // },\r\n        // ageSpermProvider: {\r\n        //     validator: helpers.withMessage(\r\n        //         \"Value Required\",\r\n        //         ageSpermProviderValidator(\r\n        //             computed(\r\n        //                 () =>\r\n        //                     store.state.born.dependentOn\r\n        //                         .oocytesInseminatedInjected\r\n        //             ),\r\n        //             computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n        //         )\r\n        //     )\r\n        // },\r\n        oocyteFreezeDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isNumberOocytesCryoedIsGreaterThan0(form)\r\n            ),\r\n            validDate\r\n        },\r\n        spermCount: {\r\n            validator: helpers.withMessage(\r\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\r\n                'Fresh partner sperm' or 'Fresh own sperm'\r\n                and SpermSource = 'Semen'.`,\r\n                spermMotilityValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => form.spermSource),\r\n                    computed(() => form.spermTooLowCount),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        oocyteOrigin: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                oocyteOriginValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        retrievedOrThawed: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                retrievedOrThawedValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        semenVolume: {\r\n            validator: helpers.withMessage(\r\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\r\n                'Fresh partner sperm' or 'Fresh own sperm'\r\n                and SpermSource = 'Semen'.\r\n                Range: 0.1 - 15 mL.`,\r\n                semenVolumeValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => form.spermSource),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        donorProviderstatus: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                donorProviderSatusValidator(computed(() => form.oocyteOrigin))\r\n            )\r\n        },\r\n        spermDonorID: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                spermDonorIDValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        spermDonorStatus: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                spermDonorStatusValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        spermMotility: {\r\n            validator: helpers.withMessage(\r\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\r\n                'Fresh partner sperm' or 'Fresh own sperm'\r\n                and SpermSource = 'Semen'.`,\r\n                spermMotilityValidator(\r\n                    computed(() => form.spermOrigin),\r\n                    computed(() => form.spermSource),\r\n                    computed(() => form.spermTooLowCount),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        const data = {\r\n            ...form,\r\n            oocyteCollectionDate: form.oocyteCollectionDate\r\n                ? format(\r\n                      new Date(form.oocyteCollectionDate),\r\n                      DATE_FORMAT_STRING\r\n                  )\r\n                : null,\r\n            oocyteThawDate: form.oocyteThawDate\r\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\r\n                : null,\r\n            oocyteFreezeDate: form.oocyteFreezeDate\r\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\r\n                : null,\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/updateOocyteCollection\", data)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n                // fillForm(store.state.born.oocyteCollections);\r\n            })\r\n            .finally(() => (loading.value = false));\r\n    };\r\n    const confirm = useConfirm();\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.oocyteCollectionDate = data.oocyteCollectionDate\r\n            ? new Date(data.oocyteCollectionDate + TIME_0)\r\n            : null;\r\n        form.oocyteThawDate = data.oocyteThawDate\r\n            ? new Date(data.oocyteThawDate + TIME_0)\r\n            : null;\r\n        form.collectionDateUnknown = data.collectionDateUnknown;\r\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\r\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\r\n        form.retrievedOrThawed = data.retrievedOrThawed;\r\n        form.oocyteFreezeID = data.oocyteFreezeID;\r\n        form.donorProviderIDCode = data.donorProviderIDCode;\r\n        form.donorProviderSource = data.donorProviderSource;\r\n        form.oocyteFreezeDate = data.oocyteFreezeDate\r\n            ? new Date(data.oocyteFreezeDate + TIME_0)\r\n            : null;\r\n        form.oocyteOrigin = data.oocyteOrigin;\r\n        form.donorProviderstatus = data.donorProviderstatus;\r\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\r\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\r\n\r\n        if (store.state.artCycle.selectedCycle.cycleType != \"Egg Freezing\") {\r\n            form.spermOrigin = data.spermOrigin;\r\n            form.ageSpermProvider = data.ageSpermProvider;\r\n            form.spermDonorID = data.spermDonorID;\r\n            form.spermDonorStatus = data.spermDonorStatus;\r\n            form.spermMotility = data.spermMotility;\r\n            form.spermTooLowCount = data.spermTooLowCount;\r\n            form.spermDonorBank = data.spermDonorBank;\r\n            form.spermSource = data.spermSource;\r\n            form.semenVolume = data.semenVolume;\r\n            form.spermCount = data.spermCount;\r\n        }\r\n    };\r\n\r\n    const oocyteOriginOptions = computed(\r\n        () => store.state.options.oocyteOrigin\r\n    );\r\n    const donorProviderStatusOptions = computed(\r\n        () => store.state.options.donorProviderstatus\r\n    );\r\n    const oocyteCryoMethodOptions = computed(\r\n        () => store.state.options.oocyteCryoMethod\r\n    );\r\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\r\n    const spermOriginStatusOptions = computed(\r\n        () => store.state.options.spermDonorStatus\r\n    );\r\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        loading,\r\n        v$,\r\n        save,\r\n        fillForm,\r\n        oocyteCollections,\r\n        oocyteOriginOptions,\r\n        donorProviderStatusOptions,\r\n        oocyteCryoMethodOptions,\r\n        spermOriginOptions,\r\n        spermOriginStatusOptions,\r\n        spermSourceOptions\r\n    };\r\n}\r\n\r\nconst mustBe0IfPriorPregnancies0 = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (parseInt(param.priorPregnancies) != 0) return true;\r\n        else {\r\n            return value == 0;\r\n        }\r\n    });\r\n\r\nconst requiredIfprovincialFundingIsYes = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (param.provincialFundingForThisCycle == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (param.reasonsForTreatmentCycle.includes(\"TCR004\")) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst provincialFundingValidator = (cycleDate) =>\r\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\r\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst reasonsForTreatmentCycleValidtor = (value) => {\r\n    return value.length > 0;\r\n};\r\n\r\nexport function useObstetricalHistoryFormInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n\r\n    const form = reactive({\r\n        priorBirths: null,\r\n        priorPregnancies: null,\r\n        priorFreshCyclesStarted: 0,\r\n        priorETsOwnOocytes: 0,\r\n        priorETsDonorOocytes: 0,\r\n        provincialFundingForThisCycle: null,\r\n        typeOfFunding: null,\r\n        otherSpecify: null,\r\n        originOfSimulatedCycle: null,\r\n        primaryCycle: null,\r\n        reasonsForTreatmentCycle: [],\r\n        reasonsForMaleFactor: [],\r\n        pgtAPlanned: null\r\n    });\r\n\r\n    const rules = {\r\n        priorBirths: {\r\n            required\r\n        },\r\n        typeOfFunding: {\r\n            validator: requiredIfprovincialFundingIsYes(form)\r\n        },\r\n        priorPregnancies: { required },\r\n        reasonsForMaleFactor: {\r\n            validator: helpers.withMessage(\r\n                \"Required when Reason for treatment cycle is male\",\r\n                requiredIfReasonsForTreatmentCycleIsMaleFactor(form)\r\n            )\r\n        },\r\n        provincialFundingForThisCycle: {\r\n            validator: provincialFundingValidator(\r\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n            )\r\n        },\r\n        reasonsForTreatmentCycle: {\r\n            validator: helpers.withMessage(\r\n                \"At least one value is requred\",\r\n                reasonsForTreatmentCycleValidtor\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const _save = () => {\r\n        loading.value = false;\r\n        store\r\n            .dispatch(\"born/updateObstetricalHistory\", {\r\n                ...form,\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\r\n        form.priorPregnancies = data.priorPregnancies;\r\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted\r\n            ? data.priorFreshCyclesStarted\r\n            : 0;\r\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes\r\n            ? data.priorETsOwnOocytes\r\n            : 0;\r\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes\r\n            ? data.priorETsDonorOocytes\r\n            : 0;\r\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\r\n        form.typeOfFunding = data.typeOfFunding;\r\n        form.otherSpecify = data.otherSpecify;\r\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\r\n        form.primaryCycle = data.primaryCycle;\r\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle\r\n            ? data.reasonsForTreatmentCycle\r\n            : [];\r\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor\r\n            ? data.reasonsForMaleFactor\r\n            : [];\r\n        form.pgtAPlanned = data.pgtAPlanned ? data.pgtAPlanned : \"N\";\r\n    };\r\n\r\n    const priorPregnanciesOptions = computed(\r\n        () => store.state.options.pregnancyBirthOutcome\r\n    );\r\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n    const priorFreshCyclesStartedOptions = computed(\r\n        () => store.state.options.priorFreshCyclesStarted\r\n    );\r\n    const priorETsOwnOocytesOptions = computed(\r\n        () => store.state.options.priorETsOwnOocytes\r\n    );\r\n    const priorETsDonorOocytesOptions = computed(\r\n        () => store.state.options.priorETsDonorOocytes\r\n    );\r\n    const typeOfFundingOptions = computed(\r\n        () => store.state.options.typeOfFunding\r\n    );\r\n    const reasonsForMaleFactorOptions = computed(\r\n        () => store.state.options.reasonsForMaleFactor\r\n    );\r\n    const reasonsForTreatmentCycleOptions = computed(\r\n        () => store.state.options.reasonsForTreatmentCycle\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        save,\r\n        loading,\r\n        fillForm,\r\n        priorPregnanciesOptions,\r\n        priorBirthsOptions,\r\n        priorFreshCyclesStartedOptions,\r\n        priorETsOwnOocytesOptions,\r\n        priorETsDonorOocytesOptions,\r\n        typeOfFundingOptions,\r\n        reasonsForMaleFactorOptions,\r\n        reasonsForTreatmentCycleOptions\r\n    };\r\n}\r\n\r\nconst requiredIfMedicationForCOSContains = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            param.medicationForCOS.includes(4) ||\r\n            param.medicationForCOS.includes(5) ||\r\n            param.medicationForCOS.includes(6)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst noOfDaysGonadotropinsValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\r\n        let intersection = [];\r\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\r\n            medicationForCOS.value.includes(item)\r\n        );\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst totalDoseFSHValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\r\n        let intersection = [];\r\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\r\n            medicationForCOS.value.includes(item)\r\n        );\r\n        if (intersection.length > 0) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) >= 50 &&\r\n                parseInt(value) <= 30000\r\n            );\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst totalDoseLHValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (medicationForCOS.value.includes(4)) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseFloat(value) >= 200 &&\r\n                parseFloat(value) <= 400\r\n            );\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\r\n            return helpers.req(value) && value > 0 && value <= 50;\r\n        }\r\n\r\n        if (value != null) {\r\n            return value > 0 && value <= 50;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst mediAdminisPriorCosValidator = (cycle) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            cycle.value.cycleType == \"FET\" ||\r\n            cycle.value.cycleType == \"FOIVF\"\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (new Date(cycle.value.cycleDate) > new Date(\"2022-01-01\")) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        // const medicationForCosKeys = [\"COSM016\"];\r\n        let intersection = [];\r\n        intersection = FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS.filter(\r\n            (item) => medicationForCOS.value.includes(item)\r\n        );\r\n        if (intersection.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst progesterOneLevelValidator = (value) => {\r\n    if (value == null) return true;\r\n    else {\r\n        return value > 0 && value <= 31.4;\r\n    }\r\n};\r\n\r\nconst reasonCancelledValidator = (cycleCancelled) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        if (cycleCancelled.value == \"no\") {\r\n            return value.length == 0;\r\n        } else {\r\n            return value.length > 0;\r\n        }\r\n    });\r\n\r\nconst reasonCancelledDescValidator = (cycleCancelled) =>\r\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\r\n        return true;\r\n        if (cycleCancelled.value == \"no\") {\r\n            return value == \"\" || value == null;\r\n        } else {\r\n            return helpers.req(value);\r\n        }\r\n    });\r\n\r\nconst ofFolliclesGt15mmValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == \"FET\") return true;\r\n        return helpers.req(value) && value > 0 && value <= 25;\r\n    });\r\n\r\nconst ofFolliclesLt15mmValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == \"FET\") return true;\r\n        return helpers.req(value);\r\n    });\r\n\r\nconst medicationForCOSValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cycleType.value == \"FET\") return true;\r\n        return helpers.req(value);\r\n    });\r\n\r\n// const ofFolliclesGt15mmValidator = (cycleType) =>\r\n//     helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n//         console.log(value);\r\n//         return helpers.req(value) && value > 0 && value <= 25;\r\n//     });\r\n\r\nexport function useOvariannFormInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n\r\n    const form = reactive({\r\n        ageOfOocyteAge: null,\r\n        hightOfOocyteHight: null,\r\n        weightOfOocyte: null,\r\n        bmiOfOocyte: null,\r\n        fshDayOocyte: null,\r\n        afcOocyte: null,\r\n        ngPMOOocyte: null,\r\n        typeOfStimulationProtocol: TYPE_OF_STIMULATION_PROTOCOL_DEFAULT,\r\n        otherTypeOfStiProtocolDes: null,\r\n        medicationForCOS: null,\r\n        otherMedicationCOS: null,\r\n        adjuvantMedication: ADJUVANT_MEDICATION_DEFAULTS,\r\n        otherAdjuvantMediDescription: null,\r\n        triggerMedication: TRIGGER_MEDICATION_DEFAULTS,\r\n        otheTriMedDesc: null,\r\n        noOfDaysGonadotropins: null,\r\n        totalDoseFSH: null,\r\n        totalDoseLH: null,\r\n        ofFolliclesLs15mm: null,\r\n        ofFolliclesGt15mm: null,\r\n        estradiolLevel: null,\r\n        progesterOneLevel: null,\r\n        endometrialThicknessFreshCycle: null,\r\n        cycleCancelledBeforeRetrieval: \"no\",\r\n        reasonCancelled: null,\r\n        otherReasonCanDesc: null,\r\n        amhLevelOocyte: null,\r\n        cycleStopped: \"N\",\r\n        totalDoseRekovelleMcg: null,\r\n        mediAdminisPriorCos: MEDI_ADMINIS_PRIOR_COS_DEFUALT,\r\n        otherMediPriorCosDesc: null\r\n    });\r\n\r\n    const rules = {\r\n        ageOfOocyteAge: {\r\n            validator: helpers.withMessage(\"Value Required\", required)\r\n        },\r\n        hightOfOocyteHight: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 90 and 240\",\r\n                minValue(90)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 90 and 240\",\r\n                maxValue(240)\r\n            )\r\n        },\r\n        weightOfOocyte: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 25 and 227\",\r\n                minValue(25)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 25 and 227\",\r\n                maxValue(227)\r\n            )\r\n        },\r\n        bmiOfOocyte: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 10 and 70\",\r\n                minValue(10)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 10 and 70\",\r\n                maxValue(70)\r\n            )\r\n        },\r\n        noOfDaysGonadotropins: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                noOfDaysGonadotropinsValidator(\r\n                    computed(() => form.medicationForCOS)\r\n                )\r\n            )\r\n        },\r\n        totalDoseFSH: {\r\n            validator: helpers.withMessage(\r\n                \"Value Must be between 50 and 30000\",\r\n                totalDoseFSHValidator(computed(() => form.medicationForCOS))\r\n            )\r\n        },\r\n        medicationForCOS: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                medicationForCOSValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        totalDoseLH: {\r\n            validator: helpers.withMessage(\r\n                \"Value Must be between 200 and 400\",\r\n                totalDoseLHValidator(computed(() => form.medicationForCOS))\r\n            )\r\n        },\r\n        afcOocyte: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                afcOocyteValidtor(\r\n                    computed(\r\n                        () =>\r\n                            store.state.born.dependentOn.reasonForTreatmentCycle\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        amhLevelOocyte: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required & must be between 0 to 50\",\r\n                amhLevelOocyteValidtor(\r\n                    computed(\r\n                        () =>\r\n                            store.state.born.dependentOn.reasonForTreatmentCycle\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        mediAdminisPriorCos: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                mediAdminisPriorCosValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle)\r\n                )\r\n            )\r\n        },\r\n        totalDoseRekovelleMcg: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                totalDoseRekovelleMcgValidator(\r\n                    computed(() => form.medicationForCOS)\r\n                )\r\n            )\r\n        },\r\n        progesterOneLevel: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be in range of 0 to 31.4 & value has to be multiplied by 3.18\",\r\n                progesterOneLevelValidator\r\n            )\r\n        },\r\n        estradiolLevel: {\r\n            minValue: helpers.withMessage(\r\n                \"Value must be between 0 and 40000\",\r\n                minValue(0)\r\n            ),\r\n            maxValue: helpers.withMessage(\r\n                \"Value must be between 0 and 40000\",\r\n                maxValue(40000)\r\n            )\r\n        },\r\n        reasonCancelled: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be empty if cycle cancelled is no\",\r\n                reasonCancelledValidator(\r\n                    computed(() => form.cycleCancelledBeforeRetrieval)\r\n                )\r\n            )\r\n        },\r\n        otherReasonCanDesc: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be empty if cycle cancelled is no\",\r\n                reasonCancelledDescValidator(\r\n                    computed(() => form.cycleCancelledBeforeRetrieval)\r\n                )\r\n            )\r\n        },\r\n        ofFolliclesGt15mm: {\r\n            validator: helpers.withMessage(\r\n                \"Value required & must between 0 ot 25\",\r\n                ofFolliclesGt15mmValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        ofFolliclesLs15mm: {\r\n            validator: helpers.withMessage(\r\n                \"Value required\",\r\n                ofFolliclesLt15mmValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n    const confirm = useConfirm();\r\n    const _save = () => {\r\n        loading.value = false;\r\n        store\r\n            .dispatch(\"born/updateOvarian\", {\r\n                ...form,\r\n                adjuvantMedication: form.adjuvantMedication.join(\",\"),\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.ageOfOocyteAge = data.ageOfOocyteAge\r\n            ? data.ageOfOocyteAge\r\n            : store.state.artCycle.patient.age;\r\n        form.adjuvantMedication =\r\n            data.adjuvantMedication.length > 0\r\n                ? data.adjuvantMedication\r\n                : ADJUVANT_MEDICATION_DEFAULTS;\r\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\r\n        form.weightOfOocyte = data.weightOfOocyte;\r\n        form.bmiOfOocyte = data.bmiOfOocyte;\r\n        form.fshDayOocyte = data.fshDayOocyte;\r\n        form.afcOocyte = data.afcOocyte;\r\n        form.ngPMOOocyte = data.ngPMOOocyte;\r\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol\r\n            ? data.typeOfStimulationProtocol\r\n            : TYPE_OF_STIMULATION_PROTOCOL_DEFAULT;\r\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\r\n        form.medicationForCOS = data.medicationForCOS;\r\n        form.otherMedicationCOS = data.otherMedicationCOS;\r\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\r\n        form.triggerMedication = data.triggerMedication\r\n            ? data.triggerMedication\r\n            : TRIGGER_MEDICATION_DEFAULTS;\r\n        form.otheTriMedDesc = data.otheTriMedDesc;\r\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\r\n        form.totalDoseFSH = data.totalDoseFSH;\r\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\r\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\r\n        form.cycleCancelledBeforeRetrieval =\r\n            data.cycleCancelledBeforeRetrieval == \"yes\" ? \"yes\" : \"no\";\r\n        form.reasonCancelled = data.reasonCancelled;\r\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\r\n        form.amhLevelOocyte = data.amhLevelOocyte;\r\n        form.cycleStopped = data.cycleStoppped == \"Y\" ? \"Y\" : \"N\";\r\n        form.mediAdminisPriorCos =\r\n            data.mediAdminisPriorCos.length != 0\r\n                ? data.mediAdminisPriorCos\r\n                : MEDI_ADMINIS_PRIOR_COS_DEFUALT;\r\n        form.totalDoseRekovelleMcg = data.totalDoseRekovelleMcg;\r\n        form.otherMediPriorCosDesc = data.otherMediPriorCosDesc;\r\n\r\n        if (data.endometrialThicknessFreshCycle) {\r\n            form.endometrialThicknessFreshCycle =\r\n                data.endometrialThicknessFreshCycle;\r\n        }\r\n\r\n        if (data.estradiolLevel) {\r\n            form.estradiolLevel = data.estradiolLevel;\r\n        }\r\n\r\n        if (data.progesterOneLevel) {\r\n            form.progesterOneLevel = data.progesterOneLevel;\r\n        }\r\n\r\n        if (data.totalDoseLH) {\r\n            form.totalDoseLH = data.totalDoseLH;\r\n        }\r\n    };\r\n\r\n    const typeOfStimulationProtocolOptions = computed(\r\n        () => store.state.options.typeOfStimulationProtocol\r\n    );\r\n    const triggerMedicationOptions = computed(\r\n        () => store.state.options.triggerMedication\r\n    );\r\n    const medicationForCOSOptions = computed(\r\n        () => store.state.options.medicationForCOS\r\n    );\r\n    const medicationAdministraionPriorToCosOptions = computed(\r\n        () => store.state.options.medicationAdministraionPriorToCos\r\n    );\r\n    const reasonCancelledOptions = computed(\r\n        () => store.state.options.reasonCancelled\r\n    );\r\n    const adjuvantMedicationOptions = computed(\r\n        () => store.state.options.adjuvantMedication\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        loading,\r\n        save,\r\n        fillForm,\r\n        typeOfStimulationProtocolOptions,\r\n        triggerMedicationOptions,\r\n        medicationForCOSOptions,\r\n        medicationAdministraionPriorToCosOptions,\r\n        reasonCancelledOptions,\r\n        adjuvantMedicationOptions\r\n    };\r\n}\r\n\r\nexport function useBornEmbryologyInit() {\r\n    const store = useStore();\r\n    const form = inject(\"form\");\r\n\r\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\r\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\r\n\r\n    const inseminationMethodOptions = computed(\r\n        () => store.state.options.inseminationMethod\r\n    );\r\n    const reasonsForNoUseOptions = computed(\r\n        () => store.state.options.reasonsForNoUse\r\n    );\r\n    const embryoStageFreezingOptions = computed(\r\n        () => store.state.options.embryoStageFreezing\r\n    );\r\n    const reasonEmbryoCryopreservationOptions = computed(\r\n        () => store.state.options.reasonEmbryoCryopreservation\r\n    );\r\n    const embryoFreshCryoMethodOptions = computed(\r\n        () => store.state.options.embryoFreshCryoMethod\r\n    );\r\n    const embryoStageThawingOptions = computed(\r\n        () => store.state.options.embryoStageThawing\r\n    );\r\n    const embryoTransferOptions = computed(\r\n        () => store.state.options.reasonsNoET\r\n    );\r\n\r\n    return {\r\n        form,\r\n        isIVFCycle,\r\n        isFETCycle,\r\n        inseminationMethodOptions,\r\n        reasonsForNoUseOptions,\r\n        embryoStageFreezingOptions,\r\n        reasonEmbryoCryopreservationOptions,\r\n        embryoFreshCryoMethodOptions,\r\n        embryoStageThawingOptions,\r\n        embryoTransferOptions\r\n    };\r\n}\r\n\r\nexport function useBornMarkAsComplete() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n\r\n    const markAsComplete = async (source) => {\r\n        const payload = {\r\n            patientId: store.state.artCycle.patient.id,\r\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\r\n            source\r\n        };\r\n\r\n        try {\r\n            const { data } = await $axios.post(\r\n                \"born/mark-as-complete\",\r\n                payload\r\n            );\r\n\r\n            toast.add({\r\n                severity: \"success\",\r\n                summary: \"Sucess\",\r\n                detail: \"Mark as completed\",\r\n                life: 3000\r\n            });\r\n        } catch (err) {\r\n            toast.add({\r\n                severity: \"warn\",\r\n                summary: \"Error\",\r\n                detail: \"An Error occured\",\r\n                life: 3000\r\n            });\r\n        }\r\n    };\r\n\r\n    return {\r\n        markAsComplete\r\n    };\r\n}\r\n\r\nconst embryoTransferValidator = (cycle) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            cycle.value.cancel == false ||\r\n            cycle.value.cyccleType == \"FET\" ||\r\n            cycle.value.cyccleType == \"FOIVF\"\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return true;\r\n    });\r\nconst isEbryoTrasferNo = (embryoTransfer) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer.value == \"no\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst isEbryoTrasferYes = (embryoTransfer) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst preparationUterineLiningValidator = (cycleType) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (cycleType.value == \"FET\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\nconst transferDateValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst dateETAdjustedValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst assistedZonaHatchingValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst embryosTransferredValidator = (\r\n    embryoTransfer,\r\n    utilizableEmbryos,\r\n    embryosCryopreserved,\r\n    utilizableAfterThaw\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        let _utilizableEmbryos =\r\n            utilizableEmbryos.value != null\r\n                ? parseInt(utilizableEmbryos.value)\r\n                : 0;\r\n        let _utilizableAfterThaw =\r\n            utilizableAfterThaw.value != null\r\n                ? parseInt(utilizableAfterThaw.value)\r\n                : 0;\r\n        let _embryosCryopreserved =\r\n            embryosCryopreserved.value != null\r\n                ? parseInt(embryosCryopreserved.value)\r\n                : 0;\r\n\r\n        let calc =\r\n            _utilizableEmbryos + _utilizableAfterThaw - _embryosCryopreserved;\r\n\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value) && parseInt(value) <= calc;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst SOURCE_TRANSFERRED_EMBRYOS_NOT_FET = [\r\n    \"TES001\",\r\n    \"TES002\",\r\n    \"TES010\",\r\n    \"TES011\",\r\n    \"TES004\"\r\n];\r\n\r\nconst sourceTransferredEmbryosValidationMessage = (cycleType) => {\r\n    if (cycleType == \"FET\") {\r\n        return `Value requied & value cannot be from one from those -\r\n            1-Fresh embryos from own oocytes-partner sperm\r\n            2-Fresh embryos from own oocytes-donor sperm\r\n            3-Fresh embryos from partner oocytes-donor sperm\r\n            4-Fresh embryos from donor oocytes-own sperm\r\n            5-Fresh embryos from donor oocytes-partner sperm\r\n        `;\r\n    }\r\n    return \"Valur required\";\r\n};\r\n\r\nconst sourceTransferredEmbryosValidator = (embryoTransfer, cyccleType) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (cyccleType.value == \"FET\") {\r\n            let intersection = value.filter((item) =>\r\n                SOURCE_TRANSFERRED_EMBRYOS_NOT_FET.includes(item)\r\n            );\r\n            if (intersection.length > 0) return false;\r\n        }\r\n        if (embryoTransfer.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst transferInseminationMethodValidator = (\r\n    noOfEmbryosTransferred,\r\n    sourceTransferredEmbryos,\r\n    cycleStartDate\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\r\n        const intersection = freshSourceTransferredEmbryosIds.filter((elem) =>\r\n            [...sourceTransferredEmbryos.value].includes(elem)\r\n        );\r\n\r\n        if (\r\n            noOfEmbryosTransferred.value == 1 &&\r\n            intersection.length != 0 &&\r\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst preImplGeneticTestingValidator = (\r\n    embryoTransfer,\r\n    cycleDate,\r\n    pgtAPlanned\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            embryoTransfer.value == \"yes\" &&\r\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        if (pgtAPlanned.value == \"Y\") {\r\n            return value == \"yes\";\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            embryoTransfer.value == \"yes\" &&\r\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst charTransferredEmbryoValidator = (\r\n    noOfEmbryosTransferred,\r\n    preImplementationGeneticSergery,\r\n    cycleDate\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            preImplementationGeneticSergery.value == \"yes\" &&\r\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        // if (\r\n        //     preImplementationGeneticSergery.value == \"yes\" &&\r\n        //     parseInt(noOfEmbryosTransferred.value) == 1 &&\r\n        //     new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        // ) {\r\n        //     return helpers.req(value);\r\n        // }\r\n        return true;\r\n    });\r\n\r\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (preImplGeneticTesting.value == \"yes\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst gestationalCarrierSurrogateValidator = (param) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true;\r\n    });\r\n\r\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        // && new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n\r\n        let intersections = [];\r\n        intersections = sourceTransferredEmbryos.value.filter((item) => {\r\n            return TRANSFERRED_EMBRYO_SOURCE_FROZENS.includes(item);\r\n        });\r\n\r\n        if (intersections.length > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst endometrialThicknessValidtor = (cyccleType) =>\r\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\r\n        if (cyccleType.value == \"FET\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBornEmbryoTransferInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const form = reactive({\r\n        embryoTransfer: null,\r\n        reasonsNoET: null,\r\n        preparationUterineLining: null,\r\n        endometrialThickness: null,\r\n        transferDate: null,\r\n        dateETAdjusted: null,\r\n        dayET: null,\r\n        ultrasoundGuidedET: null,\r\n        assistedZonaHatching: null,\r\n        embryosTransferred: null,\r\n        electiveTransfeESET: null,\r\n        sourceTransferredEmbryos: [],\r\n        transferInseminationMethod: null,\r\n        preImplGeneticTesting: null,\r\n        charTransferredEmbryo: null,\r\n        numberThaws: null,\r\n        sitePGTembryo: null,\r\n        gestationalCarrierSurrogate: null,\r\n        gestationalCarrierSurrogateChart: null,\r\n        heightRecipient: null,\r\n        weightRecipient: null,\r\n        recipientBMI: null,\r\n        endometrialReceptivityTest: null\r\n    });\r\n\r\n    const rules = {\r\n        embryoTransfer: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoTransferValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle)\r\n                )\r\n            )\r\n        },\r\n        reasonsNoET: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferNo(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        preparationUterineLining: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                preparationUterineLiningValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        transferDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            ),\r\n            validDate\r\n        },\r\n        dateETAdjusted: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        assistedZonaHatching: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        embryosTransferred: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required and value cannot be greated than (utilizableEmbryos + utilizableAfterThaw - embryosCryopreserved) \",\r\n                embryosTransferredValidator(\r\n                    computed(() => form.embryoTransfer),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.utilizableEmbryos\r\n                    ),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.embryosCryopreserved\r\n                    ),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.utilizableAfterThaw\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        sourceTransferredEmbryos: {\r\n            validator: helpers.withMessage(\r\n                sourceTransferredEmbryosValidationMessage(\r\n                    store.state.artCycle.selectedCycle != undefined ? store.state.artCycle.selectedCycle.cycleType : null\r\n                ),\r\n                sourceTransferredEmbryosValidator(\r\n                    computed(() => form.embryoTransfer),\r\n                    computed(() => store.state.artCycle.selectedCycle != undefined ? store.state.artCycle.selectedCycle.cycleType : null)\r\n                )\r\n            )\r\n        },\r\n        transferInseminationMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                transferInseminationMethodValidator(\r\n                    computed(() => form.embryosTransferred),\r\n                    computed(() => form.sourceTransferredEmbryos),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        preImplGeneticTesting: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required & must be YES if PGT A Planned is YES\",\r\n                preImplGeneticTestingValidator(\r\n                    computed(() => form.embryoTransfer),\r\n                    computed(\r\n                        () => store.state.artCycle.selectedCycle.cycleDate\r\n                    ),\r\n                    computed(() => store.state.born.dependentOn.pgtAPlanned)\r\n                )\r\n            )\r\n        },\r\n        charTransferredEmbryo: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                charTransferredEmbryoValidator(\r\n                    computed(() => form.embryosTransferred),\r\n                    computed(() => form.preImplGeneticTesting),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        sitePGTembryo: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                sitePGTembryoValidator(\r\n                    computed(() => form.preImplGeneticTesting),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        gestationalCarrierSurrogate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\r\n            )\r\n        },\r\n        numberThaws: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                numberThawsValidator(\r\n                    computed(() => form.sourceTransferredEmbryos),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        endometrialThickness: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                endometrialThicknessValidtor(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const getDefaultEndometrialThickness = () => {\r\n        let items = store.state.cycleMonitoring.lines.filter(\r\n            (item) => item.etUs != null\r\n        );\r\n\r\n        if (items.length == 0) return null;\r\n\r\n        let thickness = items[items.length - 1].etUs\r\n            ? parseFloat(items[items.length - 1].etUs)\r\n            : null;\r\n\r\n        return thickness;\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.embryoTransfer = data.embryoTransfer;\r\n        form.reasonsNoET = data.reasonsNoET;\r\n        form.preparationUterineLining = data.preparationUterineLining;\r\n        form.endometrialThickness = data.endometrialThickness\r\n            ? data.endometrialThickness\r\n            : getDefaultEndometrialThickness();\r\n        form.transferDate = data.transferDate\r\n            ? new Date(data.transferDate + \" 00:00:00\")\r\n            : null;\r\n        form.dateETAdjusted = data.dateETAdjusted ? data.dateETAdjusted : \"no\";\r\n        form.dayET = data.dayET;\r\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\r\n        form.assistedZonaHatching = data.assistedZonaHatching;\r\n        form.embryosTransferred = data.embryosTransferred;\r\n        form.electiveTransfeESET = data.electiveTransfeESET;\r\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos\r\n            ? data.sourceTransferredEmbryos\r\n            : [];\r\n        form.transferInseminationMethod = data.transferInseminationMethod;\r\n\r\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\r\n        form.numberThaws = data.numberThaws;\r\n        form.sitePGTembryo = data.sitePGTembryo;\r\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate\r\n            ? data.gestationalCarrierSurrogate\r\n            : \"no\";\r\n        form.gestationalCarrierSurrogateChart =\r\n            data.gestationalCarrierSurrogateChart;\r\n        form.heightRecipient = data.heightRecipient;\r\n        form.weightRecipient = data.weightRecipient;\r\n        form.recipientBMI = data.recipientBMI;\r\n        form.endometrialReceptivityTest = data.endometrialReceptivityTest\r\n            ? data.endometrialReceptivityTest\r\n            : \"N\";\r\n\r\n        if (store.state.born.dependentOn.pgtAPlanned == \"Y\") {\r\n            form.preImplGeneticTesting = \"yes\";\r\n        } else {\r\n            form.preImplGeneticTesting = data.preImplGeneticTesting\r\n                ? data.preImplGeneticTesting\r\n                : \"no\";\r\n        }\r\n\r\n        if (\r\n            data.embryoTransfer == null &&\r\n            store.state.artCycle.selectedCycle.cycleType == \"FET\"\r\n        ) {\r\n            form.embryoTransfer = \"yes\";\r\n        }\r\n\r\n        if (data.preparationUterineLining == null) {\r\n            form.preparationUterineLining = PREPARATION_UTERINE_LINING_DEFAULT;\r\n        }\r\n\r\n        if (data.assistedZonaHatching == null) {\r\n            form.assistedZonaHatching = \"Y\";\r\n        }\r\n\r\n        if (store.state.born.fertilizationEmbryoThawDate) {\r\n            form.transferDate = new Date(\r\n                store.state.born.fertilizationEmbryoThawDate\r\n            );\r\n        }\r\n    };\r\n\r\n    const _save = () => {\r\n        store\r\n            .dispatch(\"born/updateEmbryoTransfer\", {\r\n                ...form,\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n                transferDate: form.transferDate\r\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\r\n                    : null\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            });\r\n    };\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\r\n    const preparationUterineLiningOptions = computed(\r\n        () => store.state.options.preparationUterineLining\r\n    );\r\n    const assistedZonaHatchingOptions = computed(\r\n        () => store.state.options.assistedZonaHatching\r\n    );\r\n    const sourceTransferredEmbryosOptions = computed(\r\n        () => store.state.options.sourceTransferredEmbryos\r\n    );\r\n    const transferInseminationMethodOptions = computed(\r\n        () => store.state.options.transferInseminationMethod\r\n    );\r\n    const charTransferredEmbryoOptions = computed(\r\n        () => store.state.options.charTransferredEmbryo\r\n    );\r\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\r\n    const sitePGTembryoOptions = computed(\r\n        () => store.state.options.sitePGTembryo\r\n    );\r\n\r\n    return {\r\n        store,\r\n        form,\r\n        v$,\r\n        fillForm,\r\n        save,\r\n        reasonsNoETOptions,\r\n        preparationUterineLiningOptions,\r\n        assistedZonaHatchingOptions,\r\n        sourceTransferredEmbryosOptions,\r\n        transferInseminationMethodOptions,\r\n        charTransferredEmbryoOptions,\r\n        numberThawsOptions,\r\n        sitePGTembryoOptions,\r\n        getDefaultEndometrialThickness\r\n    };\r\n}\r\n\r\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOfOocytesRetrieved.value > 0) {\r\n            return parseInt(value) > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst oocytesNotUsedValidator = (\r\n    oocytesRetrieved,\r\n    inseminatedInjected,\r\n    oocytesCryopreserved,\r\n    cycleType\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (cycleType.value == \"FET\") {\r\n            return true;\r\n        } else {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) ==\r\n                    oocytesRetrieved.value -\r\n                        inseminatedInjected.value -\r\n                        oocytesCryopreserved.value\r\n            );\r\n        }\r\n    });\r\n\r\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (oocytesNotUsed.value > 0) {\r\n            return value.length > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryosCryopreserved.value > 0) {\r\n            return value.length > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        return true; // temp for now\r\n        if (noOfOocytesRetrieved.value > 0) {\r\n            return (\r\n                value.length > 0 &&\r\n                parseInt(value) <= noOfOocytesRetrieved.value\r\n            );\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) <= noOocytesInseminatedInjected.value\r\n            );\r\n        }\r\n        return true;\r\n    });\r\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return (\r\n                helpers.req(value) &&\r\n                parseInt(value) <= noOocytesInseminatedInjected.value\r\n            );\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryosCryopreservedValidator = (\r\n    noOocytesInseminatedInjected,\r\n    embryosThawed\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (noOocytesInseminatedInjected.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n\r\n        return value <= embryosThawed.value;\r\n    });\r\n\r\nconst reasonEmbryoCryopreservationValidator = (\r\n    embryosCryopreserved,\r\n    cycleStartDate\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (\r\n            embryosCryopreserved.value > 0 &&\r\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\r\n        ) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryosCryopreserved.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst embryoFreezeDate1Validator = (embryosCryopreserved) =>\r\n    helpers.withParams({ type: \"embryosCryopreserved\" }, (value) => {\r\n        if (embryosCryopreserved.value > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBornFreshEmbryoInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n    const form = reactive({\r\n        inseminationMethod: [],\r\n        oocytesNotUsed: null,\r\n        reasonsForNoUse: [],\r\n        embryoStageFreezing: [],\r\n        inseminatedInjected: null,\r\n        embryoFreezeID1: null,\r\n        embryoFreezeID2: null,\r\n        embryoFreezeID3: null,\r\n        embryoFreezeID4: null,\r\n        normalFertilization2PN: null,\r\n        embryoFreezeDate1: null,\r\n        embryoFreezeDate2: null,\r\n        embryoFreezeDate3: null,\r\n        embryoFreezeDate4: null,\r\n        ofMII: null,\r\n        utilizableEmbryos: null,\r\n        embryosCryopreserved: null,\r\n        reasonEmbryoCryopreservation: null,\r\n        embryoFreshCryoMethod: null\r\n    });\r\n\r\n    const rules = {\r\n        inseminationMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                inseminationMethodValidator(\r\n                    computed(\r\n                        () => store.state.born.dependentOn.oocytesRetrieved\r\n                    )\r\n                )\r\n            )\r\n        },\r\n        oocytesNotUsed: {\r\n            validator: helpers.withMessage(\r\n                \"Value must be equal to oocytesRetrieved - inseminatedInjected - oocytesCryopreserved\",\r\n                oocytesNotUsedValidator(\r\n                    computed(\r\n                        () => store.state.born.dependentOn.oocytesRetrieved\r\n                    ),\r\n                    computed(() => form.inseminatedInjected),\r\n                    computed(\r\n                        () => store.state.born.dependentOn.oocytesCryopreserved\r\n                    ),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        reasonsForNoUse: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                reasonsForNoUseValidator(computed(() => form.oocytesNotUsed))\r\n            )\r\n        },\r\n        embryoStageFreezing: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoStageFreezingValidator(\r\n                    computed(() => form.embryosCryopreserved)\r\n                )\r\n            )\r\n        },\r\n        inseminatedInjected: {\r\n            validator: helpers.withMessage(\"Value Required\", required)\r\n        },\r\n        normalFertilization2PN: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required and must be less or equal to oocytes inseminated/injected\",\r\n                normalFertilization2PNValidator(\r\n                    computed(() => form.inseminatedInjected)\r\n                )\r\n            )\r\n        },\r\n        ofMII: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                ofMIIValidator(computed(() => form.inseminatedInjected))\r\n            )\r\n        },\r\n        utilizableEmbryos: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                utilizableEmbryosValidator(\r\n                    computed(() => form.inseminatedInjected)\r\n                )\r\n            )\r\n        },\r\n        embryosCryopreserved: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required & value must be less than # embryos Thawed\",\r\n                embryosCryopreservedValidator(\r\n                    computed(() => form.inseminatedInjected),\r\n                    computed(() => store.state.born.dependentOn.embryosThawed)\r\n                )\r\n            )\r\n        },\r\n        reasonEmbryoCryopreservation: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                reasonEmbryoCryopreservationValidator(\r\n                    computed(() => form.embryosCryopreserved),\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\r\n                )\r\n            )\r\n        },\r\n        embryoFreshCryoMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoFreshCryoMethodValidator(\r\n                    computed(() => form.embryosCryopreserved)\r\n                )\r\n            )\r\n        },\r\n        embryoFreezeDate1: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                embryoFreezeDate1Validator(\r\n                    computed(() => form.embryosCryopreserved)\r\n                )\r\n            ),\r\n            validDate\r\n        },\r\n        embryoFreezeDate2: { validDate },\r\n        embryoFreezeDate3: { validDate },\r\n        embryoFreezeDate4: { validDate }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const _save = () => {\r\n        let payload = {\r\n            ...form,\r\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n            embryoFreezeDate1: form.embryoFreezeDate1\r\n                ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\r\n                : null,\r\n            embryoFreezeDate2: form.embryoFreezeDate2\r\n                ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\r\n                : null,\r\n            embryoFreezeDate3: form.embryoFreezeDate3\r\n                ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\r\n                : null,\r\n            embryoFreezeDate4: form.embryoFreezeDate4\r\n                ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\r\n                : null\r\n        };\r\n\r\n        // return;\r\n\r\n        store.dispatch(\"born/updateFreshEmbryo\", payload).then(() => {\r\n            toast.add({\r\n                severity: \"success\",\r\n                summary: \"\",\r\n                detail: \"Save Successful\",\r\n                life: 3000\r\n            });\r\n        });\r\n    };\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        emitter.emit(\"fresh-embryo:on-save\");\r\n        _save();\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.inseminationMethod = data.inseminationMethod;\r\n        form.oocytesNotUsed = data.oocytesNotUsed;\r\n        form.reasonsForNoUse = data.reasonsForNoUse;\r\n        form.embryoStageFreezing = data.embryoStageFreezing;\r\n        form.inseminatedInjected = data.inseminatedInjected;\r\n        form.embryoFreezeID1 = data.embryoFreezeID1;\r\n        form.embryoFreezeID2 = data.embryoFreezeID2;\r\n        form.embryoFreezeID3 = data.embryoFreezeID3;\r\n        form.embryoFreezeID4 = data.embryoFreezeID4;\r\n        form.normalFertilization2PN = data.normalFertilization2PN;\r\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\r\n            ? new Date(data.embryoFreezeDate1 + TIME_0)\r\n            : null;\r\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\r\n            ? new Date(data.embryoFreezeDate2 + TIME_0)\r\n            : null;\r\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\r\n            ? new Date(data.embryoFreezeDate3 + TIME_0)\r\n            : null;\r\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\r\n            ? new Date(data.embryoFreezeDate4 + TIME_0)\r\n            : null;\r\n        form.ofMII = data.ofMII;\r\n        form.utilizableEmbryos = data.utilizableEmbryos;\r\n        form.embryosCryopreserved = data.embryosCryopreserved;\r\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\r\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\r\n    };\r\n\r\n    const fillFormDefault = (data) => {\r\n        if (form.inseminationMethod.length == 0)\r\n            form.inseminationMethod = data.inseminationMethod;\r\n        if (form.oocytesNotUsed == null)\r\n            form.oocytesNotUsed = data.oocytesNotUsed;\r\n        if (form.reasonsForNoUse.length == 0)\r\n            form.reasonsForNoUse = data.reasonsForNoUse;\r\n        if (form.embryoStageFreezing.length == 0)\r\n            form.embryoStageFreezing = data.embryoStageFreezing;\r\n        if (form.inseminatedInjected == null)\r\n            form.inseminatedInjected = data.inseminatedInjected;\r\n        if (form.embryoFreezeID1 == null)\r\n            form.embryoFreezeID1 = data.embryoFreezeID1;\r\n        if (form.embryoFreezeID2 == null)\r\n            form.embryoFreezeID2 = data.embryoFreezeID2;\r\n        if (form.embryoFreezeID3 == null)\r\n            form.embryoFreezeID3 = data.embryoFreezeID3;\r\n        if (form.embryoFreezeID4 == null)\r\n            form.embryoFreezeID4 = data.embryoFreezeID4;\r\n        if (form.normalFertilization2PN == null)\r\n            form.normalFertilization2PN = data.normalFertilization2PN;\r\n        if (form.embryoFreezeDate1 == null)\r\n            form.embryoFreezeDate1 = data.embryoFreezeDate1\r\n                ? new Date(data.embryoFreezeDate1 + TIME_0)\r\n                : null;\r\n        if (form.embryoFreezeDate2 == null)\r\n            form.embryoFreezeDate2 = data.embryoFreezeDate2\r\n                ? new Date(data.embryoFreezeDate2 + TIME_0)\r\n                : null;\r\n        if (form.embryoFreezeDate3 == null)\r\n            form.embryoFreezeDate3 = data.embryoFreezeDate3\r\n                ? new Date(data.embryoFreezeDate3 + TIME_0)\r\n                : null;\r\n        if (form.embryoFreezeDate4 == null)\r\n            form.embryoFreezeDate4 = data.embryoFreezeDate4\r\n                ? new Date(data.embryoFreezeDate4 + TIME_0)\r\n                : null;\r\n        if (form.ofMII == null) form.ofMII = data.ofMII;\r\n        if (form.utilizableEmbryos == null)\r\n            form.utilizableEmbryos = data.utilizableEmbryos;\r\n        if (form.embryosCryopreserved == null)\r\n            form.embryosCryopreserved = data.embryosCryopreserved;\r\n        if (form.reasonEmbryoCryopreservation == null)\r\n            form.reasonEmbryoCryopreservation =\r\n                data.reasonEmbryoCryopreservation;\r\n        if (form.embryoFreshCryoMethod == null)\r\n            form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\r\n    };\r\n\r\n    const getDeafultDataByPrimaryCycle = async ({ patientId, cycleId }) => {\r\n        const resp = await getFreshEbmryo(patientId, cycleId);\r\n        if (resp.status == \"success\") {\r\n            fillFormDefault(resp.freshEmbryos);\r\n        }\r\n    };\r\n\r\n    const inseminationMethodOptions = computed(\r\n        () => store.state.options.inseminationMethod\r\n    );\r\n    const reasonsForNoUseOptions = computed(\r\n        () => store.state.options.reasonsForNoUse\r\n    );\r\n    const embryoStageFreezingOptions = computed(\r\n        () => store.state.options.embryoStageFreezing\r\n    );\r\n    const reasonEmbryoCryopreservationOptions = computed(\r\n        () => store.state.options.reasonEmbryoCryopreservation\r\n    );\r\n    const embryoFreshCryoMethodOptions = computed(\r\n        () => store.state.options.embryoFreshCryoMethod\r\n    );\r\n\r\n    const cycleIds = computed(() => store.state.artCycle.cyclesSummary);\r\n\r\n    return {\r\n        store,\r\n        loading,\r\n        form,\r\n        v$,\r\n        fillForm,\r\n        save,\r\n        inseminationMethodOptions,\r\n        reasonsForNoUseOptions,\r\n        embryoStageFreezingOptions,\r\n        reasonEmbryoCryopreservationOptions,\r\n        embryoFreshCryoMethodOptions,\r\n        cycleIds,\r\n        getDeafultDataByPrimaryCycle\r\n    };\r\n}\r\n\r\nconst isFETCycleValidator = (cyccleType) =>\r\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\r\n        if (cyccleType.value == \"FET\") {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBronFrozenEmbyoInit() {\r\n    const store = useStore();\r\n    const toast = useToast();\r\n    const loading = ref(false);\r\n    const form = reactive({\r\n        oocyteCollectionDate: null,\r\n        embryoFreezeID1Thawed: null,\r\n        embryoFreezeID2Thawed: null,\r\n        embryoFreezeID3Thawed: null,\r\n        embryoFreezeID4Thawed: null,\r\n        embryosThawed: null,\r\n        utilizableAfterThaw: null,\r\n        embryoStageThawing: null,\r\n        embryoFrozenCryoMethod: null,\r\n        embryoThawDate: null,\r\n        donatedEmbryoFromAnotherCouple: null\r\n    });\r\n\r\n    const rules = {\r\n        utilizableAfterThaw: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        embryoStageThawing: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        embryoFrozenCryoMethod: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        },\r\n        embryoThawDate: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            ),\r\n            validDate\r\n        },\r\n        donatedEmbryoFromAnotherCouple: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                isFETCycleValidator(\r\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\r\n                )\r\n            )\r\n        }\r\n    };\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const confirm = useConfirm();\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    const _save = () => {\r\n        loading.value = true;\r\n        store\r\n            .dispatch(\"born/updateFrozenEmbryo\", {\r\n                ...form,\r\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\r\n                oocyteCollectionDate: form.oocyteCollectionDate\r\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\r\n                    : null,\r\n                embryoThawDate: form.embryoThawDate\r\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\r\n                    : null\r\n            })\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        let embryoThawDate = data.embryoThawDate\r\n            ? new Date(data.embryoThawDate + TIME_0)\r\n            : null;\r\n\r\n        form.oocyteCollectionDate = data.oocyteCollectionDate\r\n            ? new Date(data.oocyteCollectionDate + TIME_0)\r\n            : null;\r\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\r\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\r\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\r\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\r\n        form.embryosThawed = data.embryosThawed;\r\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\r\n        form.embryoStageThawing = data.embryoStageThawing;\r\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\r\n        form.embryoThawDate = embryoThawDate;\r\n        form.donatedEmbryoFromAnotherCouple =\r\n            data.donatedEmbryoFromAnotherCouple;\r\n\r\n        if (data.embryoStageThawing.length == 0) {\r\n            form.embryoStageThawing = [4];\r\n        }\r\n\r\n        if (\r\n            store.state.artCycle.selectedCycle.cycleType == \"FET\" &&\r\n            data.embryoFrozenCryoMethod == null\r\n        ) {\r\n            form.embryoFrozenCryoMethod = \"ECRY002\";\r\n        }\r\n\r\n        store.commit(\"born/SET_FERTILIZATION_EMBRYO_THAW_DATE\", embryoThawDate);\r\n    };\r\n\r\n    const embryoStageThawingOptions = computed(\r\n        () => store.state.options.embryoStageThawing\r\n    );\r\n    const embryoFrozenCryoMethodOptions = computed(\r\n        () => store.state.options.embryoFrozenCryoMethod\r\n    );\r\n\r\n    return {\r\n        store,\r\n        loading,\r\n        form,\r\n        v$,\r\n        save,\r\n        fillForm,\r\n        embryoStageThawingOptions,\r\n        embryoFrozenCryoMethodOptions\r\n    };\r\n}\r\n\r\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\r\n    cycleDate,\r\n    embryoTransfer\r\n) =>\r\n    helpers.withParams({ type: \"form\" }, (value) => {\r\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\r\n            return true;\r\n        }\r\n\r\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\r\n            return value.length > 0;\r\n        }\r\n        return true;\r\n    });\r\n\r\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\r\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\r\n        if (parseInt(noOfBabiesBorn.value) > 0) {\r\n            return helpers.req(value);\r\n        }\r\n        return true;\r\n    });\r\n\r\nexport function useBornExtraFormInit() {\r\n    const store = useStore();\r\n\r\n    const form = reactive({\r\n        patientNotes: null,\r\n        bornConsentFlag: null,\r\n        pgtAIsPlanned: null,\r\n        patientHistoryNotes: null,\r\n        mediAdminisPriorCos: [],\r\n        otherMediPriorCosDesc: null,\r\n        totalDoseRekovelleMcg: null,\r\n        stimulationNotes: null,\r\n        spermCollectionNotes: null,\r\n        embryologyNotes: null,\r\n        endoRecTestdPerformed: null,\r\n        recTestBiopsyResult: null,\r\n        transferNotes: null,\r\n        pregnancyOutcomeNotes: null,\r\n        estimatedDateOfBirth: null,\r\n        gestationalAge: null,\r\n        complicationsOfPregnancy: [],\r\n        maternalHealthConditions: [],\r\n        diabetesAndPregnancy: null,\r\n        hypertensionDisorder: null,\r\n        typeOfLabour: null,\r\n        augmentation: [],\r\n        methodsOfInduction: [],\r\n        typeOfDelivery: null,\r\n        allIndicationsOfLabour: null,\r\n        cervicalRipening: [],\r\n        allIndicationsCaesarean: null,\r\n        labourBirthComplications: [],\r\n        maternalOutcome: null,\r\n        birthWeight: null,\r\n        congenitalAnomalies: null,\r\n        neonatalDeath: null,\r\n        apgar1: null,\r\n        apgar5: null,\r\n        apgar10: null,\r\n        neonatalBirthComplications: null,\r\n        admissionToNicu: null,\r\n        notesOnBirthOutcome: null,\r\n        liveBornFetus: null,\r\n        sexFetus: null\r\n    });\r\n\r\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\r\n    const medicationForCOS = ref();\r\n\r\n    const rules = {\r\n        congenitalAnomalies: {\r\n            validator: helpers.withMessage(\r\n                \"Value Required\",\r\n                congenitalAnomaliesValidator(\r\n                    computed(() => store.state.born.dependentOn.noOfBabiesBorn)\r\n                )\r\n            )\r\n        }\r\n    };\r\n\r\n    const v$ = useVuelidate(rules, form);\r\n\r\n    const getBornExtra = () => {\r\n        store\r\n            .dispatch(\"born/getBornExtra\", {\r\n                patientId: store.state.artCycle.patient.id,\r\n                cycleId: store.state.artCycle.selectedCycle.cycleId\r\n            })\r\n            .then((data) => {\r\n                fillForm(data);\r\n            })\r\n            .catch(() => {})\r\n            .finally(() => {\r\n                v$.value.$validate();\r\n            });\r\n    };\r\n\r\n    const fillForm = (data) => {\r\n        form.patientNotes = data.patient_notes;\r\n        form.bornConsentFlag = data.born_consent_flag;\r\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\r\n        form.patientHistoryNotes = data.patient_history_notes;\r\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\r\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\r\n        form.stimulationNotes = data.stimulation_notes;\r\n        form.spermCollectionNotes = data.sperm_collection_notes;\r\n        form.embryologyNotes = data.embryology_notes;\r\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\r\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\r\n        form.transferNotes = data.transfer_notes;\r\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\r\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\r\n            ? new Date(data.estimated_date_of_birth)\r\n            : null;\r\n        form.gestationalAge = data.gestational_age;\r\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\r\n        form.maternalHealthConditions = data.maternal_health_conditions;\r\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\r\n        form.hypertensionDisorder = data.hypertension_disorder;\r\n        form.typeOfLabour = data.type_of_labour;\r\n        form.augmentation = data.augmentation;\r\n        form.methodsOfInduction = data.methods_of_induction;\r\n        form.typeOfDelivery = data.type_of_delivery;\r\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\r\n        form.cervicalRipening = data.cervical_ripening;\r\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\r\n        form.labourBirthComplications = data.labour_birth_complications;\r\n        form.maternalOutcome = data.maternal_outcome;\r\n        form.birthWeight = data.birth_weight;\r\n        form.congenitalAnomalies = data.congenital_anomalies;\r\n        form.neonatalDeath = data.neonatal_death;\r\n        form.apgar1 = data.apgar_1;\r\n        form.apgar5 = data.apgar_5;\r\n        form.apgar10 = data.apgar_10;\r\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\r\n        form.admissionToNicu = data.admission_to_nicu;\r\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\r\n        form.liveBornFetus = data.live_born_fetus; // todo after service\r\n        form.sexFetus = data.sex_fetus; // todo after service\r\n    };\r\n\r\n    const loading = ref(false);\r\n    const toast = useToast();\r\n    const _save = () => {\r\n        loading.value = true;\r\n        let payload = {\r\n            patientId: store.state.artCycle.patient.id,\r\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\r\n            patient_notes: form.patientNotes,\r\n            born_consent_flag: form.bornConsentFlag,\r\n            pgt_a_is_planned: form.pgtAIsPlanned,\r\n            patient_history_notes: form.patientHistoryNotes,\r\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\r\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\r\n            stimulation_notes: form.stimulationNotes,\r\n            sperm_collection_notes: form.spermCollectionNotes,\r\n            embryology_notes: form.embryologyNotes,\r\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\r\n            rec_test_biopsy_result: form.recTestBiopsyResult,\r\n            transfer_notes: form.transferNotes,\r\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\r\n            estimated_date_of_birth: form.estimatedDateOfBirth\r\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\r\n                : null,\r\n            gestational_age: form.gestationalAge,\r\n            complications_of_pregnancy: form.complicationsOfPregnancy,\r\n            maternal_health_conditions: form.maternalHealthConditions,\r\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\r\n            hypertension_disorder: form.hypertensionDisorder,\r\n            type_of_labour: form.typeOfLabour,\r\n            augmentation: form.augmentation,\r\n            methods_of_induction: form.methodsOfInduction,\r\n            type_of_delivery: form.typeOfDelivery,\r\n            all_indications_of_labour: form.allIndicationsOfLabour,\r\n            cervical_ripening: form.cervicalRipening,\r\n            all_indications_caesarean: form.allIndicationsCaesarean,\r\n            labour_birth_complications: form.labourBirthComplications,\r\n            maternal_outcome: form.maternalOutcome,\r\n            birth_weight: form.birthWeight,\r\n            congenital_anomalies: form.congenitalAnomalies,\r\n            neonatal_death: form.neonatalDeath,\r\n            apgar_1: form.apgar1,\r\n            apgar_5: form.apgar5,\r\n            apgar_10: form.apgar10,\r\n            neonatal_birth_complications: form.neonatalBirthComplications,\r\n            admission_to_nicu: form.admissionToNicu,\r\n            notes_on_birth_outcome: form.notesOnBirthOutcome,\r\n            preExistingMentalHealthCondition:\r\n                form.preExistingMentalHealthCondition,\r\n            sex_fetus: form.sexFetus,\r\n            live_born_fetus: form.liveBornFetus\r\n        };\r\n\r\n        store\r\n            .dispatch(\"born/saveBornExtra\", payload)\r\n            .then(() => {\r\n                toast.add({\r\n                    severity: \"success\",\r\n                    summary: \"\",\r\n                    detail: \"Save Successful\",\r\n                    life: 3000\r\n                });\r\n            })\r\n            .catch(() => {})\r\n            .finally(() => {\r\n                loading.value = false;\r\n            });\r\n    };\r\n\r\n    const save = () => {\r\n        if (v$.value.$invalid) {\r\n            return;\r\n        }\r\n        _save();\r\n    };\r\n\r\n    return {\r\n        form,\r\n        loading,\r\n        v$,\r\n        save,\r\n        fillForm,\r\n        getBornExtra,\r\n        medicationForCOS,\r\n        medicationForCOSContainFSHOrLhOrFshPlusLH\r\n    };\r\n}\r\n\r\nexport function useBornFieldOptions() {\r\n    const store = useStore();\r\n    const complicationsOfPregnancyOptions = computed(\r\n        () => store.state.options.complicationsOfPregnancy\r\n    );\r\n\r\n    const metarnalHealthConditionOptions = computed(\r\n        () => store.state.options.maternalHealthConditions\r\n    );\r\n\r\n    const diabetesAndPregnancyOptions = reactive([\r\n        {\r\n            value: \"None\",\r\n            label: \"None\"\r\n        },\r\n        {\r\n            value: \"Gestational | Insulin\",\r\n            label: \"Gestational | Insulin\"\r\n        },\r\n        {\r\n            value: \"Gestational | No Insulin\",\r\n            label: \"Gestational | No Insulin\"\r\n        },\r\n        {\r\n            value: \"Gestational | Insulin Status Unknown\",\r\n            label: \"Gestational | Insulin Status Unknown\"\r\n        },\r\n        {\r\n            value: \"Type I\",\r\n            label: \"Type I\"\r\n        },\r\n        {\r\n            value: \"Type II | Insulin\",\r\n            label: \"Type II | Insulin\"\r\n        },\r\n        {\r\n            value: \"Type II | No Insulin\",\r\n            label: \"Type II | No Insulin\"\r\n        },\r\n        {\r\n            value: \"Type Unknown\",\r\n            label: \"Type Unknown\"\r\n        },\r\n        {\r\n            value: \"Declined testing\",\r\n            label: \"Declined testing\"\r\n        },\r\n        {\r\n            value: \"Unknown\",\r\n            label: \"Unknown\"\r\n        }\r\n    ]);\r\n\r\n    const hypertensionDisorderOptions = reactive([\r\n        {\r\n            value: \"None\",\r\n            label: \"None\"\r\n        },\r\n        {\r\n            value: \"Gestational Hypertension\",\r\n            label: \"Gestational Hypertension\"\r\n        },\r\n        {\r\n            value: \"Preeclampsia\",\r\n            label: \"Preeclampsia\"\r\n        },\r\n        {\r\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\r\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\r\n        },\r\n        {\r\n            value: \"HELLP Syndrome\",\r\n            label: \"HELLP Syndrome\"\r\n        },\r\n        {\r\n            value: \"Eclampsia\",\r\n            label: \"Eclampsia\"\r\n        },\r\n        {\r\n            value: \"Unknown\",\r\n            label: \"Unknown\"\r\n        }\r\n    ]);\r\n\r\n    const typeOfLabourOptions = computed(\r\n        () => store.state.options.typeOfLabour\r\n    );\r\n\r\n    const augmentationOptions = computed(\r\n        () => store.state.options.augmentation\r\n    );\r\n\r\n    const methodsOfInductionOptions = computed(\r\n        () => store.state.options.methodsOfInduction\r\n    );\r\n\r\n    const typeOfDeliveryOptions = computed(\r\n        () => store.state.options.typeOfDelivery\r\n    );\r\n\r\n    const cervicalRipeningOptions = computed(\r\n        () => store.state.options.cervicalRipening\r\n    );\r\n\r\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\r\n\r\n    const neonatalBirthComplicationsOptions = computed(\r\n        () => store.state.options.newbornComplications\r\n    );\r\n\r\n    const indicationLabourOptions = computed(\r\n        () => store.state.options.allIndicationsOfLabour\r\n    );\r\n\r\n    const indicationCaesareanOptions = computed(\r\n        () => store.state.options.allIndicationsCaesarean\r\n    );\r\n\r\n    const labourBirthComplicationsOptions = computed(\r\n        () => store.state.options.labourBirthComplications\r\n    );\r\n\r\n    const maternalOutcomeOptions = computed(\r\n        () => store.state.options.maternalOutcome\r\n    );\r\n\r\n    const medicationForCOSOptions = computed(\r\n        () => store.state.options.medicationAdministraionPriorCOS\r\n    );\r\n\r\n    return {\r\n        complicationsOfPregnancyOptions,\r\n        metarnalHealthConditionOptions,\r\n        diabetesAndPregnancyOptions,\r\n        hypertensionDisorderOptions,\r\n        typeOfLabourOptions,\r\n        augmentationOptions,\r\n        methodsOfInductionOptions,\r\n        typeOfDeliveryOptions,\r\n        cervicalRipeningOptions,\r\n        apgarOptions,\r\n        neonatalBirthComplicationsOptions,\r\n        indicationLabourOptions,\r\n        indicationCaesareanOptions,\r\n        labourBirthComplicationsOptions,\r\n        maternalOutcomeOptions,\r\n        medicationForCOSOptions\r\n    };\r\n}\r\n","const { helpers } = require(\"@vuelidate/validators\");\r\n\r\nconst DATE_REGEX = /^((0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|20)?[0-9]{2})*$/;\r\n\r\nexport const validDate = helpers.withMessage(\r\n    \"Date format is not valid\",\r\n    (value) => {\r\n        if (value == '') return true;\r\n        if (value == null) return true;\r\n        if (value instanceof Date) return true;\r\n        return DATE_REGEX.match(value);\r\n    }\r\n);\r\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n"],"sourceRoot":""}