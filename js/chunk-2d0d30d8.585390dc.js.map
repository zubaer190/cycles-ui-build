{"version":3,"sources":["webpack:///./src/composable/born.js"],"names":["useComplicationFormInit","toast","useToast","store","useStore","form","reactive","complications","spermTooLowCount","treatmentOutcome","typeOfPregnancy","fetalSacsUS","fetalheartsUS","chorionicity","electiveFetalReduction","loading","ref","computed","state","born","fillForm","data","save","value","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","usePregnancyOutcomeForm","pregnancyBirthOutcome","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteCryoPreserved","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","spermOrigin","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","spermSource","semenVolume","spermCount","spermCollection","oocyteCollections","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","useObstetricalHistoryFormInit","priorBirths","priorPregnancies","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","provincialFundingForThisCycle","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForTreatmentCycle","reasonsForMaleFactor","parseInt","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","otherTypeOfStiProtocolDes","medicationForCOS","otherMedicationCOS","adjuvantMedication","otherAdjuvantMediDescription","triggerMedication","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","artCycle","patient","age","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","reasonCancelledOptions","adjuvantMedicationOptions","useBornEmbryoTransferInit","embryoTransfer","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","sourceTransferredEmbryos","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","console","log","useBornFreshEmbryoInit","inseminationMethod","oocytesNotUsed","reasonsForNoUse","embryoStageFreezing","inseminatedInjected","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","utilizableEmbryos","embryosCryopreserved","reasonEmbryoCryopreservation","embryoFreshCryoMethod","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryosThawed","utilizableAfterThaw","embryoStageThawing","embryoFrozenCryoMethod","embryoStageThawingOptions","embryoTransferOptions","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","mediAdminisPriorCos","otherMediPriorCosDesc","totalDoseRekovelleMcg","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","getBornExtra","patientId","id","cycleId","selectedCycle","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","other_medi_prior_cos_desc","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","payload","useBornFieldOptions","complicationsOfPregnancyOptions","complicationsPregnancy","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","label","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS"],"mappings":"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","file":"js/chunk-2d0d30d8.585390dc.js","sourcesContent":["import { DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref } from \"vue\";\nimport { useStore } from \"vuex\";\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        complications: null,\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const fillForm = (data) => {\n        form.complications = data.complications;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.treatmentOutcome = data.treatmentOutcome;\n        form.typeOfPregnancy = data.typeOfPregnancy;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n    };\n\n    const save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        complications,\n        fillForm,\n        loading,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: format(\n                new Date(form.newbornDateBirth),\n                DATE_FORMAT_STRING\n            ),\n            pregnancyLossDate: format(\n                new Date(form.pregnancyLossDate),\n                DATE_FORMAT_STRING\n            )\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n\n    const save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: format(\n                new Date(form.oocyteCollectionDate),\n                DATE_FORMAT_STRING\n            ),\n            oocyteThawDate: format(\n                new Date(form.oocyteThawDate),\n                DATE_FORMAT_STRING\n            ),\n            oocyteFreezeDate: format(\n                new Date(form.oocyteFreezeDate),\n                DATE_FORMAT_STRING\n            ),\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate;\n        form.oocyteThawDate = data.oocyteThawDate;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.spermOrigin = data.spermOrigin;\n        form.ageSpermProvider = data.ageSpermProvider;\n        form.spermDonorID = data.spermDonorID;\n        form.spermDonorStatus = data.spermDonorStatus;\n        form.spermMotility = data.spermMotility;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.spermDonorBank = data.spermDonorBank;\n        form.spermSource = data.spermSource;\n        form.semenVolume = data.semenVolume;\n        form.spermCount = data.spermCount;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: null,\n        priorETsOwnOocytes: null,\n        priorETsDonorOocytes: null,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: null,\n        reasonsForMaleFactor: null\n    });\n\n    const save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle;\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor;\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: null,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: null,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: null,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: null,\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null\n    });\n\n    const save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication = data.adjuvantMedication;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.totalDoseLH = data.totalDoseLH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.estradiolLevel = data.estradiolLevel;\n        form.progesterOneLevel = data.progesterOneLevel;\n        form.endometrialThicknessFreshCycle =\n            data.endometrialThicknessFreshCycle;\n        form.cycleCancelledBeforeRetrieval = data.cycleCancelledBeforeRetrieval;\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n    return {\n        store,\n        form,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: null,\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null\n    });\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness;\n        form.transferDate = data.transferDate;\n        form.dateETAdjusted = data.dateETAdjusted;\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos;\n        form.transferInseminationMethod = data.transferInseminationMethod;\n        form.preImplGeneticTesting = data.preImplGeneticTesting;\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate;\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n    };\n\n    const save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    console.log(store.state.options);\n\n    return {\n        store,\n        form,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions\n    };\n}\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: null,\n        oocytesNotUsed: null,\n        reasonsForNoUse: null,\n        embryoStageFreezing: null,\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const save = () => {\n        store\n            .dispatch(\"born/updateFreshEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                embryoFreezeDate1: form.embryoFreezeDate1\n                    ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate2: form.embryoFreezeDate2\n                    ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate3: form.embryoFreezeDate3\n                    ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate4: form.embryoFreezeDate4\n                    ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions\n    };\n}\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null\n    });\n\n    const save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null\n    });\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {});\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.otherMediPriorCosDesc = data.other_medi_prior_cos_desc;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n    };\n\n    const loading = ref(false);\n    const save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            other_medi_prior_cos_desc: form.otherMediPriorCosDesc,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {})\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    return {\n        form,\n        loading,\n        save,\n        fillForm,\n        getBornExtra\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = reactive([\n        {\n            value: \"Spontaneous\",\n            label: \"Spontaneous\"\n        },\n        {\n            value: \"Induced\",\n            label: \"Induced\"\n        },\n        {\n            value: \"No Labour\",\n            label: \"No Labour\"\n        }\n    ]);\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = reactive([\n        \"Spontaneous Vaginal Birth\",\n        \"Assisted Vaginal\",\n        \"Induced or Spontaneous Labour Cesarean Section\",\n        \"No Labour - Cesarean Section\",\n        \"Unknown\"\n    ]);\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = reactive([\n        \"None\",\n        \"Brachial plexus injury\",\n        \"Caput succedaneum\",\n        \"Cephalohematoma\",\n        \"Clavicular fracture\",\n        \"Facial nerve injury\",\n        \"Fracture - other\",\n        \"Palsy - other\",\n        \"Birth injury - other\",\n        \"Unknown\"\n    ]);\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = reactive([\n        {\n            value: \"No Transfer\",\n            label: \"No Transfer\"\n        },\n        {\n            value: \"Discharged Home\",\n            label: \"Discharged Home\"\n        },\n        {\n            value: \"Transfer to other organization\",\n            label: \"Transfer to other organization\"\n        },\n        {\n            value: \"Transfer to ICU/CCU\",\n            label: \"Transfer to ICU/CCU\"\n        },\n        {\n            value: \"Transfer to other non-obstetrical unit same hospital\",\n            label: \"Transfer to other non-obstetrical unit same hospital\"\n        },\n        {\n            value: \"Maternal Death -Not related to Pregnancy or Birth\",\n            label: \"Maternal Death -Not related to Pregnancy or Birth\"\n        },\n        {\n            value: \"Maternal Death - Related to Pregnancy or Birth\",\n            label: \"Maternal Death - Related to Pregnancy or Birth\"\n        }\n    ]);\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n"],"sourceRoot":""}