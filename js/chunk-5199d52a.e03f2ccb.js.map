{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","isComplicationNone","param","helpers","withParams","complications","length","isEmbryoTransferYes","embryoTransfer","fetalSacsUSValidator","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","requireWhen","requiredWhen","validator","_save","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","isNumberOocytesInseminatedInjected","inseminatedInjected","isIVForFETCycle","isOocyteRetrivedGreaterThan0","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","spermOrigin","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","spermSource","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","cycleType","freshEmbryos","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","mustBe0IfPriorPregnancies0","priorPregnancies","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","useObstetricalHistoryFormInit","priorBirths","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","requiredIfMedicationForCOSContains","medicationForCOS","includes","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","otherAdjuvantMediDescription","triggerMedication","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","minValue","maxValue","requiredIfContains","patient","age","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","reasonCancelledOptions","adjuvantMedicationOptions","embryoTransferValidator","cycle","cancel","cyccleType","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","sourceTransferredEmbryosValidator","toString","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","freshSourceTransferredEmbryosIds","preImplGeneticTestingValidator","cycleDate","sitePGTembryoValidator","charTransferredEmbryoValidator","frozenSourceTransferredEmbryosIds","numberThawsValidator","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","reasonsForNoUseValidator","oocytesNotUsed","embryoStageFreezingValidator","embryosCryopreserved","inseminatedInjectedValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","utilizableEmbryos","reasonEmbryoCryopreservation","embryoFreshCryoMethod","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryosThawed","utilizableAfterThaw","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","isFETCycle","embryoStageThawingOptions","embryoTransferOptions","requiredIfCycleGreaterthan22Jan","requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes","totalDoseRekovelleMcgValidator","congenitalAnomaliesValidator","pregnancyOutcome","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","mediAdminisPriorCos","otherMediPriorCosDesc","totalDoseRekovelleMcg","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","patientId","id","cycleId","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","other_medi_prior_cos_desc","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","payload","useBornFieldOptions","complicationsOfPregnancyOptions","complicationsPregnancy","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS"],"mappings":"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","file":"js/chunk-5199d52a.e03f2ccb.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission\n    };\n}\n","import { DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\n\nconst isComplicationNone = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.complications == \"None\") {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst isEmbryoTransferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer == \"yes\") {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst fetalSacsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == null ||\n            param.typeOfPregnancy == \"Biochemical\" ||\n            param.typeOfPregnancy == \"Not Pregnant\" ||\n            param.typeOfPregnancy == \"Unknown\"\n        ) {\n            return true;\n        }\n\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\"\n        ) {\n            return parseInt(value) > 0;\n        }\n\n        if (param.typeOfPregnancy == \"Ectopic\") {\n            return parseInt(value) >= 0;\n        }\n\n        return true;\n    });\n\nconst fetalheartsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\" ||\n            param.typeOfPregnancy == \"Ectopic\"\n        ) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\n\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\n                typeOfPregnancy.value == \"Heterotopic\") &&\n            parseInt(fetalheartsUS.value) >= 2\n        ) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const confirm = useConfirm();\n\n    const form = reactive({\n        complications: null,\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\n\n    const fillForm = (data) => {\n        form.complications = data.complications;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.treatmentOutcome = data.treatmentOutcome;\n        form.typeOfPregnancy = data.typeOfPregnancy;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n    };\n\n    const rule = {\n        spermTooLowCount: { requireWhen: isComplicationNone(form) },\n        typeOfPregnancy: {\n            requiredWhen: isEmbryoTransferYes(store.state.born.embryoTransfer)\n        },\n        fetalSacsUS: {\n            requiredWhen: fetalSacsUSValidator(form)\n        },\n        fetalheartsUS: {\n            validator: fetalheartsUSValidator(form)\n        },\n        chorionicity: {\n            validator: chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n        },\n        electiveFetalReduction: {\n            validator: chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n        }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fetalSacsUSWarning = ref();\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        confirm,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nconst newbornDateBirthValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return value != 0;\n        }\n        return true;\n    });\n\nconst pregnancyLossDateValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050890\" ||\n            form.pregnancyBirthOutcome == \"1050900\" ||\n            form.pregnancyBirthOutcome == \"1050910\"\n        ) {\n            return value != null;\n        }\n        return true;\n    });\n\nconst babiesbornValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: { validator: pregnancyLossDateValidator(form) },\n        newbornDateBirth: {\n            validator: newbornDateBirthValidator(form)\n        },\n        babiesborn: {\n            validator: babiesbornValidator(form)\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: form.newbornDateBirth\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\n                : null,\n            pregnancyLossDate: form.pregnancyLossDate\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\n                : null\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isNumberOocytesInseminatedInjected = (param) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(param.inseminatedInjected) > 0) {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        return true; // temp for now\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return value != null;\n        }\n        return true;\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            requiredWhen: isIVForFETCycle(\n                store.state.artCycle.selectedCycle.cycleType\n            )\n        },\n        oocyteCryoPreserved: {\n            requiredWhen: isOocyteRetrivedGreaterThan0(form)\n        },\n        oocyteCryoMethod: {\n            requiredWhen: isNumberOocytesCryoedIsGreaterThan0(form)\n        },\n        spermOrigin: {\n            requireWhen: isNumberOocytesInseminatedInjected(\n                store.state.born.freshEmbryos\n            )\n        },\n        oocyteFreezeDate: {\n            requiredWhen: isNumberOocytesCryoedIsGreaterThan0(form)\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: form.oocyteCollectionDate\n                ? format(\n                      new Date(form.oocyteCollectionDate),\n                      DATE_FORMAT_STRING\n                  )\n                : null,\n            oocyteThawDate: form.oocyteThawDate\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\n                : null,\n            oocyteFreezeDate: form.oocyteFreezeDate\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\n                : null,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate;\n        form.oocyteThawDate = data.oocyteThawDate;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.spermOrigin = data.spermOrigin;\n        form.ageSpermProvider = data.ageSpermProvider;\n        form.spermDonorID = data.spermDonorID;\n        form.spermDonorStatus = data.spermDonorStatus;\n        form.spermMotility = data.spermMotility;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.spermDonorBank = data.spermDonorBank;\n        form.spermSource = data.spermSource;\n        form.semenVolume = data.semenVolume;\n        form.spermCount = data.spermCount;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.reasonsForTreatmentCycle == 1) {\n            return value != null;\n        }\n        return true;\n    });\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: null,\n        priorETsOwnOocytes: null,\n        priorETsDonorOocytes: null,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: null,\n        reasonsForMaleFactor: null\n    });\n\n    const rules = {\n        priorBirths: {\n            mustBe0IfPriorPregnancies0: mustBe0IfPriorPregnancies0(form)\n        },\n        typeOfFunding: {\n            requiredIfprovincialFundingIsYes: requiredIfprovincialFundingIsYes(\n                form\n            )\n        },\n        reasonsForMaleFactor: {\n            requiredIfReasonsForTreatmentCycleIsMaleFactor: requiredIfReasonsForTreatmentCycleIsMaleFactor(\n                form\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle;\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor;\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return value != null;\n        }\n\n        return true;\n    });\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: null,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: null,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: null,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: null,\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: { required },\n        hightOfOocyteHight: { minValue: minValue(90), maxValue: maxValue(240) },\n        weightOfOocyte: { minValue: minValue(25), maxValue: maxValue(227) },\n        noOfDaysGonadotropins: {\n            requiredIfContains: requiredIfMedicationForCOSContains(form)\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication = data.adjuvantMedication;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.totalDoseLH = data.totalDoseLH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.estradiolLevel = data.estradiolLevel;\n        form.progesterOneLevel = data.progesterOneLevel;\n        form.endometrialThicknessFreshCycle =\n            data.endometrialThicknessFreshCycle;\n        form.cycleCancelledBeforeRetrieval = data.cycleCancelledBeforeRetrieval;\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst embryoTransferValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cancel == false ||\n            cycle.value.cyccleType == \"FET\" ||\n            cycle.value.cyccleType == \"FOIVF\"\n        ) {\n            return value != null;\n        }\n\n        return true;\n    });\nconst isEbryoTrasferNo = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isEbryoTrasferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst preparationUterineLiningValidator = (cycleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\nconst transferDateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst dateETAdjustedValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst assistedZonaHatchingValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst embryosTransferredValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst sourceTransferredEmbryosValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return value.toString().length > 0;\n        }\n        return true;\n    });\n\nconst transferInseminationMethodValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\n\n        if (\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            freshSourceTransferredEmbryosIds.includes(\n                sourceTransferredEmbryos.value\n            )\n        ) {\n            return value != null;\n        }\n        return true;\n    });\n\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(\"2019-01-01\")\n        ) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(\"2019-01-01\")\n        ) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst charTransferredEmbryoValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos,\n    cycleDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const frozenSourceTransferredEmbryosIds = [7, 8, 9, 10, 11, 12, 12];\n\n        if (\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            frozenSourceTransferredEmbryosIds.includes(\n                sourceTransferredEmbryos.value\n            ) &&\n            new Date(cycleDate.value) > new Date(\"2019-01-01\")\n        ) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (preImplGeneticTesting.value == \"yes\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst gestationalCarrierSurrogateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst numberThawsValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: null,\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null\n    });\n\n    const rules = {\n        embryoTransfer: {\n            validator: embryoTransferValidator(\n                computed(() => store.state.artCycle.selectedCycle)\n            )\n        },\n        reasonsNoET: {\n            validator: isEbryoTrasferNo(computed(() => form.embryoTransfer))\n        },\n        preparationUterineLining: {\n            validator: preparationUterineLiningValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        transferDate: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        dateETAdjusted: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        assistedZonaHatching: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        embryosTransferred: { validator: embryosTransferredValidator() },\n        sourceTransferredEmbryos: {\n            validator: sourceTransferredEmbryosValidator(\n                computed(() => form.embryoTransfer)\n            )\n        },\n        transferInseminationMethod: {\n            validator: transferInseminationMethodValidator(\n                computed(() => form.embryosTransferred),\n                computed(() => form.sourceTransferredEmbryos)\n            )\n        },\n        preImplGeneticTesting: {\n            validator: preImplGeneticTestingValidator(\n                computed(() => form.embryoTransfer),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        charTransferredEmbryo: {\n            validator: charTransferredEmbryoValidator(\n                computed(() => form.embryosTransferred),\n                computed(() => form.sourceTransferredEmbryos),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        sitePGTembryo: {\n            validator: sitePGTembryoValidator(\n                computed(() => form.preImplGeneticTesting),\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        gestationalCarrierSurrogate: {\n            validator: isEbryoTrasferYes(computed(() => form.embryoTransfer))\n        },\n        numberThaws: { validator: numberThawsValidator() }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness;\n        form.transferDate = data.transferDate;\n        form.dateETAdjusted = data.dateETAdjusted;\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos;\n        form.transferInseminationMethod = data.transferInseminationMethod;\n        form.preImplGeneticTesting = data.preImplGeneticTesting;\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate;\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n    };\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions\n    };\n}\n\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nconst oocytesNotUsedValidator = (oocyteCollections, inseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n\n        const retrievedOrThawed =\n            oocyteCollections.value.retrievedOrThawed != null\n                ? parseInt(oocyteCollections.value.retrievedOrThawed)\n                : 0;\n        const oocytesCryopreserved =\n            oocyteCollections.value.oocytesCryopreserved != null\n                ? parseInt(oocyteCollections.value.oocytesCryopreserved)\n                : 0;\n        const _inseminatedInjected =\n            inseminatedInjected.value != null\n                ? parseInt(inseminatedInjected.value)\n                : 0;\n\n        if (oocyteCollections.value.retrievedOrThawed > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) ==\n                    retrievedOrThawed -\n                        oocytesCryopreserved -\n                        _inseminatedInjected\n            );\n        }\n        return true;\n    });\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (oocytesNotUsed.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n        if (noOfOocytesRetrieved.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOfOocytesRetrieved.value\n            );\n        }\n        return true;\n    });\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) < noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst embryosCryopreservedValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst reasonEmbryoCryopreservationValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: null,\n        oocytesNotUsed: null,\n        reasonsForNoUse: null,\n        embryoStageFreezing: null,\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {\n            validator: inseminationMethodValidator(\n                computed(\n                    () => store.state.born.oocyteCollections.retrievedOrThawed\n                )\n            )\n        },\n        oocytesNotUsed: {\n            validator: oocytesNotUsedValidator(\n                computed(() => store.state.born.oocyteCollections),\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        reasonsForNoUse: {\n            validator: reasonsForNoUseValidator(\n                computed(() => form.oocytesNotUsed)\n            )\n        },\n        embryoStageFreezing: {\n            validator: embryoStageFreezingValidator(\n                computed(() => form.embryosCryopreserved)\n            )\n        },\n        inseminatedInjected: {\n            validator: inseminatedInjectedValidator(\n                computed(\n                    () => store.state.born.oocyteCollections.retrievedOrThawed\n                )\n            )\n        },\n        normalFertilization2PN: {\n            validator: normalFertilization2PNValidator(\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        ofMII: {\n            validator: ofMIIValidator(computed(() => form.inseminatedInjected))\n        },\n        utilizableEmbryos: {\n            validator: utilizableEmbryosValidator(\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        embryosCryopreserved: {\n            validator: embryosCryopreservedValidator(\n                computed(() => form.inseminatedInjected)\n            )\n        },\n        reasonEmbryoCryopreservation: {\n            validator: reasonEmbryoCryopreservationValidator(\n                computed(() => form.embryosCryopreserved)\n            )\n        },\n        embryoFreshCryoMethod: {\n            validator: embryoFreshCryoMethodValidator(\n                computed(() => form.embryosCryopreserved)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateFreshEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                embryoFreezeDate1: form.embryoFreezeDate1\n                    ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate2: form.embryoFreezeDate2\n                    ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate3: form.embryoFreezeDate3\n                    ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate4: form.embryoFreezeDate4\n                    ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\n            ? new Date(data.embryoFreezeDate1)\n            : null;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\n            ? new Date(data.embryoFreezeDate2)\n            : null;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\n            ? new Date(data.embryoFreezeDate3)\n            : null;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\n            ? new Date(data.embryoFreezeDate4)\n            : null;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions\n    };\n}\n\nconst isFETCycleValidator = (cyccleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        embryoStageThawing: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        embryoFrozenCryoMethod: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        embryoThawDate: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        donatedEmbryoFromAnotherCouple: {\n            isFETCycle: isFETCycleValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleType)\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null,\n                embryoThawDate: form.embryoThawDate\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22Jan = (param, cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycle.cycleType == \"FET\" || cycle.cycleType == \"FOIVF\") {\n            return true;\n        }\n\n        if (new Date(cycle.cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst totalDoseRekovelleMcgValidator = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (param.value) {\n            return value != null;\n        }\n        return true;\n    });\n\nconst congenitalAnomaliesValidator = (pregnancyOutcome) =>\n    helpers.withParams({ type: \"pregnancyOutcome\" }, (value) => {\n        if (\n            pregnancyOutcome.value.babiesborn != null &&\n            parseInt(pregnancyOutcome.value.babiesborn) > 0\n        ) {\n            return value != null;\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null\n    });\n\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\n\n    const rules = {\n        mediAdminisPriorCos: {\n            requiredIfCycleGreaterthan22Jan: requiredIfCycleGreaterthan22Jan(\n                form,\n                store.state.artCycle.selectedCycle\n            )\n        },\n        totalDoseRekovelleMcg: {\n            validator: totalDoseRekovelleMcgValidator(\n                computed(() => medicationForCOSContainFSHOrLhOrFshPlusLH.value)\n            )\n        },\n        endoRecTestdPerformed: {\n            requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes: requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes(\n                store.state.artCycle.selectedCycle.cycleDate,\n                store.state.born.embryoTransfer\n            )\n        },\n        congenitalAnomalies: {\n            validator: congenitalAnomaliesValidator(\n                computed(() => store.state.born.pregnancyOutcome)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.otherMediPriorCosDesc = data.other_medi_prior_cos_desc;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\n            ? new Date(data.estimated_date_of_birth)\n            : null;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            other_medi_prior_cos_desc: form.otherMediPriorCosDesc,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra,\n        medicationForCOSContainFSHOrLhOrFshPlusLH\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = reactive([\n        {\n            value: \"Spontaneous\",\n            label: \"Spontaneous\"\n        },\n        {\n            value: \"Induced\",\n            label: \"Induced\"\n        },\n        {\n            value: \"No Labour\",\n            label: \"No Labour\"\n        }\n    ]);\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = reactive([\n        \"Spontaneous Vaginal Birth\",\n        \"Assisted Vaginal\",\n        \"Induced or Spontaneous Labour Cesarean Section\",\n        \"No Labour - Cesarean Section\",\n        \"Unknown\"\n    ]);\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = reactive([\n        \"None\",\n        \"Brachial plexus injury\",\n        \"Caput succedaneum\",\n        \"Cephalohematoma\",\n        \"Clavicular fracture\",\n        \"Facial nerve injury\",\n        \"Fracture - other\",\n        \"Palsy - other\",\n        \"Birth injury - other\",\n        \"Unknown\"\n    ]);\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = reactive([\n        {\n            value: \"No Transfer\",\n            label: \"No Transfer\"\n        },\n        {\n            value: \"Discharged Home\",\n            label: \"Discharged Home\"\n        },\n        {\n            value: \"Transfer to other organization\",\n            label: \"Transfer to other organization\"\n        },\n        {\n            value: \"Transfer to ICU/CCU\",\n            label: \"Transfer to ICU/CCU\"\n        },\n        {\n            value: \"Transfer to other non-obstetrical unit same hospital\",\n            label: \"Transfer to other non-obstetrical unit same hospital\"\n        },\n        {\n            value: \"Maternal Death -Not related to Pregnancy or Birth\",\n            label: \"Maternal Death -Not related to Pregnancy or Birth\"\n        },\n        {\n            value: \"Maternal Death - Related to Pregnancy or Birth\",\n            label: \"Maternal Death - Related to Pregnancy or Birth\"\n        }\n    ]);\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n"],"sourceRoot":""}