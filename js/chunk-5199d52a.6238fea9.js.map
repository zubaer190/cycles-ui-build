{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","isComplicationNone","param","helpers","withParams","complications","req","typeOfPregnancyValidator","embryoTransfer","fetalSacsUSValidator","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","validator","withMessage","dependentOn","_save","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","console","log","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","spermOriginValidator","oocytesInseminatedInjected","spermSourceValidator","isIVForFETCycle","isOocyteRetrivedGreaterThan0","retrievedOrThawed","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","spermOrigin","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","spermSource","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","cycleType","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","mustBe0IfPriorPregnancies0","priorPregnancies","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","cycleDate","useObstetricalHistoryFormInit","priorBirths","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","requiredIfMedicationForCOSContains","medicationForCOS","includes","totalDoseFSHValidator","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","otherAdjuvantMediDescription","triggerMedication","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","minValue","maxValue","patient","age","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","reasonCancelledOptions","adjuvantMedicationOptions","embryoTransferValidator","cycle","cancel","cyccleType","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","frozenEmbryosIds","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","RADIO_NO","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","length","embryoStageFreezingValidator","embryosCryopreserved","inseminatedInjectedValidator","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","utilizableEmbryos","reasonEmbryoCryopreservation","embryoFreshCryoMethod","oocytesRetrieved","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryosThawed","utilizableAfterThaw","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","embryoStageThawingOptions","embryoTransferOptions","requiredIfCycleGreaterthan22Jan","requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes","totalDoseRekovelleMcgValidator","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","mediAdminisPriorCos","otherMediPriorCosDesc","totalDoseRekovelleMcg","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","patientId","id","cycleId","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","other_medi_prior_cos_desc","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","payload","useBornFieldOptions","complicationsOfPregnancyOptions","complicationsPregnancy","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS"],"mappings":"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","file":"js/chunk-5199d52a.6238fea9.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission\n    };\n}\n","import { DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { CYCLE_START_DATE_JAN_19, RADIO_NO } from \"@/constants\";\n\nconst isComplicationNone = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.complications == \"None\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst typeOfPregnancyValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst fetalSacsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == null ||\n            param.typeOfPregnancy == \"Biochemical\" ||\n            param.typeOfPregnancy == \"Not Pregnant\" ||\n            param.typeOfPregnancy == \"Unknown\"\n        ) {\n            return true;\n        }\n\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\"\n        ) {\n            return parseInt(value) > 0;\n        }\n\n        if (param.typeOfPregnancy == \"Ectopic\") {\n            return parseInt(value) >= 0;\n        }\n\n        return true;\n    });\n\nconst fetalheartsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\n                typeOfPregnancy.value == \"Heterotopic\") &&\n            parseInt(fetalheartsUS.value) >= 2\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const confirm = useConfirm();\n\n    const form = reactive({\n        complications: null,\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\n\n    const fillForm = (data) => {\n        form.complications = data.complications;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.treatmentOutcome = data.treatmentOutcome;\n        form.typeOfPregnancy = data.typeOfPregnancy;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n    };\n\n    const rule = {\n        spermTooLowCount: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isComplicationNone(form)\n            )\n        },\n        typeOfPregnancy: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                typeOfPregnancyValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer)\n                )\n            )\n        },\n        fetalSacsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalSacsUSValidator(form)\n            )\n        },\n        fetalheartsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalheartsUSValidator(form)\n            )\n        },\n        chorionicity: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        electiveFetalReduction: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fetalSacsUSWarning = ref();\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        confirm,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nconst newbornDateBirthValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        console.log(form.pregnancyBirthOutcome);\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst pregnancyLossDateValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050890\" ||\n            form.pregnancyBirthOutcome == \"1050900\" ||\n            form.pregnancyBirthOutcome == \"1050910\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst babiesbornValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                pregnancyLossDateValidator(form)\n            )\n        },\n        newbornDateBirth: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                newbornDateBirthValidator(form)\n            )\n        },\n        babiesborn: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                babiesbornValidator(form)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: form.newbornDateBirth\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\n                : null,\n            pregnancyLossDate: form.pregnancyLossDate\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\n                : null\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermOriginValidator = (oocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermSourceValidator = (oocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        return true; // temp for now\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // return true; // temp for now\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isIVForFETCycle(store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        oocyteCryoPreserved: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isOocyteRetrivedGreaterThan0(form)\n            )\n        },\n        oocyteCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermOrigin: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermOriginValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    )\n                )\n            )\n        },\n        spermSource: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermSourceValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    )\n                )\n            )\n        },\n        oocyteFreezeDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: form.oocyteCollectionDate\n                ? format(\n                      new Date(form.oocyteCollectionDate),\n                      DATE_FORMAT_STRING\n                  )\n                : null,\n            oocyteThawDate: form.oocyteThawDate\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\n                : null,\n            oocyteFreezeDate: form.oocyteFreezeDate\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\n                : null,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate;\n        form.oocyteThawDate = data.oocyteThawDate;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.spermOrigin = data.spermOrigin;\n        form.ageSpermProvider = data.ageSpermProvider;\n        form.spermDonorID = data.spermDonorID;\n        form.spermDonorStatus = data.spermDonorStatus;\n        form.spermMotility = data.spermMotility;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.spermDonorBank = data.spermDonorBank;\n        form.spermSource = data.spermSource;\n        form.semenVolume = data.semenVolume;\n        form.spermCount = data.spermCount;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.reasonsForTreatmentCycle == 1) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst provincialFundingValidator = (cycleDate) =>\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: null,\n        priorETsOwnOocytes: null,\n        priorETsDonorOocytes: null,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: null,\n        reasonsForMaleFactor: null\n    });\n\n    const rules = {\n        priorBirths: {\n            validator: mustBe0IfPriorPregnancies0(form)\n        },\n        typeOfFunding: {\n            validator: requiredIfprovincialFundingIsYes(form)\n        },\n        reasonsForMaleFactor: {\n            validator: helpers.withMessage(\n                \"Required when Reason for treatment cycle is male\",\n                requiredIfReasonsForTreatmentCycleIsMaleFactor(form)\n            )\n        },\n        provincialFundingForThisCycle: {\n            validator: provincialFundingValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle;\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor;\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseFSHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value == 4) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseLHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return (\n                helpers.req(value) &&\n                parseFloat(value) >= 200 &&\n                parseFloat(value) <= 400\n            );\n        }\n\n        return true;\n    });\n\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value == 4) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value == 4) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: null,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: null,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: null,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: null,\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        hightOfOocyteHight: {\n            minValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                minValue(90)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                maxValue(240)\n            )\n        },\n        weightOfOocyte: {\n            minValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                minValue(25)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                maxValue(227)\n            )\n        },\n        noOfDaysGonadotropins: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                requiredIfMedicationForCOSContains(form)\n            )\n        },\n        totalDoseFSH: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                totalDoseFSHValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        totalDoseLH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 200 and 400\",\n                totalDoseLHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        afcOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                afcOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        amhLevelOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                amhLevelOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication = data.adjuvantMedication;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.totalDoseLH = data.totalDoseLH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.estradiolLevel = data.estradiolLevel;\n        form.progesterOneLevel = data.progesterOneLevel;\n        form.endometrialThicknessFreshCycle =\n            data.endometrialThicknessFreshCycle;\n        form.cycleCancelledBeforeRetrieval = data.cycleCancelledBeforeRetrieval;\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst embryoTransferValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cancel == false ||\n            cycle.value.cyccleType == \"FET\" ||\n            cycle.value.cyccleType == \"FOIVF\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\nconst isEbryoTrasferNo = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isEbryoTrasferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preparationUterineLiningValidator = (cycleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst transferDateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst dateETAdjustedValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst assistedZonaHatchingValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst embryosTransferredValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\nconst sourceTransferredEmbryosValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst transferInseminationMethodValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\n        if (\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            freshSourceTransferredEmbryosIds.includes(\n                sourceTransferredEmbryos.value\n            ) &&\n            new Date(cycleStartDate) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst charTransferredEmbryoValidator = (\n    noOfEmbryosTransferred,\n    preImplementationGeneticSergery,\n    cycleDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            preImplementationGeneticSergery.value == \"yes\" &&\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (preImplGeneticTesting.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst gestationalCarrierSurrogateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const frozenEmbryosIds = [7, 8, 9, 10, 11, 12, 13];\n\n        if (\n            frozenEmbryosIds.includes(sourceTransferredEmbryos.value) &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst endometrialThicknessValidtor = (cyccleType) =>\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: null,\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null\n    });\n\n    const rules = {\n        embryoTransfer: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoTransferValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        reasonsNoET: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferNo(computed(() => form.embryoTransfer))\n            )\n        },\n        preparationUterineLining: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                preparationUterineLiningValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        transferDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        dateETAdjusted: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        assistedZonaHatching: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        embryosTransferred: { validator: embryosTransferredValidator() },\n        sourceTransferredEmbryos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                sourceTransferredEmbryosValidator(\n                    computed(() => form.embryoTransfer)\n                )\n            )\n        },\n        transferInseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                transferInseminationMethodValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        preImplGeneticTesting: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                preImplGeneticTestingValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        charTransferredEmbryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                charTransferredEmbryoValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        sitePGTembryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                sitePGTembryoValidator(\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        gestationalCarrierSurrogate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        numberThaws: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                numberThawsValidator(\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        endometrialThickness: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                endometrialThicknessValidtor(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer\n            ? data.embryoTransfer\n            : RADIO_NO;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness;\n        form.transferDate = data.transferDate;\n        form.dateETAdjusted = data.dateETAdjusted\n            ? data.dateETAdjusted\n            : RADIO_NO;\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET\n            ? data.ultrasoundGuidedET\n            : RADIO_NO;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET\n            ? data.electiveTransfeESET\n            : RADIO_NO;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos;\n        form.transferInseminationMethod = data.transferInseminationMethod;\n        form.preImplGeneticTesting = data.preImplGeneticTesting\n            ? data.preImplGeneticTesting\n            : RADIO_NO;\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate\n            ? data.gestationalCarrierSurrogate\n            : RADIO_NO;\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n    };\n\n    const _save = () => {\n        console.log({ ...form });\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        console.log(\"embryo transfer save\");\n        if (v$.value.$invalid) {\n            return;\n        }\n        console.log(\"embryo transfer valid\");\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions\n    };\n}\n\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nconst oocytesNotUsedValidator = (oocyteCollections, inseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n\n        const retrievedOrThawed =\n            oocyteCollections.value.retrievedOrThawed != null\n                ? parseInt(oocyteCollections.value.retrievedOrThawed)\n                : 0;\n        const oocytesCryopreserved =\n            oocyteCollections.value.oocytesCryopreserved != null\n                ? parseInt(oocyteCollections.value.oocytesCryopreserved)\n                : 0;\n        const _inseminatedInjected =\n            inseminatedInjected.value != null\n                ? parseInt(inseminatedInjected.value)\n                : 0;\n\n        if (oocyteCollections.value.retrievedOrThawed > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) ==\n                    retrievedOrThawed -\n                        oocytesCryopreserved -\n                        _inseminatedInjected\n            );\n        }\n        return true;\n    });\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (oocytesNotUsed.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n        if (noOfOocytesRetrieved.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOfOocytesRetrieved.value\n            );\n        }\n        return true;\n    });\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) < noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst embryosCryopreservedValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst reasonEmbryoCryopreservationValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: null,\n        oocytesNotUsed: null,\n        reasonsForNoUse: null,\n        embryoStageFreezing: null,\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                inseminationMethodValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    )\n                )\n            )\n        },\n        oocytesNotUsed: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                oocytesNotUsedValidator(\n                    computed(() => store.state.born.oocyteCollections),\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        reasonsForNoUse: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonsForNoUseValidator(computed(() => form.oocytesNotUsed))\n            )\n        },\n        embryoStageFreezing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoStageFreezingValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        inseminatedInjected: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                inseminatedInjectedValidator(\n                    computed(\n                        () =>\n                            store.state.born.oocyteCollections.retrievedOrThawed\n                    )\n                )\n            )\n        },\n        normalFertilization2PN: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                normalFertilization2PNValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        ofMII: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                ofMIIValidator(computed(() => form.inseminatedInjected))\n            )\n        },\n        utilizableEmbryos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                utilizableEmbryosValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        embryosCryopreserved: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryosCryopreservedValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        reasonEmbryoCryopreservation: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonEmbryoCryopreservationValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        embryoFreshCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreshCryoMethodValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateFreshEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                embryoFreezeDate1: form.embryoFreezeDate1\n                    ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate2: form.embryoFreezeDate2\n                    ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate3: form.embryoFreezeDate3\n                    ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate4: form.embryoFreezeDate4\n                    ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\n            ? new Date(data.embryoFreezeDate1)\n            : null;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\n            ? new Date(data.embryoFreezeDate2)\n            : null;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\n            ? new Date(data.embryoFreezeDate3)\n            : null;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\n            ? new Date(data.embryoFreezeDate4)\n            : null;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions\n    };\n}\n\nconst isFETCycleValidator = (cyccleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoStageThawing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoFrozenCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoThawDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        donatedEmbryoFromAnotherCouple: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null,\n                embryoThawDate: form.embryoThawDate\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22Jan = (param, cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycle.cycleType == \"FET\" || cycle.cycleType == \"FOIVF\") {\n            return true;\n        }\n\n        if (new Date(cycle.cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n\n        return true;\n    });\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\n        if (parseInt(noOfBabiesBorn.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null\n    });\n\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\n    const medicationForCOS = ref();\n\n    const rules = {\n        mediAdminisPriorCos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                requiredIfCycleGreaterthan22Jan(\n                    form,\n                    store.state.artCycle.selectedCycle\n                )\n            )\n        },\n        totalDoseRekovelleMcg: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                totalDoseRekovelleMcgValidator(\n                    computed(() => medicationForCOS.value)\n                )\n            )\n        },\n        endoRecTestdPerformed: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes(\n                    store.state.artCycle.selectedCycle.cycleDate,\n                    store.state.born.embryoTransfer\n                )\n            )\n        },\n        congenitalAnomalies: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                congenitalAnomaliesValidator(\n                    computed(() => store.state.born.dependentOn.noOfBabiesBorn)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.otherMediPriorCosDesc = data.other_medi_prior_cos_desc;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\n            ? new Date(data.estimated_date_of_birth)\n            : null;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            other_medi_prior_cos_desc: form.otherMediPriorCosDesc,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra,\n        medicationForCOS,\n        medicationForCOSContainFSHOrLhOrFshPlusLH\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = reactive([\n        {\n            value: \"Spontaneous\",\n            label: \"Spontaneous\"\n        },\n        {\n            value: \"Induced\",\n            label: \"Induced\"\n        },\n        {\n            value: \"No Labour\",\n            label: \"No Labour\"\n        }\n    ]);\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = reactive([\n        \"Spontaneous Vaginal Birth\",\n        \"Assisted Vaginal\",\n        \"Induced or Spontaneous Labour Cesarean Section\",\n        \"No Labour - Cesarean Section\",\n        \"Unknown\"\n    ]);\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = reactive([\n        \"None\",\n        \"Brachial plexus injury\",\n        \"Caput succedaneum\",\n        \"Cephalohematoma\",\n        \"Clavicular fracture\",\n        \"Facial nerve injury\",\n        \"Fracture - other\",\n        \"Palsy - other\",\n        \"Birth injury - other\",\n        \"Unknown\"\n    ]);\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = reactive([\n        {\n            value: \"No Transfer\",\n            label: \"No Transfer\"\n        },\n        {\n            value: \"Discharged Home\",\n            label: \"Discharged Home\"\n        },\n        {\n            value: \"Transfer to other organization\",\n            label: \"Transfer to other organization\"\n        },\n        {\n            value: \"Transfer to ICU/CCU\",\n            label: \"Transfer to ICU/CCU\"\n        },\n        {\n            value: \"Transfer to other non-obstetrical unit same hospital\",\n            label: \"Transfer to other non-obstetrical unit same hospital\"\n        },\n        {\n            value: \"Maternal Death -Not related to Pregnancy or Birth\",\n            label: \"Maternal Death -Not related to Pregnancy or Birth\"\n        },\n        {\n            value: \"Maternal Death - Related to Pregnancy or Birth\",\n            label: \"Maternal Death - Related to Pregnancy or Birth\"\n        }\n    ]);\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n"],"sourceRoot":""}