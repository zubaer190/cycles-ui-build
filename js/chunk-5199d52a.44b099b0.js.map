{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","useComplicationFormInit","toast","useToast","complications","spermTooLowCount","treatmentOutcome","typeOfPregnancy","fetalSacsUS","fetalheartsUS","chorionicity","electiveFetalReduction","loading","born","fillForm","data","rule","_save","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","useConfirm","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","usePregnancyOutcomeForm","pregnancyBirthOutcome","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteCryoPreserved","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","spermOrigin","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","spermSource","semenVolume","spermCount","spermCollection","oocyteCollections","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","useObstetricalHistoryFormInit","priorBirths","priorPregnancies","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","provincialFundingForThisCycle","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForTreatmentCycle","reasonsForMaleFactor","parseInt","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","otherTypeOfStiProtocolDes","medicationForCOS","otherMedicationCOS","adjuvantMedication","otherAdjuvantMediDescription","triggerMedication","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","artCycle","patient","age","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","reasonCancelledOptions","adjuvantMedicationOptions","useBornEmbryoTransferInit","embryoTransfer","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","sourceTransferredEmbryos","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","console","log","useBornFreshEmbryoInit","inseminationMethod","oocytesNotUsed","reasonsForNoUse","embryoStageFreezing","inseminatedInjected","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","utilizableEmbryos","embryosCryopreserved","reasonEmbryoCryopreservation","embryoFreshCryoMethod","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryosThawed","utilizableAfterThaw","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","embryoStageThawingOptions","embryoTransferOptions","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","mediAdminisPriorCos","otherMediPriorCosDesc","totalDoseRekovelleMcg","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","getBornExtra","patientId","id","cycleId","selectedCycle","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","other_medi_prior_cos_desc","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","payload","useBornFieldOptions","complicationsOfPregnancyOptions","complicationsPregnancy","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS"],"mappings":"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","file":"js/chunk-5199d52a.44b099b0.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission\n    };\n}\n","import { DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, requiredIf } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        complications: null,\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const fillForm = (data) => {\n        form.complications = data.complications;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.treatmentOutcome = data.treatmentOutcome;\n        form.typeOfPregnancy = data.typeOfPregnancy;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n    };\n\n    const rule = {\n        spermTooLowCount: { required },\n        typeOfPregnancy: { required },\n        fetalSacsUS: { required },\n        fetalheartsUS: { required },\n        chorionicity: { required },\n        electiveFetalReduction: { required }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: { required },\n        newbornDateBirth: { required },\n        babiesborn: { required }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: format(\n                new Date(form.newbornDateBirth),\n                DATE_FORMAT_STRING\n            ),\n            pregnancyLossDate: format(\n                new Date(form.pregnancyLossDate),\n                DATE_FORMAT_STRING\n            )\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: { required },\n        oocyteCryoPreserved: { required },\n        oocyteCryoMethod: { required },\n        spermOrigin: { required },\n        oocyteFreezeDate: { required }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: format(\n                new Date(form.oocyteCollectionDate),\n                DATE_FORMAT_STRING\n            ),\n            oocyteThawDate: format(\n                new Date(form.oocyteThawDate),\n                DATE_FORMAT_STRING\n            ),\n            oocyteFreezeDate: format(\n                new Date(form.oocyteFreezeDate),\n                DATE_FORMAT_STRING\n            ),\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate;\n        form.oocyteThawDate = data.oocyteThawDate;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.spermOrigin = data.spermOrigin;\n        form.ageSpermProvider = data.ageSpermProvider;\n        form.spermDonorID = data.spermDonorID;\n        form.spermDonorStatus = data.spermDonorStatus;\n        form.spermMotility = data.spermMotility;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.spermDonorBank = data.spermDonorBank;\n        form.spermSource = data.spermSource;\n        form.semenVolume = data.semenVolume;\n        form.spermCount = data.spermCount;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: null,\n        priorETsOwnOocytes: null,\n        priorETsDonorOocytes: null,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: null,\n        reasonsForMaleFactor: null\n    });\n\n    const rules = {\n        priorBirths: { required },\n        typeOfFunding: { required },\n        reasonsForMaleFactor: { required }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle;\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor;\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: null,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: null,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: null,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: null,\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: { required },\n        hightOfOocyteHight: { required },\n        weightOfOocyte: { required },\n        noOfDaysGonadotropins: { required },\n        totalDoseLH: { required },\n        ofFolliclesLs15mm: { required }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication = data.adjuvantMedication;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.totalDoseLH = data.totalDoseLH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.estradiolLevel = data.estradiolLevel;\n        form.progesterOneLevel = data.progesterOneLevel;\n        form.endometrialThicknessFreshCycle =\n            data.endometrialThicknessFreshCycle;\n        form.cycleCancelledBeforeRetrieval = data.cycleCancelledBeforeRetrieval;\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: null,\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null\n    });\n\n    const rules = {\n        embryoTransfer: { required },\n        reasonsNoET: { required },\n        preparationUterineLining: { required },\n        transferDate: { required },\n        dateETAdjusted: { required },\n        assistedZonaHatching: { required },\n        embryosTransferred: { required },\n        sourceTransferredEmbryos: { required },\n        transferInseminationMethod: { required },\n        preImplGeneticTesting: { required },\n        charTransferredEmbryo: { required },\n        sitePGTembryo: { required },\n        gestationalCarrierSurrogate: { required },\n        numberThaws: { required }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness;\n        form.transferDate = data.transferDate;\n        form.dateETAdjusted = data.dateETAdjusted;\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos;\n        form.transferInseminationMethod = data.transferInseminationMethod;\n        form.preImplGeneticTesting = data.preImplGeneticTesting;\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate;\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n    };\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    console.log(store.state.options);\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions\n    };\n}\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: null,\n        oocytesNotUsed: null,\n        reasonsForNoUse: null,\n        embryoStageFreezing: null,\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: { required },\n        oocytesNotUsed: { required },\n        reasonsForNoUse: { required },\n        embryoStageFreezing: { required },\n        inseminatedInjected: { required },\n        normalFertilization2PN: { required },\n        ofMII: { required },\n        utilizableEmbryos: { required },\n        embryosCryopreserved: { required },\n        reasonEmbryoCryopreservation: { required },\n        embryoFreshCryoMethod: { required }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateFreshEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                embryoFreezeDate1: form.embryoFreezeDate1\n                    ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate2: form.embryoFreezeDate2\n                    ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate3: form.embryoFreezeDate3\n                    ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                    : null,\n                embryoFreezeDate4: form.embryoFreezeDate4\n                    ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions\n    };\n}\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: { required },\n        embryoStageThawing: { required },\n        embryoFrozenCryoMethod: { required },\n        embryoThawDate: { required },\n        donatedEmbryoFromAnotherCouple: { required }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null\n    });\n\n    const rules = {\n        mediAdminisPriorCos: { required },\n        totalDoseRekovelleMcg: { required },\n        endoRecTestdPerformed: { required },\n        congenitalAnomalies: { required }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {});\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.otherMediPriorCosDesc = data.other_medi_prior_cos_desc;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            other_medi_prior_cos_desc: form.otherMediPriorCosDesc,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = reactive([\n        {\n            value: \"Spontaneous\",\n            label: \"Spontaneous\"\n        },\n        {\n            value: \"Induced\",\n            label: \"Induced\"\n        },\n        {\n            value: \"No Labour\",\n            label: \"No Labour\"\n        }\n    ]);\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = reactive([\n        \"Spontaneous Vaginal Birth\",\n        \"Assisted Vaginal\",\n        \"Induced or Spontaneous Labour Cesarean Section\",\n        \"No Labour - Cesarean Section\",\n        \"Unknown\"\n    ]);\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = reactive([\n        \"None\",\n        \"Brachial plexus injury\",\n        \"Caput succedaneum\",\n        \"Cephalohematoma\",\n        \"Clavicular fracture\",\n        \"Facial nerve injury\",\n        \"Fracture - other\",\n        \"Palsy - other\",\n        \"Birth injury - other\",\n        \"Unknown\"\n    ]);\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = reactive([\n        {\n            value: \"No Transfer\",\n            label: \"No Transfer\"\n        },\n        {\n            value: \"Discharged Home\",\n            label: \"Discharged Home\"\n        },\n        {\n            value: \"Transfer to other organization\",\n            label: \"Transfer to other organization\"\n        },\n        {\n            value: \"Transfer to ICU/CCU\",\n            label: \"Transfer to ICU/CCU\"\n        },\n        {\n            value: \"Transfer to other non-obstetrical unit same hospital\",\n            label: \"Transfer to other non-obstetrical unit same hospital\"\n        },\n        {\n            value: \"Maternal Death -Not related to Pregnancy or Birth\",\n            label: \"Maternal Death -Not related to Pregnancy or Birth\"\n        },\n        {\n            value: \"Maternal Death - Related to Pregnancy or Birth\",\n            label: \"Maternal Death - Related to Pregnancy or Birth\"\n        }\n    ]);\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n"],"sourceRoot":""}