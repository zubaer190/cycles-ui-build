{"version":3,"sources":["webpack:///./src/composable/users.js","webpack:///./src/composable/born.js","webpack:///./node_modules/core-js/modules/es.array.join.js"],"names":["useUserForm","type","store","useStore","buttonLabel","computed","FORM_TYPE","CREATE","EDIT","form","reactive","name","email","username","phone","password","passwordConfirm","role","active","security","rules","required","requiredIf","passwordDidnotMatch","v$","useVuelidate","submitted","ref","userRoleOptions","label","value","groupOptions","state","users","groups","usePermissionCheck","route","useRoute","permission","idx","user","permissions","findIndex","item","appKey","path","hasUpdatePermission","updatePermission","hasCreatePermission","hasDeletePermission","deletePermission","spermTooLowCountValidator","complications","helpers","withParams","length","includes","req","typeOfPregnancyValidator","embryoTransfer","fetalSacsUSValidator","param","typeOfPregnancy","parseInt","fetalheartsUSValidator","chorionicityValidator","fetalheartsUS","treatmentOutcomeValidator","cycleCancelled","useComplicationFormInit","toast","useToast","confirm","useConfirm","spermTooLowCount","treatmentOutcome","fetalSacsUS","chorionicity","electiveFetalReduction","loading","born","toRefs","fillForm","data","rule","validator","withMessage","dependentOn","_save","join","getters","dispatch","then","add","severity","summary","detail","life","catch","err","finally","save","$invalid","complicationOptions","options","treatmentOutcomeOptions","typeOfPregnancyOptions","chorionicityOptions","electiveFetalReductionOptions","newbornDateBirthValidator","pregnancyBirthOutcome","pregnancyLossDateValidator","babiesbornValidator","usePregnancyOutcomeForm","newbornDateBirth","pregnancyLossDate","babiesborn","gestationalWeeks","gestationalDays","format","Date","DATE_FORMAT_STRING","pregnancyBirthOutcomeOptions","isNumberOocytesCryoedIsGreaterThan0","oocyteCryoPreserved","spermOriginValidator","oocytesInseminatedInjected","spermSourceValidator","isIVForFETCycle","spermCountValidator","semenVolumeValidator","spermOrigin","spermSource","intersection","freshSpermOrigins","filter","useOocyteCollectionInit","oocyteCollectionDate","oocyteThawDate","collectionDateUnknown","oocyteFreezeID1Thawed","oocyteFreezeID2Thawed","retrievedOrThawed","oocyteFreezeID","donorProviderIDCode","donorProviderSource","oocyteFreezeDate","oocyteOrigin","donorProviderstatus","oocyteCryoMethod","ageSpermProvider","spermDonorID","spermDonorStatus","spermMotility","spermDonorBank","semenVolume","spermCount","spermCollection","oocyteCollections","artCycle","selectedCycle","cycleType","TIME_0","oocytesCryopreserved","oocyteOriginOptions","donorProviderStatusOptions","oocyteCryoMethodOptions","spermOriginOptions","spermOriginStatusOptions","spermSourceOptions","mustBe0IfPriorPregnancies0","priorPregnancies","requiredIfprovincialFundingIsYes","provincialFundingForThisCycle","requiredIfReasonsForTreatmentCycleIsMaleFactor","reasonsForTreatmentCycle","provincialFundingValidator","cycleDate","reasonsForTreatmentCycleValidtor","useObstetricalHistoryFormInit","priorBirths","priorFreshCyclesStarted","priorETsOwnOocytes","priorETsDonorOocytes","typeOfFunding","otherSpecify","originOfSimulatedCycle","primaryCycle","reasonsForMaleFactor","pgtAPlanned","priorPregnanciesOptions","priorBirthsOptions","priorFreshCyclesStartedOptions","priorETsOwnOocytesOptions","priorETsDonorOocytesOptions","typeOfFundingOptions","reasonsForMaleFactorOptions","reasonsForTreatmentCycleOptions","requiredIfMedicationForCOSContains","medicationForCOS","totalDoseFSHValidator","FSH_VALIDATORS_MEDICATION_FOR_COS","totalDoseLHValidator","parseFloat","afcOocyteValidtor","reasonForTreatmentCycle","amhLevelOocyteValidtor","mediAdminisPriorCosValidator","cycle","totalDoseRekovelleMcgValidator","FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS","progesterOneLevelValidator","reasonCancelledValidator","reasonCancelledDescValidator","useOvariannFormInit","ageOfOocyteAge","hightOfOocyteHight","weightOfOocyte","bmiOfOocyte","fshDayOocyte","afcOocyte","ngPMOOocyte","typeOfStimulationProtocol","TYPE_OF_STIMULATION_PROTOCOL_DEFAULT","otherTypeOfStiProtocolDes","otherMedicationCOS","adjuvantMedication","ADJUVANT_MEDICATION_DEFAULTS","otherAdjuvantMediDescription","triggerMedication","TRIGGER_MEDICATION_DEFAULTS","otheTriMedDesc","noOfDaysGonadotropins","totalDoseFSH","totalDoseLH","ofFolliclesLs15mm","ofFolliclesGt15mm","estradiolLevel","progesterOneLevel","endometrialThicknessFreshCycle","cycleCancelledBeforeRetrieval","reasonCancelled","otherReasonCanDesc","amhLevelOocyte","cycleStopped","totalDoseRekovelleMcg","mediAdminisPriorCos","otherMediPriorCosDesc","minValue","maxValue","patient","age","cycleStoppped","typeOfStimulationProtocolOptions","triggerMedicationOptions","medicationForCOSOptions","medicationAdministraionPriorToCosOptions","medicationAdministraionPriorToCos","reasonCancelledOptions","adjuvantMedicationOptions","embryoTransferValidator","cancel","cyccleType","isEbryoTrasferNo","isEbryoTrasferYes","preparationUterineLiningValidator","embryosTransferredValidator","sourceTransferredEmbryosValidator","transferInseminationMethodValidator","noOfEmbryosTransferred","sourceTransferredEmbryos","cycleStartDate","freshSourceTransferredEmbryosIds","elem","CYCLE_START_DATE_JAN_19","preImplGeneticTestingValidator","sitePGTembryoValidator","charTransferredEmbryoValidator","preImplementationGeneticSergery","numberThawsValidator","frozenEmbryosIds","endometrialThicknessValidtor","useBornEmbryoTransferInit","reasonsNoET","preparationUterineLining","endometrialThickness","transferDate","dateETAdjusted","dayET","ultrasoundGuidedET","assistedZonaHatching","embryosTransferred","electiveTransfeESET","transferInseminationMethod","preImplGeneticTesting","charTransferredEmbryo","numberThaws","sitePGTembryo","gestationalCarrierSurrogate","gestationalCarrierSurrogateChart","heightRecipient","weightRecipient","recipientBMI","endometrialReceptivityTest","reasonsNoETOptions","preparationUterineLiningOptions","assistedZonaHatchingOptions","sourceTransferredEmbryosOptions","transferInseminationMethodOptions","charTransferredEmbryoOptions","numberThawsOptions","sitePGTembryoOptions","inseminationMethodValidator","noOfOocytesRetrieved","oocytesNotUsedValidator","oocytesRetrieved","inseminatedInjected","reasonsForNoUseValidator","oocytesNotUsed","embryoStageFreezingValidator","embryosCryopreserved","normalFertilization2PNValidator","noOocytesInseminatedInjected","ofMIIValidator","utilizableEmbryosValidator","embryosCryopreservedValidator","reasonEmbryoCryopreservationValidator","embryoFreshCryoMethodValidator","embryoFreezeDate1Validator","useBornFreshEmbryoInit","inseminationMethod","reasonsForNoUse","embryoStageFreezing","embryoFreezeID1","embryoFreezeID2","embryoFreezeID3","embryoFreezeID4","normalFertilization2PN","embryoFreezeDate1","embryoFreezeDate2","embryoFreezeDate3","embryoFreezeDate4","ofMII","utilizableEmbryos","reasonEmbryoCryopreservation","embryoFreshCryoMethod","payload","inseminationMethodOptions","reasonsForNoUseOptions","embryoStageFreezingOptions","reasonEmbryoCryopreservationOptions","embryoFreshCryoMethodOptions","isFETCycleValidator","useBronFrozenEmbyoInit","embryoFreezeID1Thawed","embryoFreezeID2Thawed","embryoFreezeID3Thawed","embryoFreezeID4Thawed","embryosThawed","utilizableAfterThaw","embryoStageThawing","embryoFrozenCryoMethod","embryoThawDate","donatedEmbryoFromAnotherCouple","embryoStageThawingOptions","embryoFrozenCryoMethodOptions","congenitalAnomaliesValidator","noOfBabiesBorn","useBornExtraFormInit","patientNotes","bornConsentFlag","pgtAIsPlanned","patientHistoryNotes","stimulationNotes","spermCollectionNotes","embryologyNotes","endoRecTestdPerformed","recTestBiopsyResult","transferNotes","pregnancyOutcomeNotes","estimatedDateOfBirth","gestationalAge","complicationsOfPregnancy","maternalHealthConditions","diabetesAndPregnancy","hypertensionDisorder","typeOfLabour","augmentation","methodsOfInduction","typeOfDelivery","allIndicationsOfLabour","cervicalRipening","allIndicationsCaesarean","labourBirthComplications","maternalOutcome","birthWeight","congenitalAnomalies","neonatalDeath","apgar1","apgar5","apgar10","neonatalBirthComplications","admissionToNicu","notesOnBirthOutcome","liveBornFetus","sexFetus","medicationForCOSContainFSHOrLhOrFshPlusLH","getBornExtra","patientId","id","cycleId","$validate","patient_notes","born_consent_flag","pgt_a_is_planned","patient_history_notes","medi_adminis_prior_cos","total_dose_rekovelle_mcg","stimulation_notes","sperm_collection_notes","embryology_notes","endo_rec_testd_performed","rec_test_biopsy_result","transfer_notes","pregnancy_outcome_notes","estimated_date_of_birth","gestational_age","complications_of_pregnancy","maternal_health_conditions","diabetes_and_pregnancy","hypertension_disorder","type_of_labour","methods_of_induction","type_of_delivery","all_indications_of_labour","cervical_ripening","all_indications_caesarean","labour_birth_complications","maternal_outcome","birth_weight","congenital_anomalies","neonatal_death","apgar_1","apgar_5","apgar_10","neonatal_birth_complications","admission_to_nicu","notes_on_birth_outcome","live_born_fetus","sex_fetus","preExistingMentalHealthCondition","useBornFieldOptions","complicationsOfPregnancyOptions","metarnalHealthConditionOptions","diabetesAndPregnancyOptions","hypertensionDisorderOptions","typeOfLabourOptions","augmentationOptions","methodsOfInductionOptions","typeOfDeliveryOptions","cervicalRipeningOptions","apgarOptions","neonatalBirthComplicationsOptions","newbornComplications","indicationLabourOptions","indicationCaesareanOptions","labourBirthComplicationsOptions","maternalOutcomeOptions","medicationAdministraionPriorCOS","$","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","Object","STRICT_METHOD","target","proto","forced","separator","call","this","undefined"],"mappings":"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","file":"js/chunk-e953369c.00307e2e.js","sourcesContent":["import { computed, reactive, ref } from \"vue\";\nimport { email, required, requiredIf, sameAs } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { FORM_TYPE, USER_ROLE } from \"@/config\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\n\nexport function useUserForm(type) {\n    const store = useStore();\n    const buttonLabel = computed(() => {\n        if (type === FORM_TYPE.CREATE) {\n            return \"Save\";\n        }\n        if (type === FORM_TYPE.EDIT) {\n            return \"Save\";\n        }\n    });\n\n    const form = reactive({\n        name: null,\n        email: null,\n        username: null,\n        phone: null,\n        password: null,\n        passwordConfirm: null,\n        role: null,\n        active: true,\n        security: []\n    });\n\n    const rules = {\n        name: { required },\n        email: { required, email },\n        username: { required },\n        password: { required: requiredIf(() => type === FORM_TYPE.CREATE) },\n        passwordConfirm: {\n            required: requiredIf(() => type === FORM_TYPE.CREATE)\n        }\n    };\n\n    const passwordDidnotMatch = computed(\n        () => form.password !== form.passwordConfirm\n    );\n\n    const v$ = useVuelidate(rules, form);\n    const submitted = ref(false);\n\n    const userRoleOptions = [\n        { label: \"Yes\", value: \"2\" },\n        { label: \"No\", value: \"1\" }\n    ];\n\n    const groupOptions = computed(() => store.state.users.groups);\n\n    return {\n        store,\n        form,\n        v$,\n        submitted,\n        buttonLabel,\n        userRoleOptions,\n        passwordDidnotMatch,\n        groupOptions\n    };\n}\n\nexport function usePermissionCheck() {\n    const store = useStore();\n    const route = useRoute();\n\n    const permission = computed(() => {\n        const idx = store.state.user.permissions.findIndex(\n            (item) => `/${item.appKey}` === route.path\n        );\n        return store.state.user.permissions[idx];\n    });\n\n    const hasUpdatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasCreatePermission = computed(\n        () => permission.value.updatePermission\n    );\n\n    const hasDeletePermission = computed(\n        () => permission.value.deletePermission\n    );\n\n    return {\n        hasUpdatePermission,\n        hasCreatePermission,\n        hasDeletePermission\n    };\n}\n","import { DATE_FORMAT_STRING } from \"@/config\";\nimport format from \"date-fns/format\";\nimport { useConfirm } from \"primevue/useconfirm\";\nimport { useToast } from \"primevue/usetoast\";\nimport { computed, inject, reactive, ref, toRef, toRefs } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { required, helpers, minValue, maxValue } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport {\n    ADJUVANT_MEDICATION_DEFAULTS,\n    CYCLE_START_DATE_JAN_19,\n    FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS,\n    FSH_VALIDATORS_MEDICATION_FOR_COS,\n    RADIO_NO,\n    RADIO_YES,\n    TIME_0,\n    TRIGGER_MEDICATION_DEFAULTS,\n    TYPE_OF_STIMULATION_PROTOCOL_DEFAULT\n} from \"@/constants\";\n\nconst spermTooLowCountValidator = (complications) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (complications.value.length == 0) {\n            return true;\n        }\n\n        if (complications.value.includes(\"None\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst typeOfPregnancyValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"embryoTransfer\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return value === \"Not Pregnant\";\n        }\n\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst fetalSacsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == null ||\n            param.typeOfPregnancy == \"Biochemical\" ||\n            param.typeOfPregnancy == \"Not Pregnant\" ||\n            param.typeOfPregnancy == \"Unknown\"\n        ) {\n            return true;\n        }\n\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\" ||\n            param.typeOfPregnancy == \"Molar Pregnancy\"\n        ) {\n            return parseInt(value) > 0;\n        }\n\n        if (param.typeOfPregnancy == \"Ectopic\") {\n            return parseInt(value) >= 0;\n        }\n\n        return true;\n    });\n\nconst fetalheartsUSValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.typeOfPregnancy == \"Clinical Intrauterine\" ||\n            param.typeOfPregnancy == \"Heterotopic\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst chorionicityValidator = (typeOfPregnancy, fetalheartsUS) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            (typeOfPregnancy.value == \"Clinical Intrauterine\" ||\n                typeOfPregnancy.value == \"Heterotopic\") &&\n            parseInt(fetalheartsUS.value) >= 2\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst treatmentOutcomeValidator = (embryoTransfer, cycleCancelled) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\" || cycleCancelled.value == \"yes\") {\n            return value == \"Cycle not completed to transfer\" || value == null;\n        }\n\n        return true;\n    });\n\nexport function useComplicationFormInit() {\n    const toast = useToast();\n    const store = useStore();\n    const confirm = useConfirm();\n\n    const form = reactive({\n        complications: [],\n        spermTooLowCount: null,\n        treatmentOutcome: null,\n        typeOfPregnancy: null,\n        fetalSacsUS: null,\n        fetalheartsUS: null,\n        chorionicity: null,\n        electiveFetalReduction: null\n    });\n    const loading = ref(false);\n    const complications = computed(() => store.state.born.complications);\n\n    const { typeOfPregnancy, fetalheartsUS } = toRefs(form);\n\n    const fillForm = (data) => {\n        form.complications = data.complications ? data.complications : [];\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.treatmentOutcome = data.treatmentOutcome;\n        form.typeOfPregnancy = data.typeOfPregnancy;\n        form.fetalSacsUS = data.fetalSacsUS;\n        form.fetalheartsUS = data.fetalheartsUS;\n        form.chorionicity = data.chorionicity;\n        form.electiveFetalReduction = data.electiveFetalReduction;\n    };\n\n    const rule = {\n        complications: {\n            required\n        },\n        spermTooLowCount: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermTooLowCountValidator(computed(() => form.complications))\n            )\n        },\n        typeOfPregnancy: {\n            validator: helpers.withMessage(\n                \"Value Required if embryo transfer is yes & must be Not Pregnent if embryo transfer is no\",\n                typeOfPregnancyValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer)\n                )\n            )\n        },\n        fetalSacsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalSacsUSValidator(form)\n            )\n        },\n        fetalheartsUS: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                fetalheartsUSValidator(form)\n            )\n        },\n        chorionicity: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        electiveFetalReduction: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                chorionicityValidator(typeOfPregnancy, fetalheartsUS)\n            )\n        },\n        treatmentOutcome: {\n            validator: helpers.withMessage(\n                \"Value Must be Cycle not completed to transfer or null\",\n                treatmentOutcomeValidator(\n                    computed(() => store.state.born.dependentOn.embryoTransfer),\n                    computed(() => store.state.born.dependentOn.cycleCancelled)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rule, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            complications: form.complications.join(\",\"),\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateComplication\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fetalSacsUSWarning = ref();\n\n    const complicationOptions = computed(\n        () => store.state.options.complications\n    );\n    const treatmentOutcomeOptions = computed(\n        () => store.state.options.treatmentOutcome\n    );\n    const typeOfPregnancyOptions = computed(\n        () => store.state.options.typeOfPregnancy\n    );\n    const chorionicityOptions = computed(\n        () => store.state.options.chorionicity\n    );\n    const electiveFetalReductionOptions = computed(\n        () => store.state.options.electiveFetalReduction\n    );\n\n    return {\n        store,\n        form,\n        save,\n        v$,\n        complications,\n        fillForm,\n        loading,\n        confirm,\n        complicationOptions,\n        treatmentOutcomeOptions,\n        typeOfPregnancyOptions,\n        chorionicityOptions,\n        electiveFetalReductionOptions\n    };\n}\n\nconst newbornDateBirthValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst pregnancyLossDateValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050890\" ||\n            form.pregnancyBirthOutcome == \"1050900\" ||\n            form.pregnancyBirthOutcome == \"1050910\"\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst babiesbornValidator = (form) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            form.pregnancyBirthOutcome == \"1050880\" ||\n            form.pregnancyBirthOutcome == \"1050920\" ||\n            form.pregnancyBirthOutcome == \"1050930\" ||\n            form.pregnancyBirthOutcome == \"1050940\" ||\n            form.pregnancyBirthOutcome == \"1050950\"\n        ) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nexport function usePregnancyOutcomeForm() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        pregnancyBirthOutcome: null,\n        newbornDateBirth: null,\n        pregnancyLossDate: null,\n        babiesborn: null,\n        gestationalWeeks: null,\n        gestationalDays: null\n    });\n    const loading = ref(false);\n\n    const fillForm = (data) => {\n        form.pregnancyBirthOutcome = data.pregnancyBirthOutcome;\n        form.newbornDateBirth = data.newbornDateBirth;\n        form.pregnancyLossDate = data.pregnancyLossDate;\n        form.babiesborn = data.babiesborn;\n        form.gestationalWeeks = data.gestationalWeeks;\n        form.gestationalDays = data.gestationalDays;\n    };\n\n    const rules = {\n        pregnancyLossDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                pregnancyLossDateValidator(form)\n            )\n        },\n        newbornDateBirth: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                newbornDateBirthValidator(form)\n            )\n        },\n        babiesborn: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                babiesbornValidator(form)\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            newbornDateBirth: form.newbornDateBirth\n                ? format(new Date(form.newbornDateBirth), DATE_FORMAT_STRING)\n                : null,\n            pregnancyLossDate: form.pregnancyLossDate\n                ? format(new Date(form.pregnancyLossDate), DATE_FORMAT_STRING)\n                : null\n        };\n\n        store\n            .dispatch(\"born/updatePregnancyOutcome\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch((err) => {})\n            .finally(() => (loading.value = false));\n    };\n\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const pregnancyBirthOutcomeOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        pregnancyBirthOutcomeOptions,\n        loading,\n        fillForm,\n        save\n    };\n}\n\nconst isNumberOocytesCryoedIsGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.oocyteCryoPreserved) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermOriginValidator = (oocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermSourceValidator = (oocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"inserminatedInjected\" }, (value) => {\n        if (parseInt(oocytesInseminatedInjected.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isIVForFETCycle = (param) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        return true; // temp for now\n        if (param == \"IVF\" || param == \"FET\") {\n            return value != null;\n        }\n        return true;\n    });\n\nconst isOocyteRetrivedGreaterThan0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        // return true; // temp for now\n        if (parseInt(param.retrievedOrThawed) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst spermCountValidator = (spermTooLowCount) =>\n    helpers.withParams({ type: \"spermTooLowCond\" }, (value) => {\n        if (spermTooLowCount.value == \"N\") {\n            return value >= 1 && value <= 999;\n        }\n        return true;\n    });\n\nconst semenVolumeValidator = (spermOrigin, spermSource) =>\n    helpers.withParams({ type: \"semenValume\" }, (value) => {\n        let intersection = [];\n        let freshSpermOrigins = [\"SPM005\", \"SPM007\", \"SPM004\"];\n        intersection = spermOrigin.value.filter((item) =>\n            freshSpermOrigins.includes(item)\n        );\n\n        if (spermSource.value == \"SSRC001\" && intersection.length > 0) {\n            return helpers.req(value) && value >= 0.1 && value <= 15;\n        }\n\n        return true;\n    });\n\nexport function useOocyteCollectionInit() {\n    const toast = useToast();\n    const store = useStore();\n    const form = reactive({\n        oocyteCollectionDate: null,\n        oocyteThawDate: null,\n        collectionDateUnknown: null,\n        oocyteFreezeID1Thawed: null,\n        oocyteFreezeID2Thawed: null,\n        retrievedOrThawed: null,\n        oocyteCryoPreserved: null,\n        oocyteFreezeID: null,\n        donorProviderIDCode: null,\n        donorProviderSource: null,\n        oocyteFreezeDate: null,\n        oocyteOrigin: null,\n        donorProviderstatus: null,\n        oocyteCryoMethod: null,\n        spermOrigin: null,\n        ageSpermProvider: null,\n        spermDonorID: null,\n        spermDonorStatus: null,\n        spermMotility: null,\n        spermTooLowCount: null,\n        spermDonorBank: null,\n        spermSource: null,\n        semenVolume: null,\n        spermCount: null,\n        spermCollection: null\n    });\n    const oocyteCollections = computed(\n        () => store.state.born.oocyteCollections\n    );\n\n    const loading = ref(false);\n    const rules = {\n        oocyteCollectionDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isIVForFETCycle(store.state.artCycle.selectedCycle.cycleType)\n            )\n        },\n        oocyteCryoPreserved: { required },\n        oocyteCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermOrigin: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermOriginValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    )\n                )\n            )\n        },\n        spermSource: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                spermSourceValidator(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn\n                                .oocytesInseminatedInjected\n                    )\n                )\n            )\n        },\n        oocyteFreezeDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isNumberOocytesCryoedIsGreaterThan0(form)\n            )\n        },\n        spermCount: {\n            validator: helpers.withMessage(\n                \"Value must be between 1 to 999\",\n                spermCountValidator(computed(() => form.spermTooLowCount))\n            )\n        },\n        oocyteOrigin: { required },\n        retrievedOrThawed: { required },\n        semenVolume: {\n            validator: helpers.withMessage(\n                `Applicable if SpermOrigin = 'Fresh donor sperm',\n                'Fresh partner sperm' or 'Fresh own sperm'\n                and SpermSource = 'Semen'.\n                Range: 0.1 - 15 mL.`,\n                semenVolumeValidator(\n                    computed(() => form.spermOrigin),\n                    computed(() => form.spermSource)\n                )\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        loading.value = true;\n        const data = {\n            ...form,\n            oocyteCollectionDate: form.oocyteCollectionDate\n                ? format(\n                      new Date(form.oocyteCollectionDate),\n                      DATE_FORMAT_STRING\n                  )\n                : null,\n            oocyteThawDate: form.oocyteThawDate\n                ? format(new Date(form.oocyteThawDate), DATE_FORMAT_STRING)\n                : null,\n            oocyteFreezeDate: form.oocyteFreezeDate\n                ? format(new Date(form.oocyteFreezeDate), DATE_FORMAT_STRING)\n                : null,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n        };\n\n        store\n            .dispatch(\"born/updateOocyteCollection\", data)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n                // fillForm(store.state.born.oocyteCollections);\n            })\n            .finally(() => (loading.value = false));\n    };\n    const confirm = useConfirm();\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate + TIME_0)\n            : null;\n        form.oocyteThawDate = data.oocyteThawDate\n            ? new Date(data.oocyteThawDate + TIME_0)\n            : null;\n        form.collectionDateUnknown = data.collectionDateUnknown;\n        form.oocyteFreezeID1Thawed = data.oocyteFreezeID1Thawed;\n        form.oocyteFreezeID2Thawed = data.oocyteFreezeID2Thawed;\n        form.retrievedOrThawed = data.retrievedOrThawed;\n        form.oocyteFreezeID = data.oocyteFreezeID;\n        form.donorProviderIDCode = data.donorProviderIDCode;\n        form.donorProviderSource = data.donorProviderSource;\n        form.oocyteFreezeDate = data.oocyteFreezeDate;\n        form.oocyteOrigin = data.oocyteOrigin;\n        form.donorProviderstatus = data.donorProviderstatus;\n        form.oocyteCryoMethod = data.oocyteCryoMethod;\n        form.spermOrigin = data.spermOrigin;\n        form.ageSpermProvider = data.ageSpermProvider;\n        form.spermDonorID = data.spermDonorID;\n        form.spermDonorStatus = data.spermDonorStatus;\n        form.spermMotility = data.spermMotility;\n        form.spermTooLowCount = data.spermTooLowCount;\n        form.spermDonorBank = data.spermDonorBank;\n        form.spermSource = data.spermSource;\n        form.semenVolume = data.semenVolume;\n        form.spermCount = data.spermCount;\n        form.oocyteCryoPreserved = data.oocytesCryopreserved;\n    };\n\n    const oocyteOriginOptions = computed(\n        () => store.state.options.oocyteOrigin\n    );\n    const donorProviderStatusOptions = computed(\n        () => store.state.options.donorProviderstatus\n    );\n    const oocyteCryoMethodOptions = computed(\n        () => store.state.options.oocyteCryoMethod\n    );\n    const spermOriginOptions = computed(() => store.state.options.spermOrigin);\n    const spermOriginStatusOptions = computed(\n        () => store.state.options.spermDonorStatus\n    );\n    const spermSourceOptions = computed(() => store.state.options.spermSource);\n\n    return {\n        store,\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        oocyteCollections,\n        oocyteOriginOptions,\n        donorProviderStatusOptions,\n        oocyteCryoMethodOptions,\n        spermOriginOptions,\n        spermOriginStatusOptions,\n        spermSourceOptions\n    };\n}\n\nconst mustBe0IfPriorPregnancies0 = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (parseInt(param.priorPregnancies) != 0) return true;\n        else {\n            return value == 0;\n        }\n    });\n\nconst requiredIfprovincialFundingIsYes = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.provincialFundingForThisCycle == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst requiredIfReasonsForTreatmentCycleIsMaleFactor = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (param.reasonsForTreatmentCycle.includes(\"TCR004\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst provincialFundingValidator = (cycleDate) =>\n    helpers.withParams({ type: \"cycleDate\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(\"2019-01-01\")) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst reasonsForTreatmentCycleValidtor = (value) => {\n    return value.length > 0;\n};\n\nexport function useObstetricalHistoryFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        priorBirths: null,\n        priorPregnancies: null,\n        priorFreshCyclesStarted: null,\n        priorETsOwnOocytes: null,\n        priorETsDonorOocytes: null,\n        provincialFundingForThisCycle: null,\n        typeOfFunding: null,\n        otherSpecify: null,\n        originOfSimulatedCycle: null,\n        primaryCycle: null,\n        reasonsForTreatmentCycle: [],\n        reasonsForMaleFactor: [],\n        pgtAPlanned: null\n    });\n\n    const rules = {\n        priorBirths: {\n            validator: mustBe0IfPriorPregnancies0(form)\n        },\n        typeOfFunding: {\n            validator: requiredIfprovincialFundingIsYes(form)\n        },\n        reasonsForMaleFactor: {\n            validator: helpers.withMessage(\n                \"Required when Reason for treatment cycle is male\",\n                requiredIfReasonsForTreatmentCycleIsMaleFactor(form)\n            )\n        },\n        provincialFundingForThisCycle: {\n            validator: provincialFundingValidator(\n                computed(() => store.state.artCycle.selectedCycle.cycleDate)\n            )\n        },\n        reasonsForTreatmentCycle: {\n            validator: helpers.withMessage(\n                \"At least one value is requred\",\n                reasonsForTreatmentCycleValidtor\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateObstetricalHistory\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.priorBirths = data.priorBirths ? parseInt(data.priorBirths) : null;\n        form.priorPregnancies = data.priorPregnancies;\n        form.priorFreshCyclesStarted = data.priorFreshCyclesStarted;\n        form.priorETsOwnOocytes = data.priorETsOwnOocytes;\n        form.priorETsDonorOocytes = data.priorETsDonorOocytes;\n        form.provincialFundingForThisCycle = data.provincialFundingForThisCycle;\n        form.typeOfFunding = data.typeOfFunding;\n        form.otherSpecify = data.otherSpecify;\n        form.originOfSimulatedCycle = data.originOfSimulatedCycle;\n        form.primaryCycle = data.primaryCycle;\n        form.reasonsForTreatmentCycle = data.reasonsForTreatmentCycle\n            ? data.reasonsForTreatmentCycle\n            : [];\n        form.reasonsForMaleFactor = data.reasonsForMaleFactor\n            ? data.reasonsForMaleFactor\n            : [];\n        form.pgtAPlanned = data.pgtAPlanned ? data.pgtAPlanned : \"N\";\n    };\n\n    const priorPregnanciesOptions = computed(\n        () => store.state.options.pregnancyBirthOutcome\n    );\n    const priorBirthsOptions = ref([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const priorFreshCyclesStartedOptions = computed(\n        () => store.state.options.priorFreshCyclesStarted\n    );\n    const priorETsOwnOocytesOptions = computed(\n        () => store.state.options.priorETsOwnOocytes\n    );\n    const priorETsDonorOocytesOptions = computed(\n        () => store.state.options.priorETsDonorOocytes\n    );\n    const typeOfFundingOptions = computed(\n        () => store.state.options.typeOfFunding\n    );\n    const reasonsForMaleFactorOptions = computed(\n        () => store.state.options.reasonsForMaleFactor\n    );\n    const reasonsForTreatmentCycleOptions = computed(\n        () => store.state.options.reasonsForTreatmentCycle\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        save,\n        loading,\n        fillForm,\n        priorPregnanciesOptions,\n        priorBirthsOptions,\n        priorFreshCyclesStartedOptions,\n        priorETsOwnOocytesOptions,\n        priorETsDonorOocytesOptions,\n        typeOfFundingOptions,\n        reasonsForMaleFactorOptions,\n        reasonsForTreatmentCycleOptions\n    };\n}\n\nconst requiredIfMedicationForCOSContains = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            param.medicationForCOS.includes(4) ||\n            param.medicationForCOS.includes(5) ||\n            param.medicationForCOS.includes(6)\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseFSHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\", \"COSM017\", \"COSM018\"];\n        let intersection = [];\n        intersection = FSH_VALIDATORS_MEDICATION_FOR_COS.filter((item) =>\n            medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) >= 50 &&\n                parseInt(value) <= 30000\n            );\n        }\n\n        return true;\n    });\n\nconst totalDoseLHValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (medicationForCOS.value.includes(4)) {\n            return (\n                helpers.req(value) &&\n                parseFloat(value) >= 200 &&\n                parseFloat(value) <= 400\n            );\n        }\n\n        return true;\n    });\n\nconst afcOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst amhLevelOocyteValidtor = (reasonForTreatmentCycle) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (reasonForTreatmentCycle.value.includes(\"TCR003\")) {\n            return helpers.req(value) && value > 0 && value <= 50;\n        }\n\n        return true;\n    });\n\nconst mediAdminisPriorCosValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cycleType == \"FET\" ||\n            cycle.value.cycleType == \"FOIVF\"\n        ) {\n            return true;\n        }\n\n        if (new Date(cycle.value.cycleDate) > new Date(\"2022-01-01\")) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\n\nconst totalDoseRekovelleMcgValidator = (medicationForCOS) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        // const medicationForCosKeys = [\"COSM016\"];\n        let intersection = [];\n        intersection = FSH_REKOVELLE_VALIDATORS_MEDICATION_FOR_COS.filter(\n            (item) => medicationForCOS.value.includes(item)\n        );\n        if (intersection.length > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst progesterOneLevelValidator = (value) => {\n    if (value == null) return true;\n    else {\n        return value > 0 && value <= 100;\n    }\n};\n\nconst reasonCancelledValidator = (cycleCancelled) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        if (cycleCancelled.value == \"no\") {\n            return value.length == 0;\n        } else {\n            return value.length > 0;\n        }\n    });\n\nconst reasonCancelledDescValidator = (cycleCancelled) =>\n    helpers.withParams({ type: \"medicationForCOS\" }, (value) => {\n        return true;\n        if (cycleCancelled.value == \"no\") {\n            return value == \"\" || value == null;\n        } else {\n            return helpers.req(value);\n        }\n    });\n\nexport function useOvariannFormInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n\n    const form = reactive({\n        ageOfOocyteAge: null,\n        hightOfOocyteHight: null,\n        weightOfOocyte: null,\n        bmiOfOocyte: null,\n        fshDayOocyte: null,\n        afcOocyte: null,\n        ngPMOOocyte: null,\n        typeOfStimulationProtocol: TYPE_OF_STIMULATION_PROTOCOL_DEFAULT,\n        otherTypeOfStiProtocolDes: null,\n        medicationForCOS: null,\n        otherMedicationCOS: null,\n        adjuvantMedication: ADJUVANT_MEDICATION_DEFAULTS,\n        otherAdjuvantMediDescription: null,\n        triggerMedication: TRIGGER_MEDICATION_DEFAULTS,\n        otheTriMedDesc: null,\n        noOfDaysGonadotropins: null,\n        totalDoseFSH: null,\n        totalDoseLH: null,\n        ofFolliclesLs15mm: null,\n        ofFolliclesGt15mm: null,\n        estradiolLevel: null,\n        progesterOneLevel: null,\n        endometrialThicknessFreshCycle: null,\n        cycleCancelledBeforeRetrieval: \"no\",\n        reasonCancelled: null,\n        otherReasonCanDesc: null,\n        amhLevelOocyte: null,\n        cycleStopped: \"N\",\n        totalDoseRekovelleMcg: null,\n        mediAdminisPriorCos: null,\n        otherMediPriorCosDesc: null\n    });\n\n    const rules = {\n        ageOfOocyteAge: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        hightOfOocyteHight: {\n            minValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                minValue(90)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 90 and 240\",\n                maxValue(240)\n            )\n        },\n        weightOfOocyte: {\n            minValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                minValue(25)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 25 and 227\",\n                maxValue(227)\n            )\n        },\n        noOfDaysGonadotropins: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                requiredIfMedicationForCOSContains(form)\n            )\n        },\n        totalDoseFSH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 50 and 30000\",\n                totalDoseFSHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        totalDoseLH: {\n            validator: helpers.withMessage(\n                \"Value Must be between 200 and 400\",\n                totalDoseLHValidator(computed(() => form.medicationForCOS))\n            )\n        },\n        afcOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                afcOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        amhLevelOocyte: {\n            validator: helpers.withMessage(\n                \"Value Required & must be between 0 to 50\",\n                amhLevelOocyteValidtor(\n                    computed(\n                        () =>\n                            store.state.born.dependentOn.reasonForTreatmentCycle\n                    )\n                )\n            )\n        },\n        mediAdminisPriorCos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                mediAdminisPriorCosValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        totalDoseRekovelleMcg: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                totalDoseRekovelleMcgValidator(\n                    computed(() => form.medicationForCOS)\n                )\n            )\n        },\n        progesterOneLevel: {\n            validator: helpers.withMessage(\n                \"Value must be in range of 0 to 100 & value has to be multiplied by 3.18\",\n                progesterOneLevelValidator\n            )\n        },\n        estradiolLevel: {\n            minValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                minValue(0)\n            ),\n            maxValue: helpers.withMessage(\n                \"Value must be between 0 and 40000\",\n                maxValue(40000)\n            )\n        },\n        reasonCancelled: {\n            validator: helpers.withMessage(\n                \"Value must be empty if cycle cancelled is no\",\n                reasonCancelledValidator(\n                    computed(() => form.cycleCancelledBeforeRetrieval)\n                )\n            )\n        },\n        otherReasonCanDesc: {\n            validator: helpers.withMessage(\n                \"Value must be empty if cycle cancelled is no\",\n                reasonCancelledDescValidator(\n                    computed(() => form.cycleCancelledBeforeRetrieval)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n    const confirm = useConfirm();\n    const _save = () => {\n        loading.value = false;\n        store\n            .dispatch(\"born/updateOvarian\", {\n                ...form,\n                adjuvantMedication: form.adjuvantMedication.join(\",\"),\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"]\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.ageOfOocyteAge = data.ageOfOocyteAge\n            ? data.ageOfOocyteAge\n            : store.state.artCycle.patient.age;\n        form.adjuvantMedication =\n            data.adjuvantMedication.length > 0\n                ? data.adjuvantMedication\n                : ADJUVANT_MEDICATION_DEFAULTS;\n        form.hightOfOocyteHight = data.hightOfOocyteHight;\n        form.weightOfOocyte = data.weightOfOocyte;\n        form.bmiOfOocyte = data.bmiOfOocyte;\n        form.fshDayOocyte = data.fshDayOocyte;\n        form.afcOocyte = data.afcOocyte;\n        form.ngPMOOocyte = data.ngPMOOocyte;\n        form.typeOfStimulationProtocol = data.typeOfStimulationProtocol\n            ? data.typeOfStimulationProtocol\n            : TYPE_OF_STIMULATION_PROTOCOL_DEFAULT;\n        form.otherTypeOfStiProtocolDes = data.otherTypeOfStiProtocolDes;\n        form.medicationForCOS = data.medicationForCOS;\n        form.otherMedicationCOS = data.otherMedicationCOS;\n        form.otherAdjuvantMediDescription = data.otherAdjuvantMediDescription;\n        form.triggerMedication = data.triggerMedication\n            ? data.triggerMedication\n            : TRIGGER_MEDICATION_DEFAULTS;\n        form.otheTriMedDesc = data.otheTriMedDesc;\n        form.noOfDaysGonadotropins = data.noOfDaysGonadotropins;\n        form.totalDoseFSH = data.totalDoseFSH;\n        form.totalDoseLH = data.totalDoseLH;\n        form.ofFolliclesLs15mm = data.ofFolliclesLs15mm;\n        form.ofFolliclesGt15mm = data.ofFolliclesGt15mm;\n        form.estradiolLevel = data.estradiolLevel;\n        form.progesterOneLevel = data.progesterOneLevel;\n        form.endometrialThicknessFreshCycle =\n            data.endometrialThicknessFreshCycle;\n        form.cycleCancelledBeforeRetrieval =\n            data.cycleCancelledBeforeRetrieval == \"yes\" ? \"yes\" : \"no\";\n        form.reasonCancelled = data.reasonCancelled;\n        form.otherReasonCanDesc = data.otherReasonCanDesc;\n        form.amhLevelOocyte = data.amhLevelOocyte;\n        form.cycleStopped = data.cycleStoppped == \"Y\" ? \"Y\" : \"N\";\n        form.mediAdminisPriorCos = data.mediAdminisPriorCos;\n        form.totalDoseRekovelleMcg = data.totalDoseRekovelleMcg;\n        form.otherMediPriorCosDesc = data.otherMediPriorCosDesc;\n    };\n\n    const typeOfStimulationProtocolOptions = computed(\n        () => store.state.options.typeOfStimulationProtocol\n    );\n    const triggerMedicationOptions = computed(\n        () => store.state.options.triggerMedication\n    );\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationForCOS\n    );\n    const medicationAdministraionPriorToCosOptions = computed(\n        () => store.state.options.medicationAdministraionPriorToCos\n    );\n    const reasonCancelledOptions = computed(\n        () => store.state.options.reasonCancelled\n    );\n    const adjuvantMedicationOptions = computed(\n        () => store.state.options.adjuvantMedication\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        loading,\n        save,\n        fillForm,\n        typeOfStimulationProtocolOptions,\n        triggerMedicationOptions,\n        medicationForCOSOptions,\n        medicationAdministraionPriorToCosOptions,\n        reasonCancelledOptions,\n        adjuvantMedicationOptions\n    };\n}\n\nexport function useBornEmbryologyInit() {\n    const store = useStore();\n    const form = inject(\"form\");\n\n    const isIVFCycle = store.getters[\"artCycle/isIVFCycle\"];\n    const isFETCycle = store.getters[\"artCycle/isFETCycle\"];\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoTransferOptions = computed(\n        () => store.state.options.reasonsNoET\n    );\n\n    return {\n        form,\n        isIVFCycle,\n        isFETCycle,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions,\n        embryoStageThawingOptions,\n        embryoTransferOptions\n    };\n}\n\nconst embryoTransferValidator = (cycle) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            cycle.value.cancel == false ||\n            cycle.value.cyccleType == \"FET\" ||\n            cycle.value.cyccleType == \"FOIVF\"\n        ) {\n            return helpers.req(value);\n        }\n\n        return true;\n    });\nconst isEbryoTrasferNo = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"no\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst isEbryoTrasferYes = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preparationUterineLiningValidator = (cycleType) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (cycleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst transferDateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst dateETAdjustedValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst assistedZonaHatchingValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst embryosTransferredValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst sourceTransferredEmbryosValidator = (embryoTransfer) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst transferInseminationMethodValidator = (\n    noOfEmbryosTransferred,\n    sourceTransferredEmbryos,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const freshSourceTransferredEmbryosIds = [1, 2, 3, 4, 5, 6];\n        const intersection = freshSourceTransferredEmbryosIds.filter((elem) =>\n            [...sourceTransferredEmbryos.value].includes(elem)\n        );\n\n        if (\n            noOfEmbryosTransferred.value == 1 &&\n            intersection.length != 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst cycelStartDateGreateThanJan1st2019 = (cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst sitePGTembryoValidator = (embryoTransfer, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryoTransfer.value == \"yes\" &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst charTransferredEmbryoValidator = (\n    noOfEmbryosTransferred,\n    preImplementationGeneticSergery,\n    cycleDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            preImplementationGeneticSergery.value == \"yes\" &&\n            parseInt(noOfEmbryosTransferred.value) == 1 &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst preImplGeneticTestingYes = (preImplGeneticTesting) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (preImplGeneticTesting.value == \"yes\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst gestationalCarrierSurrogateValidator = (param) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true;\n    });\n\nconst numberThawsValidator = (sourceTransferredEmbryos, cycleDate) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        const frozenEmbryosIds = [7, 8, 9, 10, 11, 12, 13];\n\n        if (\n            frozenEmbryosIds.includes(sourceTransferredEmbryos.value) &&\n            new Date(cycleDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst endometrialThicknessValidtor = (cyccleType) =>\n    helpers.withParams({ type: \"cyccleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornEmbryoTransferInit() {\n    const store = useStore();\n    const toast = useToast();\n    const form = reactive({\n        embryoTransfer: null,\n        reasonsNoET: null,\n        preparationUterineLining: null,\n        endometrialThickness: null,\n        transferDate: null,\n        dateETAdjusted: null,\n        dayET: null,\n        ultrasoundGuidedET: null,\n        assistedZonaHatching: null,\n        embryosTransferred: null,\n        electiveTransfeESET: null,\n        sourceTransferredEmbryos: [],\n        transferInseminationMethod: null,\n        preImplGeneticTesting: null,\n        charTransferredEmbryo: null,\n        numberThaws: null,\n        sitePGTembryo: null,\n        gestationalCarrierSurrogate: null,\n        gestationalCarrierSurrogateChart: null,\n        heightRecipient: null,\n        weightRecipient: null,\n        recipientBMI: null,\n        endometrialReceptivityTest: null\n    });\n\n    const rules = {\n        embryoTransfer: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoTransferValidator(\n                    computed(() => store.state.artCycle.selectedCycle)\n                )\n            )\n        },\n        reasonsNoET: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferNo(computed(() => form.embryoTransfer))\n            )\n        },\n        preparationUterineLining: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                preparationUterineLiningValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        transferDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        dateETAdjusted: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        assistedZonaHatching: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        embryosTransferred: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryosTransferredValidator(computed(() => form.embryoTransfer))\n            )\n        },\n        sourceTransferredEmbryos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                sourceTransferredEmbryosValidator(\n                    computed(() => form.embryoTransfer)\n                )\n            )\n        },\n        transferInseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                transferInseminationMethodValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        preImplGeneticTesting: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                preImplGeneticTestingValidator(\n                    computed(() => form.embryoTransfer),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        charTransferredEmbryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                charTransferredEmbryoValidator(\n                    computed(() => form.embryosTransferred),\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        sitePGTembryo: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                sitePGTembryoValidator(\n                    computed(() => form.preImplGeneticTesting),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        gestationalCarrierSurrogate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isEbryoTrasferYes(computed(() => form.embryoTransfer))\n            )\n        },\n        numberThaws: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                numberThawsValidator(\n                    computed(() => form.sourceTransferredEmbryos),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        endometrialThickness: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                endometrialThicknessValidtor(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const fillForm = (data) => {\n        form.embryoTransfer = data.embryoTransfer;\n        form.reasonsNoET = data.reasonsNoET;\n        form.preparationUterineLining = data.preparationUterineLining;\n        form.endometrialThickness = data.endometrialThickness;\n        form.transferDate = data.transferDate\n            ? new Date(data.transferDate + \" 00:00:00\")\n            : null;\n        form.dateETAdjusted = data.dateETAdjusted;\n        form.dayET = data.dayET;\n        form.ultrasoundGuidedET = data.ultrasoundGuidedET;\n        form.assistedZonaHatching = data.assistedZonaHatching;\n        form.embryosTransferred = data.embryosTransferred;\n        form.electiveTransfeESET = data.electiveTransfeESET;\n        form.sourceTransferredEmbryos = data.sourceTransferredEmbryos\n            ? data.sourceTransferredEmbryos\n            : [];\n        form.transferInseminationMethod = data.transferInseminationMethod;\n        form.preImplGeneticTesting = data.preImplGeneticTesting;\n        form.charTransferredEmbryo = data.charTransferredEmbryo;\n        form.numberThaws = data.numberThaws;\n        form.sitePGTembryo = data.sitePGTembryo;\n        form.gestationalCarrierSurrogate = data.gestationalCarrierSurrogate;\n        form.gestationalCarrierSurrogateChart =\n            data.gestationalCarrierSurrogateChart;\n        form.heightRecipient = data.heightRecipient;\n        form.weightRecipient = data.weightRecipient;\n        form.recipientBMI = data.recipientBMI;\n        form.endometrialReceptivityTest = data.endometrialReceptivityTest;\n    };\n\n    const _save = () => {\n        store\n            .dispatch(\"born/updateEmbryoTransfer\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                transferDate: form.transferDate\n                    ? format(new Date(form.transferDate), DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const reasonsNoETOptions = computed(() => store.state.options.reasonsNoET);\n    const preparationUterineLiningOptions = computed(\n        () => store.state.options.preparationUterineLining\n    );\n    const assistedZonaHatchingOptions = computed(\n        () => store.state.options.assistedZonaHatching\n    );\n    const sourceTransferredEmbryosOptions = computed(\n        () => store.state.options.sourceTransferredEmbryos\n    );\n    const transferInseminationMethodOptions = computed(\n        () => store.state.options.transferInseminationMethod\n    );\n    const charTransferredEmbryoOptions = computed(\n        () => store.state.options.charTransferredEmbryo\n    );\n    const numberThawsOptions = computed(() => store.state.options.numberThaws);\n    const sitePGTembryoOptions = computed(\n        () => store.state.options.sitePGTembryo\n    );\n\n    return {\n        store,\n        form,\n        v$,\n        fillForm,\n        save,\n        reasonsNoETOptions,\n        preparationUterineLiningOptions,\n        assistedZonaHatchingOptions,\n        sourceTransferredEmbryosOptions,\n        transferInseminationMethodOptions,\n        charTransferredEmbryoOptions,\n        numberThawsOptions,\n        sitePGTembryoOptions\n    };\n}\n\nconst inseminationMethodValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOfOocytesRetrieved.value > 0) {\n            return parseInt(value) > 0;\n        }\n        return true;\n    });\n\nconst oocytesNotUsedValidator = (\n    oocytesRetrieved,\n    inseminatedInjected,\n    oocytesCryopreserved\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return (\n            helpers.req(value) &&\n            parseInt(value) ==\n                oocytesRetrieved.value -\n                    inseminatedInjected.value -\n                    oocytesCryopreserved.value\n        );\n    });\nconst reasonsForNoUseValidator = (oocytesNotUsed) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (oocytesNotUsed.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst embryoStageFreezingValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return value.length > 0;\n        }\n        return true;\n    });\nconst inseminatedInjectedValidator = (noOfOocytesRetrieved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        return true; // temp for now\n        if (noOfOocytesRetrieved.value > 0) {\n            return (\n                value.length > 0 &&\n                parseInt(value) <= noOfOocytesRetrieved.value\n            );\n        }\n        return true;\n    });\nconst normalFertilization2PNValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst ofMIIValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst utilizableEmbryosValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return (\n                helpers.req(value) &&\n                parseInt(value) <= noOocytesInseminatedInjected.value\n            );\n        }\n        return true;\n    });\nconst embryosCryopreservedValidator = (noOocytesInseminatedInjected) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (noOocytesInseminatedInjected.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\nconst reasonEmbryoCryopreservationValidator = (\n    embryosCryopreserved,\n    cycleStartDate\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (\n            embryosCryopreserved.value > 0 &&\n            new Date(cycleStartDate.value) > new Date(CYCLE_START_DATE_JAN_19)\n        ) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst embryoFreshCryoMethodValidator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nconst embryoFreezeDate1Validator = (embryosCryopreserved) =>\n    helpers.withParams({ type: \"embryosCryopreserved\" }, (value) => {\n        if (embryosCryopreserved.value > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornFreshEmbryoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        inseminationMethod: null,\n        oocytesNotUsed: null,\n        reasonsForNoUse: null,\n        embryoStageFreezing: null,\n        inseminatedInjected: null,\n        embryoFreezeID1: null,\n        embryoFreezeID2: null,\n        embryoFreezeID3: null,\n        embryoFreezeID4: null,\n        normalFertilization2PN: null,\n        embryoFreezeDate1: null,\n        embryoFreezeDate2: null,\n        embryoFreezeDate3: null,\n        embryoFreezeDate4: null,\n        ofMII: null,\n        utilizableEmbryos: null,\n        embryosCryopreserved: null,\n        reasonEmbryoCryopreservation: null,\n        embryoFreshCryoMethod: null\n    });\n\n    const rules = {\n        inseminationMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                inseminationMethodValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    )\n                )\n            )\n        },\n        oocytesNotUsed: {\n            validator: helpers.withMessage(\n                \"Value must be equal to oocytesRetrieved - inseminatedInjected - oocytesCryopreserved\",\n                oocytesNotUsedValidator(\n                    computed(\n                        () => store.state.born.dependentOn.oocytesRetrieved\n                    ),\n                    computed(() => form.inseminatedInjected),\n                    computed(\n                        () => store.state.born.dependentOn.oocytesCryopreserved\n                    )\n                )\n            )\n        },\n        reasonsForNoUse: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonsForNoUseValidator(computed(() => form.oocytesNotUsed))\n            )\n        },\n        embryoStageFreezing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoStageFreezingValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        inseminatedInjected: {\n            validator: helpers.withMessage(\"Value Required\", required)\n        },\n        normalFertilization2PN: {\n            validator: helpers.withMessage(\n                \"Value Required and must be less or equal to oocytes inseminated/injected\",\n                normalFertilization2PNValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        ofMII: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                ofMIIValidator(computed(() => form.inseminatedInjected))\n            )\n        },\n        utilizableEmbryos: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                utilizableEmbryosValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        embryosCryopreserved: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryosCryopreservedValidator(\n                    computed(() => form.inseminatedInjected)\n                )\n            )\n        },\n        reasonEmbryoCryopreservation: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                reasonEmbryoCryopreservationValidator(\n                    computed(() => form.embryosCryopreserved),\n                    computed(() => store.state.artCycle.selectedCycle.cycleDate)\n                )\n            )\n        },\n        embryoFreshCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreshCryoMethodValidator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        },\n        embryoFreezeDate1: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                embryoFreezeDate1Validator(\n                    computed(() => form.embryosCryopreserved)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const _save = () => {\n        let payload = {\n            ...form,\n            ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n            embryoFreezeDate1: form.embryoFreezeDate1\n                ? format(form.embryoFreezeDate1, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate2: form.embryoFreezeDate2\n                ? format(form.embryoFreezeDate2, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate3: form.embryoFreezeDate3\n                ? format(form.embryoFreezeDate3, DATE_FORMAT_STRING)\n                : null,\n            embryoFreezeDate4: form.embryoFreezeDate4\n                ? format(form.embryoFreezeDate4, DATE_FORMAT_STRING)\n                : null\n        };\n\n        // return;\n\n        store.dispatch(\"born/updateFreshEmbryo\", payload).then(() => {\n            toast.add({\n                severity: \"success\",\n                summary: \"\",\n                detail: \"Save Successful\",\n                life: 3000\n            });\n        });\n    };\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const fillForm = (data) => {\n        form.inseminationMethod = data.inseminationMethod;\n        form.oocytesNotUsed = data.oocytesNotUsed;\n        form.reasonsForNoUse = data.reasonsForNoUse;\n        form.embryoStageFreezing = data.embryoStageFreezing;\n        form.inseminatedInjected = data.inseminatedInjected;\n        form.embryoFreezeID1 = data.embryoFreezeID1;\n        form.embryoFreezeID2 = data.embryoFreezeID2;\n        form.embryoFreezeID3 = data.embryoFreezeID3;\n        form.embryoFreezeID4 = data.embryoFreezeID4;\n        form.normalFertilization2PN = data.normalFertilization2PN;\n        form.embryoFreezeDate1 = data.embryoFreezeDate1\n            ? new Date(data.embryoFreezeDate1 + TIME_0)\n            : null;\n        form.embryoFreezeDate2 = data.embryoFreezeDate2\n            ? new Date(data.embryoFreezeDate2 + TIME_0)\n            : null;\n        form.embryoFreezeDate3 = data.embryoFreezeDate3\n            ? new Date(data.embryoFreezeDate3 + TIME_0)\n            : null;\n        form.embryoFreezeDate4 = data.embryoFreezeDate4\n            ? new Date(data.embryoFreezeDate4 + TIME_0)\n            : null;\n        form.ofMII = data.ofMII;\n        form.utilizableEmbryos = data.utilizableEmbryos;\n        form.embryosCryopreserved = data.embryosCryopreserved;\n        form.reasonEmbryoCryopreservation = data.reasonEmbryoCryopreservation;\n        form.embryoFreshCryoMethod = data.embryoFreshCryoMethod;\n    };\n\n    const inseminationMethodOptions = computed(\n        () => store.state.options.inseminationMethod\n    );\n    const reasonsForNoUseOptions = computed(\n        () => store.state.options.reasonsForNoUse\n    );\n    const embryoStageFreezingOptions = computed(\n        () => store.state.options.embryoStageFreezing\n    );\n    const reasonEmbryoCryopreservationOptions = computed(\n        () => store.state.options.reasonEmbryoCryopreservation\n    );\n    const embryoFreshCryoMethodOptions = computed(\n        () => store.state.options.embryoFreshCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        fillForm,\n        save,\n        inseminationMethodOptions,\n        reasonsForNoUseOptions,\n        embryoStageFreezingOptions,\n        reasonEmbryoCryopreservationOptions,\n        embryoFreshCryoMethodOptions\n    };\n}\n\nconst isFETCycleValidator = (cyccleType) =>\n    helpers.withParams({ type: \"cycleType\" }, (value) => {\n        if (cyccleType.value == \"FET\") {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBronFrozenEmbyoInit() {\n    const store = useStore();\n    const toast = useToast();\n    const loading = ref(false);\n    const form = reactive({\n        oocyteCollectionDate: null,\n        embryoFreezeID1Thawed: null,\n        embryoFreezeID2Thawed: null,\n        embryoFreezeID3Thawed: null,\n        embryoFreezeID4Thawed: null,\n        embryosThawed: null,\n        utilizableAfterThaw: null,\n        embryoStageThawing: null,\n        embryoFrozenCryoMethod: null,\n        embryoThawDate: null,\n        donatedEmbryoFromAnotherCouple: null\n    });\n\n    const rules = {\n        utilizableAfterThaw: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoStageThawing: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoFrozenCryoMethod: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        embryoThawDate: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        },\n        donatedEmbryoFromAnotherCouple: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                isFETCycleValidator(\n                    computed(() => store.state.artCycle.selectedCycle.cycleType)\n                )\n            )\n        }\n    };\n    const v$ = useVuelidate(rules, form);\n\n    const confirm = useConfirm();\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    const _save = () => {\n        loading.value = true;\n        store\n            .dispatch(\"born/updateFrozenEmbryo\", {\n                ...form,\n                ...store.getters[\"artCycle/getSelectedCycleAndPatientId\"],\n                oocyteCollectionDate: form.oocyteCollectionDate\n                    ? format(form.oocyteCollectionDate, DATE_FORMAT_STRING)\n                    : null,\n                embryoThawDate: form.embryoThawDate\n                    ? format(form.embryoThawDate, DATE_FORMAT_STRING)\n                    : null\n            })\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const fillForm = (data) => {\n        form.oocyteCollectionDate = data.oocyteCollectionDate\n            ? new Date(data.oocyteCollectionDate)\n            : null;\n        form.embryoFreezeID1Thawed = data.embryoFreezeID1Thawed;\n        form.embryoFreezeID2Thawed = data.embryoFreezeID2Thawed;\n        form.embryoFreezeID3Thawed = data.embryoFreezeID3Thawed;\n        form.embryoFreezeID4Thawed = data.embryoFreezeID4Thawed;\n        form.embryosThawed = data.embryosThawed;\n        form.utilizableAfterThaw = data.utilizableAfterThaw;\n        form.embryoStageThawing = data.embryoStageThawing;\n        form.embryoFrozenCryoMethod = data.embryoFrozenCryoMethod;\n        form.embryoThawDate = data.embryoThawDate\n            ? new Date(data.embryoThawDate)\n            : null;\n        form.donatedEmbryoFromAnotherCouple =\n            data.donatedEmbryoFromAnotherCouple;\n    };\n\n    const embryoStageThawingOptions = computed(\n        () => store.state.options.embryoStageThawing\n    );\n    const embryoFrozenCryoMethodOptions = computed(\n        () => store.state.options.embryoFrozenCryoMethod\n    );\n\n    return {\n        store,\n        loading,\n        form,\n        v$,\n        save,\n        fillForm,\n        embryoStageThawingOptions,\n        embryoFrozenCryoMethodOptions\n    };\n}\n\nconst requiredIfCycleGreaterthan22JanAndEmbryoTransferIsYes = (\n    cycleDate,\n    embryoTransfer\n) =>\n    helpers.withParams({ type: \"form\" }, (value) => {\n        if (embryoTransfer != null && embryoTransfer.embryoTransfer != \"yes\") {\n            return true;\n        }\n\n        if (new Date(cycleDate) > new Date(\"2022-01-01\")) {\n            return value.length > 0;\n        }\n        return true;\n    });\n\nconst congenitalAnomaliesValidator = (noOfBabiesBorn) =>\n    helpers.withParams({ type: \"noOfBabiesBorn\" }, (value) => {\n        if (parseInt(noOfBabiesBorn.value) > 0) {\n            return helpers.req(value);\n        }\n        return true;\n    });\n\nexport function useBornExtraFormInit() {\n    const store = useStore();\n\n    const form = reactive({\n        patientNotes: null,\n        bornConsentFlag: null,\n        pgtAIsPlanned: null,\n        patientHistoryNotes: null,\n        mediAdminisPriorCos: [],\n        otherMediPriorCosDesc: null,\n        totalDoseRekovelleMcg: null,\n        stimulationNotes: null,\n        spermCollectionNotes: null,\n        embryologyNotes: null,\n        endoRecTestdPerformed: null,\n        recTestBiopsyResult: null,\n        transferNotes: null,\n        pregnancyOutcomeNotes: null,\n        estimatedDateOfBirth: null,\n        gestationalAge: null,\n        complicationsOfPregnancy: [],\n        maternalHealthConditions: [],\n        diabetesAndPregnancy: null,\n        hypertensionDisorder: null,\n        typeOfLabour: null,\n        augmentation: [],\n        methodsOfInduction: [],\n        typeOfDelivery: null,\n        allIndicationsOfLabour: null,\n        cervicalRipening: [],\n        allIndicationsCaesarean: null,\n        labourBirthComplications: [],\n        maternalOutcome: null,\n        birthWeight: null,\n        congenitalAnomalies: null,\n        neonatalDeath: null,\n        apgar1: null,\n        apgar5: null,\n        apgar10: null,\n        neonatalBirthComplications: null,\n        admissionToNicu: null,\n        notesOnBirthOutcome: null,\n        liveBornFetus: null,\n        sexFetus: null\n    });\n\n    const medicationForCOSContainFSHOrLhOrFshPlusLH = ref(false);\n    const medicationForCOS = ref();\n\n    const rules = {\n        congenitalAnomalies: {\n            validator: helpers.withMessage(\n                \"Value Required\",\n                congenitalAnomaliesValidator(\n                    computed(() => store.state.born.dependentOn.noOfBabiesBorn)\n                )\n            )\n        }\n    };\n\n    const v$ = useVuelidate(rules, form);\n\n    const getBornExtra = () => {\n        store\n            .dispatch(\"born/getBornExtra\", {\n                patientId: store.state.artCycle.patient.id,\n                cycleId: store.state.artCycle.selectedCycle.cycleId\n            })\n            .then((data) => {\n                fillForm(data);\n            })\n            .catch(() => {})\n            .finally(() => {\n                v$.value.$validate();\n            });\n    };\n\n    const fillForm = (data) => {\n        form.patientNotes = data.patient_notes;\n        form.bornConsentFlag = data.born_consent_flag;\n        form.pgtAIsPlanned = data.pgt_a_is_planned;\n        form.patientHistoryNotes = data.patient_history_notes;\n        form.mediAdminisPriorCos = data.medi_adminis_prior_cos;\n        form.totalDoseRekovelleMcg = data.total_dose_rekovelle_mcg;\n        form.stimulationNotes = data.stimulation_notes;\n        form.spermCollectionNotes = data.sperm_collection_notes;\n        form.embryologyNotes = data.embryology_notes;\n        form.endoRecTestdPerformed = data.endo_rec_testd_performed;\n        form.recTestBiopsyResult = data.rec_test_biopsy_result;\n        form.transferNotes = data.transfer_notes;\n        form.pregnancyOutcomeNotes = data.pregnancy_outcome_notes;\n        form.estimatedDateOfBirth = data.estimated_date_of_birth\n            ? new Date(data.estimated_date_of_birth)\n            : null;\n        form.gestationalAge = data.gestational_age;\n        form.complicationsOfPregnancy = data.complications_of_pregnancy;\n        form.maternalHealthConditions = data.maternal_health_conditions;\n        form.diabetesAndPregnancy = data.diabetes_and_pregnancy;\n        form.hypertensionDisorder = data.hypertension_disorder;\n        form.typeOfLabour = data.type_of_labour;\n        form.augmentation = data.augmentation;\n        form.methodsOfInduction = data.methods_of_induction;\n        form.typeOfDelivery = data.type_of_delivery;\n        form.allIndicationsOfLabour = data.all_indications_of_labour;\n        form.cervicalRipening = data.cervical_ripening;\n        form.allIndicationsCaesarean = data.all_indications_caesarean;\n        form.labourBirthComplications = data.labour_birth_complications;\n        form.maternalOutcome = data.maternal_outcome;\n        form.birthWeight = data.birth_weight;\n        form.congenitalAnomalies = data.congenital_anomalies;\n        form.neonatalDeath = data.neonatal_death;\n        form.apgar1 = data.apgar_1;\n        form.apgar5 = data.apgar_5;\n        form.apgar10 = data.apgar_10;\n        form.neonatalBirthComplications = data.neonatal_birth_complications;\n        form.admissionToNicu = data.admission_to_nicu;\n        form.notesOnBirthOutcome = data.notes_on_birth_outcome;\n        form.liveBornFetus = data.live_born_fetus; // todo after service\n        form.sexFetus = data.sex_fetus; // todo after service\n    };\n\n    const loading = ref(false);\n    const toast = useToast();\n    const _save = () => {\n        loading.value = true;\n        let payload = {\n            patientId: store.state.artCycle.patient.id,\n            cycleId: store.state.artCycle.selectedCycle.cycleId,\n            patient_notes: form.patientNotes,\n            born_consent_flag: form.bornConsentFlag,\n            pgt_a_is_planned: form.pgtAIsPlanned,\n            patient_history_notes: form.patientHistoryNotes,\n            medi_adminis_prior_cos: form.mediAdminisPriorCos,\n            total_dose_rekovelle_mcg: form.totalDoseRekovelleMcg,\n            stimulation_notes: form.stimulationNotes,\n            sperm_collection_notes: form.spermCollectionNotes,\n            embryology_notes: form.embryologyNotes,\n            endo_rec_testd_performed: form.endoRecTestdPerformed,\n            rec_test_biopsy_result: form.recTestBiopsyResult,\n            transfer_notes: form.transferNotes,\n            pregnancy_outcome_notes: form.pregnancyOutcomeNotes,\n            estimated_date_of_birth: form.estimatedDateOfBirth\n                ? format(form.estimatedDateOfBirth, DATE_FORMAT_STRING)\n                : null,\n            gestational_age: form.gestationalAge,\n            complications_of_pregnancy: form.complicationsOfPregnancy,\n            maternal_health_conditions: form.maternalHealthConditions,\n            diabetes_and_pregnancy: form.diabetesAndPregnancy,\n            hypertension_disorder: form.hypertensionDisorder,\n            type_of_labour: form.typeOfLabour,\n            augmentation: form.augmentation,\n            methods_of_induction: form.methodsOfInduction,\n            type_of_delivery: form.typeOfDelivery,\n            all_indications_of_labour: form.allIndicationsOfLabour,\n            cervical_ripening: form.cervicalRipening,\n            all_indications_caesarean: form.allIndicationsCaesarean,\n            labour_birth_complications: form.labourBirthComplications,\n            maternal_outcome: form.maternalOutcome,\n            birth_weight: form.birthWeight,\n            congenital_anomalies: form.congenitalAnomalies,\n            neonatal_death: form.neonatalDeath,\n            apgar_1: form.apgar1,\n            apgar_5: form.apgar5,\n            apgar_10: form.apgar10,\n            neonatal_birth_complications: form.neonatalBirthComplications,\n            admission_to_nicu: form.admissionToNicu,\n            notes_on_birth_outcome: form.notesOnBirthOutcome,\n            preExistingMentalHealthCondition:\n                form.preExistingMentalHealthCondition,\n            sex_fetus: form.sexFetus,\n            live_born_fetus: form.liveBornFetus\n        };\n\n        store\n            .dispatch(\"born/saveBornExtra\", payload)\n            .then(() => {\n                toast.add({\n                    severity: \"success\",\n                    summary: \"\",\n                    detail: \"Save Successful\",\n                    life: 3000\n                });\n            })\n            .catch(() => {})\n            .finally(() => {\n                loading.value = false;\n            });\n    };\n\n    const save = () => {\n        if (v$.value.$invalid) {\n            return;\n        }\n        _save();\n    };\n\n    return {\n        form,\n        loading,\n        v$,\n        save,\n        fillForm,\n        getBornExtra,\n        medicationForCOS,\n        medicationForCOSContainFSHOrLhOrFshPlusLH\n    };\n}\n\nexport function useBornFieldOptions() {\n    const store = useStore();\n    const complicationsOfPregnancyOptions = computed(\n        () => store.state.options.complicationsOfPregnancy\n    );\n\n    const metarnalHealthConditionOptions = computed(\n        () => store.state.options.maternalHealthConditions\n    );\n\n    const diabetesAndPregnancyOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational | Insulin\",\n            label: \"Gestational | Insulin\"\n        },\n        {\n            value: \"Gestational | No Insulin\",\n            label: \"Gestational | No Insulin\"\n        },\n        {\n            value: \"Gestational | Insulin Status Unknown\",\n            label: \"Gestational | Insulin Status Unknown\"\n        },\n        {\n            value: \"Type I\",\n            label: \"Type I\"\n        },\n        {\n            value: \"Type II | Insulin\",\n            label: \"Type II | Insulin\"\n        },\n        {\n            value: \"Type II | No Insulin\",\n            label: \"Type II | No Insulin\"\n        },\n        {\n            value: \"Type Unknown\",\n            label: \"Type Unknown\"\n        },\n        {\n            value: \"Declined testing\",\n            label: \"Declined testing\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const hypertensionDisorderOptions = reactive([\n        {\n            value: \"None\",\n            label: \"None\"\n        },\n        {\n            value: \"Gestational Hypertension\",\n            label: \"Gestational Hypertension\"\n        },\n        {\n            value: \"Preeclampsia\",\n            label: \"Preeclampsia\"\n        },\n        {\n            value: \"Pre-existing Hypertension with superimposed preeclampsia\",\n            label: \"Pre-existing Hypertension with superimposed preeclampsia\"\n        },\n        {\n            value: \"HELLP Syndrome\",\n            label: \"HELLP Syndrome\"\n        },\n        {\n            value: \"Eclampsia\",\n            label: \"Eclampsia\"\n        },\n        {\n            value: \"Unknown\",\n            label: \"Unknown\"\n        }\n    ]);\n\n    const typeOfLabourOptions = computed(\n        () => store.state.options.typeOfLabour\n    );\n\n    const augmentationOptions = computed(\n        () => store.state.options.augmentation\n    );\n\n    const methodsOfInductionOptions = computed(\n        () => store.state.options.methodsOfInduction\n    );\n\n    const typeOfDeliveryOptions = computed(\n        () => store.state.options.typeOfDelivery\n    );\n\n    const cervicalRipeningOptions = computed(\n        () => store.state.options.cervicalRipening\n    );\n\n    const apgarOptions = reactive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Unknown\"]);\n\n    const neonatalBirthComplicationsOptions = computed(\n        () => store.state.options.newbornComplications\n    );\n\n    const indicationLabourOptions = computed(\n        () => store.state.options.allIndicationsOfLabour\n    );\n\n    const indicationCaesareanOptions = computed(\n        () => store.state.options.allIndicationsCaesarean\n    );\n\n    const labourBirthComplicationsOptions = computed(\n        () => store.state.options.labourBirthComplications\n    );\n\n    const maternalOutcomeOptions = computed(\n        () => store.state.options.maternalOutcome\n    );\n\n    const medicationForCOSOptions = computed(\n        () => store.state.options.medicationAdministraionPriorCOS\n    );\n\n    return {\n        complicationsOfPregnancyOptions,\n        metarnalHealthConditionOptions,\n        diabetesAndPregnancyOptions,\n        hypertensionDisorderOptions,\n        typeOfLabourOptions,\n        augmentationOptions,\n        methodsOfInductionOptions,\n        typeOfDeliveryOptions,\n        cervicalRipeningOptions,\n        apgarOptions,\n        neonatalBirthComplicationsOptions,\n        indicationLabourOptions,\n        indicationCaesareanOptions,\n        labourBirthComplicationsOptions,\n        maternalOutcomeOptions,\n        medicationForCOSOptions\n    };\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n"],"sourceRoot":""}